{"pages":[{"id":1,"title":"TSP command reference","url":"MP5103_TSP_command_reference.htm","text":""},{"id":2,"title":"MP5000 SMU TSP commands","url":"116607.htm","text":"The TSP commands available for the MP5000 Series Modular Precision Mainframe source-measure unit (SMU) modules are listed in alphabetical order.  "},{"id":3,"title":"bufferVar.appendmode","url":"115943.htm","text":"This attribute sets the state of the append mode of the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  0 (disabled)  Usage  state = bufferVar.appendmode  bufferVar.appendmode = state  state  The reading buffer append mode; set to one of the following:  Append mode off; new measure data overwrites existing buffer content: 0  Append mode on; appends new measure data to the existing buffer content: 1  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  Assigning a value to this attribute enables or disables the buffer append mode. This value can only be changed with an empty buffer. Use the bufferVar.clear() command to empty the buffer.  If the append mode is set to 0, any stored readings in the buffer are cleared before new ones are stored. If append mode is set to 1, any stored readings remain in the buffer and new readings are added to the buffer following the stored readings.  With append mode on, the first new measurement is stored at rb[n+1], where n is the number of readings stored in buffer rb.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  buffer1.appendmode = 1  print(buffer1.appendmode)  Append new readings to contents of the the reading buffer buffer1 created for channel 1 of the module installed in slot 1.  Also see  bufferVar.clear  "},{"id":4,"title":"bufferVar.cachemode","url":"115948.htm","text":"This attribute enables or disables the reading buffer cache (on or off).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Not saved  1 (enabled)  Usage  cacheMode = bufferVar.cachemode  bufferVar.cachemode = cacheMode  cacheMode  The reading buffer cache mode; set to one of the following:  Cache mode disabled (off): 0  Cache mode enabled (on): 1  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  Assigning a value to this attribute enables or disables the reading buffer cache. When enabled, the reading buffer cache improves access speed to reading buffer data.   If you run successive operations that overwrite reading buffer data, the reading buffer may return stale cache data. This can happen when initiating successive sweeps without reconfiguring the sweep measurements or when overwriting data in the reading buffer by setting the bufferVar.fillmode attribute to FILL_WINDOW. To avoid this, make sure that you include commands that automatically invalidate the cache as needed (for example, explicit calls to the bufferVar.clearcache() function) or disable the cache using this attribute (bufferVar.cachemode).  Example  buffer1 = slot[1].smu[1].makebuffer(100)  buffer1.cachemode = 1  Enables reading buffer cache of dedicated reading buffer buffer1.  Also see  bufferVar.clearcache()  "},{"id":5,"title":"bufferVar.capacity","url":"115951.htm","text":"This attribute contains the capacity of the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  See Details  Not applicable  Usage  maxNumber = bufferVar.capacity  maxNumber  The maximum number of readings the buffer can store  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  This read-only attribute returns the number of readings that can be stored in the buffer. The buffer capacity does not change as readings fill the buffer.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  maxNumber = buffer1.capacity  print (maxNumber)  Returns the maximum number of readings that can be stored in the buffer1 buffer.<br>For example,  100  Also see  None  "},{"id":6,"title":"bufferVar.clear","url":"115953.htm","text":"This function empties the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  bufferVar.clear()  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  This function clears all readings and associated columns that are enabled, such as timestamps and source values, from the specified buffer.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  buffer1.clear()  Clears readings from the buffer1 buffer.  Also see  None  "},{"id":7,"title":"bufferVar.clearcache","url":"115957.htm","text":"This function clears the cache.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  bufferVar.clearcache()  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  This function clears all readings from the specified cache.   If you run successive operations that overwrite reading buffer data, the reading buffer may return stale cache data. This can happen when you:  Initiate successive sweeps without reconfiguring the sweep measurements. Watch for this when running Lua code remotely on more than one node, because values in the reading buffer cache may change while the Lua code is running.  Overwrite data in the reading buffer by setting the bufferVar.fillmode attribute to FILL_WINDOW.  To avoid this, you can include explicit calls to the bufferVar.clearcache() function to remove stale values from the reading buffer cache.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  buffer1.clearcache()  Clears all readings from the reading buffer cache buffer1.  Also see  bufferVar.fillmode  ***Reading buffers  "},{"id":8,"title":"bufferVar.fillcount","url":"115970.htm","text":"This attribute sets the reading buffer fill count.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  0  Usage  fillCount = bufferVar.fillcount  bufferVar.fillcount = fillCount  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  fillCount  The reading buffer fill count  Details  This attribute sets the number of readings to store before restarting at index 1. If the value is 0, then the capacity of the buffer is used. Use this attribute to control when the SMU restarts filling the buffer at index 1, rather than having it restart when the buffer becomes full.  If the bufferVar.fillcount attribute is set to a value higher than the capacity of the buffer, the behavior is the same as having a fill count of 0. When the buffer capacity is reached, storage continues at the starting index.   This attribute is only used when the  bufferVar.fillmode attribute is set to smu[X].FILL_WINDOW.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  buffer1.fillmode = smu[1].FILL_WINDOW  buffer1.fillcount = 50  Sets the reading buffer buffer1 fill count to 50.  Also see  None  "},{"id":9,"title":"bufferVar.fillmode","url":"115977.htm","text":"This attribute sets the reading buffer fill mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  0 (smu[X].FILL_ONCE)  Usage  fillMode = bufferVar.fillmode  bufferVar.fillmode = fillMode  fillMode  The reading buffer fill mode, where X is the channel of the module containing the buffer; set to one of the following:  Do not overwrite old data: 0 or smu[X].FILL_ONCE  New readings restart at index 1 after acquiring reading at index bufferVar.fillcount: 1 or smu[X].FILL_WINDOW  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  When this attribute is set to smu[X].FILL_ONCE, the reading buffer will not overwrite readings. If the buffer fills up, new readings are discarded.  When this attribute is set to smu[X].FILL_WINDOW, new readingsare added after existing data until the buffer holds bufferVar.fillcount elements. Continuing the sequence, the next reading overwrites the reading at index 1, the following reading overwrites the reading at index 2, and so on.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  buffer1.fillmode = smu[1].FILL_ONCE  Sets the reading mode of the buffer for channel 1 of the module installed in slot 1 so that it does not overwrite readings.  Also see  None  "},{"id":10,"title":"bufferVar.fractionalseconds","url":"116917.htm","text":"This attribute controls whether or not the instrument automatically restarts modules that have been powered-down.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Restore configuration<br>Instrument reset<br>Power cycle  Not applicable  Not applicable  Usage  fractionalSec = bufferVar.fractionalseconds[N]  fractionalSec  The fractional second portion of the timestamp  bufferVar  The name of the reading buffer, which may be a default buffer or a user-defined buffer.  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the buffer.  Details  This read&#8209;only attribute is an array of the fractional portion of the timestamp, in seconds, when each reading occurred. Seconds are shown as fractions.  Example  reset()  testData = buffer.make(50)  trigger.model.load(\"SimpleLoop\", 6, 0, testData)  slot[1].trigger.model.initiate()  waitcomplete()  print(testData.fractionalseconds[1])  printbuffer(1, 6, testData.fractionalseconds)  Create a reading buffer named testData and make six measurements.  Print the fractional portion of the timestamp for the first reading in the buffer.  Example output:  0.647118937  Print the fractional portion of the timestamp for the first six readings in the buffer.  Example output:  0.647118937, 0.064543, 0.48196127, 0.89938724, 0.316800064, 0.734218263  Also see  bufferVar.seconds  ***Reading buffers  "},{"id":11,"title":"bufferVar.measurefunctions","url":"107197.htm","text":"This attribute contains the measurement function that was used to acquire a reading stored in a specified reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  measurefunction = bufferVar.measurefunctions[N]  measurefunction  The measurement function used (current, voltage, ohms, or watts) to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The measurefunction buffer column is a Lua table array of strings indicating the function measured for the reading.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  printbuffer(1, 5, buffer1.measurefunctions)  Prints the measure function for the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":12,"title":"bufferVar.measureranges","url":"107198.htm","text":"This attribute contains the measurement range values that were used for readings stored in a specified buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  measurerange = bufferVar.measureranges[N]  measurerange  The measurement range used to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The measurerange buffer column is a Lua table array of full-scale range values for the measure range used when the measurement was made.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  printbuffer(1, 5, buffer1.measureranges)  Prints the measure range for the first five readings in a reading buffer for channel 1 of the module installed in slot&nbsp;1.  Also see  None  "},{"id":13,"title":"bufferVar.n","url":"107199.htm","text":"This attribute contains the number of readings in the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  See Details  Not applicable  Usage  numberOfReadings = bufferVar.n  numberOfReadings  The number of readings stored in the buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  This read-only attribute contains the number of readings in the buffer.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  numberOfReadings = buffer1.n  Sets the numberOfReadings variable to the number of readings stored in buffer1.n of channel 1 of the module installed in slot 1.  Also see  None  "},{"id":14,"title":"bufferVar.readings","url":"107200.htm","text":"This attribute contains the readings stored in a specified reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  reading = bufferVar.readings[N]  reading  The value of the reading in the specified reading buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The readings buffer column is a Lua table array of the readings stored in the reading buffer. This array holds the same data that is returned when the reading buffer is accessed directly; rb[2] and rb.readings[2] access the same value.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  printbuffer(1, 5, buffer1.readings)  Prints the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":15,"title":"bufferVar.seconds","url":"116918.htm","text":"This contains the timestamp of a reading in seconds, in UTC format.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Restore configuration<br>Instrument reset<br>Power cycle  Not applicable  Not applicable  Usage  nonFracSeconds = bufferVar.seconds[N]  nonFracSeconds  The nonfractional seconds portion of the timestamp when the reading was stored  bufferVar  The name of the reading buffer, which may be a default buffer or a user&#8209;defined buffer  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the&nbsp;buffer  Details  This attribute contains the nonfractional seconds portion of the timestamp when the reading was stored in Coordinated Universal Time (UTC) format.  The nonfractional seconds portion of the timestamp gives the lowest resolution down to 1 second. To access additional resolution of a timestamp, see bufferVar.fractionalseconds.  Example  reset()   testData = buffer.make(50)   trigger.model.load(\"SimpleLoop\", 6, 0, testData)  slot[1].trigger.model.initiate()  waitcomplete()  printbuffer(1, 6, testData.seconds)  Create a reading buffer named testData, configure the instrument to make six measurements, and store the readings in the buffer.  Print the seconds portion for readings 1 to 6 in testData.   Example output:  1362261492, 1362261492, 1362261493, 1362261493, 1362261493, 1362261494  Also see  buffervar.fractionalseconds  "},{"id":16,"title":"bufferVar.sourcefunctions","url":"107201.htm","text":"This function contains the source function that was used for readings stored in a specified reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  sourcefunction = bufferVar.sourcefunctions[N]  sourcefunction  The source function used (such as voltage) to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The sourcefunctions buffer column is a Lua table array of strings indicating the source function at the time of the measurement.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  printbuffer(1, 5, buffer1.sourcefunctions)  Prints the source function for the first five readings in a reading buffer for channel 1 of the module installed in slot&nbsp;1.  Also see  None  "},{"id":17,"title":"bufferVar.sourceoutputstates","url":"107202.htm","text":"This attribute indicates the state of the source output for readings stored in a specified buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  state = bufferVar.sourceoutputstates[N]  state  The output state (off or on) when reading N of the specified buffer was acquired  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The sourceoutputstates buffer column is a Lua table array of strings indicating the state of the source output (off or on) at the time of the measurement.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  printbuffer(1, 5, buffer1.sourceoutputstates)  Prints the source output for the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":18,"title":"bufferVar.sourceranges","url":"107203.htm","text":"This attribute indicates the state of the source range for readings stored in a specified buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  sourcerange = bufferVar.sourceranges[N]  sourcerange  The source range used to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The sourcerange buffer recall attribute is a Lua table array of full-scale range values for the source range used when the measurement was made.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  printbuffer(1, 5, buffer1.sourceranges)  Stores the source range used for the first reading stored in buffer1, then prints the source function for the first five readings in a reading buffer for channel 1 of the module installed in slot&nbsp;1.  Also see  None  "},{"id":19,"title":"bufferVar.sourcevalues","url":"107204.htm","text":"When enabled, this attribute contains the source levels being output when readings in the reading buffer were acquired.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  sourcevalue = bufferVar.sourcevalues[N]  sourcevalue  The source value used to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  If the bufferVar.sourcevalues&nbsp;attribute is enabled before readings are taken, the sourcevalues buffer column is an array (a Lua table) of the sourced value at the time of the reading. You can only set the bufferVar.sourcevalues attribute if the affected reading buffer is empty.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  printbuffer(1, 5, buffer1.sourcevalues)  Prints the source output for the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":20,"title":"bufferVar.statuses","url":"107205.htm","text":"This attribute contains the status values of readings in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  statusInformation = bufferVar.statuses[N]  statusInformation  The status value when reading N of the specified buffer was acquired  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  This read-only buffer column is a Lua table array of the status values for all of the readings in the buffer. The status values are floating-point numbers that encode the status value.  Buffer status bits  Bit  Name  Hex value  Description  B1  Unused  0x02  Unused  B2  Unused  0x04  Unused  B3  Unused  0x08  Unused  B4  4Wire  0x10  4-wire (remote) sense mode enabled  B5  Rel  0x20  Relative offset applied to reading  B6  Compliance  0x40  Source function was limited because the complementary function would be over the compliance limit  B7  Unused  0x80  Unused  Example  buffer1 = slot[1].smu[1].makebuffer(100)  printbuffer(1, 5, buffer1.statuses)  Prints the status values for the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":21,"title":"bufferVar.timestampresolution","url":"115932.htm","text":"This attribute contains the resolution of the timestamp.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  1e-6 (1 µs)  Usage  resolution = bufferVar.timestampresolution  bufferVar.timestampresolution = resolution  resolution  Timestamp resolution in seconds (minimum 1&nbsp;µs; rounded to an even power of&nbsp;2&nbsp;µs)  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  Assigning a value to this attribute sets the resolution for the timestamps. Reading this attribute returns the timestamp resolution value. This value can only be changed with an empty buffer. Empty the buffer using the bufferVar.clear() function.  The finest timestamp resolution is 0.000001 seconds (1 μs). At this resolution, the reading buffer can store unique timestamps for up to 71&nbsp;minutes. You can increase this value for very long tests.  For dedicated reading buffers, all buffer attributes are saved to nonvolatile memory only when the reading buffer is saved to nonvolatile memory.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  buffer1.timestampresolution = 0.000008  Sets the timestamp resolution of dedicated reading buffer 1 to 8 μs.  Also see  bufferVar.clear()  bufferVar.timestamps  "},{"id":22,"title":"bufferVar.timestamps","url":"115875.htm","text":"This attribute contains the timestamp for each reading in the specified buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  1  Usage  timestamp = bufferVar.timestamps[N]  timestamp  The complete timestamp (including date, time, and fractional seconds) of reading number N in the specified reading buffer when the reading was acquired  bufferVar  The reading buffer can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  When enabled by the bufferVar.collecttimestamps attribute, this attribute contains the timestamp (relative to bufferVar.basetimestamp) when each reading saved in the specified reading buffer occurred.This attribute is relative to the buffervar.basetimestamp.  The bufferVar.timestamps information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you cannot access any time information from a reading buffer.  If enabled, this buffer recall attribute is like an array (a Lua table) that contains timestamps, in seconds, of when each reading occurred.  For dedicated reading buffers, all buffer attributes are saved to nonvolatile memory only when the reading buffer is saved to nonvolatile memory.  Example  buffer1 = slot[1].smu[1].makebuffer(100)  timestamp = buffer1.timestamps[1]  Retrieve the timestamp of the first reading stored in buffer1.  Also see  bufferVar.clear()  bufferVar.n  bufferVar.readings  bufferVar.statuses  Reading buffers  "},{"id":23,"title":"slot[Z].firmware.update()","url":"107623.htm","text":"This function flashes a firmware image of a module installed in a slot after the image has been downloaded to the mainframe.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].firmware.update()  Z  Module slot number  Details  This function flashes the firmware of a module connected to a slot. Send this command after the firmware image has been downloaded to the mainframe, either by opening a raw socket connection or by using an existing utility or tool to download the image, or after inserting a USB flash drive containing the image.  Example  slot[1].firmware.update()  Flashes the firmware of the module installed in slot 1.  Also see  slot[Z].firmware.verify  "},{"id":24,"title":"slot[Z].firmware.verify()","url":"107622.htm","text":"This function verifys that an image downloaded to the mainframe is the exact firmware flashed onto a module.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  result = slot[Z].firmware.verify()  Z  Module slot number  Details  This function verifies that the firmware of a module connected to a slot is the same as the firmware downloaded to the mainframe computer. This should be invoked after the image has been downloaded onto the mainframe, either by opening a raw socket connection or using an existing utility or tool that will download the image.   This function is useful to determine that the firmware has flashed correctly after performing a slot[Z].firmware.update() command.  Example  print(slot[1].firmware.verify())  Verifies that the firmware of the module installed in slot 1 is the same as the firmware downloaded to the mainframe.  Also see  slot[Z].firmware.update  "},{"id":25,"title":"slot[Z].license","url":"117422.htm","text":"This attribute stores the license of the module installed in the specified mainframe slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  license = slot[Z].license  license  License text of the instrument  Z  Module slot number  Details  This attribute stores the license of the module installed in the specified mainframe slot.  Example  print(slot[1].license)  Returns the license of the module installed in slot 1 of the mainframe.  Also see  None  "},{"id":26,"title":"slot[Z].manufacturer","url":"107212.htm","text":"This attribute stores the manufacturer of the module in the specified mainframe slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Tektronix  Usage  manufacturer = slot[Z].manufacturer  manufacturer  This is always Tektronix  Z  Module slot number  Details  This attribute stores the manufacturer of the module installed in the specified mainframe slot.  Example  print(slot[1].manufacturer)  Returns the manufacturer of the module installed in slot 1:  Tektronix  Also see  None  "},{"id":27,"title":"slot[Z].model","url":"107213.htm","text":"This attribute stores the model number of the module in the specified mainframe slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  model = slot[Z].model  model  The model number of the module.  Z  Module slot number  Details  This attribute stores the model number of the module installed in the specified slot.  Example  print(slot[1].model)  Returns the model number of the module installed in slot 1.  Also see  None  "},{"id":28,"title":"slot[Z].serialno","url":"107214.htm","text":"This attribute stores the serial number of the module in the specified mainframe slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  serialno = slot[Z].serialno  serialno  The serial number of the module  Z  Module slot number  Details  This attribute stores the serial number of the module installed in the specified slot.  Example  slot[1].serialno  Returns the serial number of the module installed in slot 1.  Also see  None  "},{"id":29,"title":"slot[Z].smu[X].abort()","url":"111443.htm","text":"This function terminates all overlapped operations on the specified channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].abort()  Z  Module slot number  X  Module channel number  Details  This function terminates all overlapped operations on the specified channel.  This function does not turn the output off or change any setting.  Example  slot[1].smu[1].abort()  Aborts overlapped measurements for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.overlappedY()  "},{"id":30,"title":"slot[Z].smu[X].configlist.create()","url":"115235.htm","text":"This function creates an empty configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].configlist.create(\"configListName\")  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a measure configuration list  Details  This command creates an empty configuration list. To add configuration indexes to this list, use the slot[Z].smu[X].configlist.store() command.  Configuration lists are not saved when the instrument is turned off. To save a configuration list, create a configuration script to save instrument settings, including any defined configuration lists. Configuration list names must be unique.  Example  slot[1].smu[1].configlist.create(\"MyMeasList\")  Creates a configuration list named MyMeasList on channel 1 of the module installed in slot 1.  Also see  \"Configuration lists\" in the General operation section of the MP5000 Source-Measure Unit Reference Manual  slot[Z].smu[X].configlist.table()  slot[Z].smu[X].configlist.delete()  slot[Z].smu[X].configlist.query()  slot[Z].smu[X].configlist.recall()  slot[Z].smu[X].configlist.size()  slot[Z].smu[X].configlist.store()  "},{"id":31,"title":"slot[Z].smu[X].configlist.delete()","url":"115238.htm","text":"This function deletes a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].configlist.delete(\"configListName\")  slot[Z].smu[X].configlist.delete(\"configListName\", index)  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a configuration list  index  A number starting from 1 that defines a specific configuration index in the configuration&nbsp;list  Details  Deletes a configuration list. If the index is not specified, the entire configuration list is deleted. If the index is specified, only the specified configuration index in the list is deleted.  When an index is deleted from a configuration list, the index numbers of the following indexes are shifted up by one. For example, if you have a configuration list with 10 indexes and you delete index 3, the index that was numbered 4 becomes index 3, and the all the following indexes are renumbered in sequence to index 9. Because of this, if you want to delete several nonconsecutive indexes in a configuration list, it is best to delete the higher numbered index first, then the next lower index, and so on. This also means that if you want to delete all the indexes in a configuration list, you must delete index 1 repeatedly until all indexes have been removed.  Example  slot[1].smu[1].configlist.delete(\"myMeasList\")  Deletes a configuration list named myMeasList on channel 1 of the module installed in slot 1.  slot[1].smu[1].configlist.delete(\"myMeasList\", 2)  Deletes configuration index 2 from the configuration list named myMeasList on channel 1 of the module installed in slot 1.  Also see  \"Configuration lists\" in the General operation section of the MP5000 Source-Measure Unit Reference Manual  createconfigscript()  slot[Z].smu[X].configlist.create()  "},{"id":32,"title":"slot[Z].smu[X].configlist.query()","url":"115239.htm","text":"This function returns a list of TSP commands and parameter settings that are stored in the specified configuration index.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].configlist.query(\"configListName\", index)  slot[Z].smu[X].configlist.query(\"configListName\", index, \"fieldSeparator\")  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a configuration list  index  A number starting from 1 that defines a specific index in the configuration list  fieldSeparator  String that represents the separator for the data; use one of the following:  Comma (default): ,  Semicolon: ;  Newline: \\n  Details  This command recalls data for one configuration index.   For additional details about the information this command recalls when using a configuration list query command, see \"Settings stored in a configuration index\" in the MP5000 Source&#8209;Measure Unit Reference Manual.  Example  print(slot1.smu1.configlist.query(\"testMeasList\", 2, \"\\n\"))  Returns the TSP commands and parameter settings that represent the settings in configuration index 2 on channel 1 of the module installed in slot 1.  Example output:  slot1.smu1.measure.func = smu.FUNC_DC_CURRENT  slot1.smu1.measure.range = 1.000000e-08  slot1.smu1.measure.autorange = smu.ON  slot1.smu1.measure.autorangelow = 1.000000e-08  slot1.smu1.measure.autozero.enable = smu.ON  slot1.smu1.measure.displaydigits = smu.DIGITS_5_5  slot1.smu1.measure.filter.enable = smu.OFF  slot1.smu1.measure.filter.count = 10  slot1.smu1.measure.filter.type = smu.FILTER_REPEAT_AVG  slot1.smu1.measure.limit[1].autoclear = smu.ON  slot1.smu1.measure.limit[1].enable = smu.OFF  slot1.smu1.measure.limit[1].high.value = 1.000000e+00  slot1.smu1.measure.limit[1].low.value = -1.000000e+00  slot1.smu1.measure.limit[2].autoclear = smu.ON  slot1.smu1.measure.limit[2].enable = smu.OFF  slot1.smu1.measure.limit[2].high.value = 1.000000e+00  slot1.smu1.measure.limit[2].low.value = -1.000000e+00  slot1.smu1.measure.math.enable = smu.OFF  slot1.smu1.measure.math.format = smu.MATH_PERCENT  slot1.smu1.measure.math.mxb.bfactor = 0.000000e+00  slot1.smu1.measure.math.mxb.mfactor = 1.000000e+00  slot1.smu1.measure.math.percent = 1.000000e+00  slot1.smu1.measure.userdelay[1] = 0.000000e+00  slot1.smu1.measure.userdelay[2] = 0.000000e+00  slot1.smu1.measure.userdelay[3] = 0.000000e+00  slot1.smu1.measure.userdelay[4] = 0.000000e+00  slot1.smu1.measure.userdelay[5] = 0.000000e+00  slot1.smu1.measure.nplc = 1.000000e+00  slot1.smu1.measure.offsetcompensation = smu.OFF  slot1.smu1.measure.sense = smu.SENSE_2WIRE  slot1.smu1.terminals = smu.TERMINALS_FRONT  slot1.smu1.measure.unit = smu.UNIT_AMP  slot1.smu1.measure.rel.enable = smu.OFF  slot1.smu1.measure.rel.level = 0.000000e+00  Also see  \"Configuration lists\" in the General operation section of the MP5000 Source-Measure Unit Reference Manual  createconfigscript()  slot[Z].smu[X].configlist.create()  "},{"id":33,"title":"slot[Z].smu[X].configlist.recall()","url":"115236.htm","text":"This function recalls a configuration index in a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].configlist.recall(\"configListName\", index)  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a configuration list  index  A number starting from 1 that defines a specific configuration index in the measure configuration list  Details  Use this command to recall the settings stored in a specific configuration index in a configuration list. If you do not specify an index when you send the command, an error message is displayed.  If you recall an invalid index (for example, calling index 3 when there are only two indexes in the configuration list) or try to recall an index from an empty configuration list, an error message is displayed.  Each index contains the settings for the selected function of that index. Settings for other functions are not affected when the configuration list index is recalled. A single index stores the settings associated with a single measurement.   For additional details about the information this command recalls when using a configuration list query command, see \"Settings stored in a configuration index\" in the MP5000 Source&#8209;Measure Unit Reference Manual.  Example  slot[1].smu[1].configlist.recall(\"MyMeasList\", 5)  Recalls configuration index 5 in a configuration list named MyMeasList on channel 1 of the module installed in slot 1.  Also see  \"Configuration lists\" in the General operation section of the MP5000 Source-Measure Unit Reference Manual  createconfigscript()  slot[Z].smu[X].configlist.create()  slot[Z].smu[X].configlist.store()  "},{"id":34,"title":"slot[Z].smu[X].configlist.size()","url":"115241.htm","text":"This function returns the size (number of configuration indexes) of a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  indexCount = slot[Z].smu[X].configlist.size(\"configListName\")  Z  Module slot number  X  Module channel number  indexCount  A number starting from 0 that represents the total count of indexes stored in the specified configuration list  configListName  A string that represents the name of a configuration list  Details  This command returns the size (number of configuration indexes) of a configuration list.  The size of the list is equal to the number of configuration indexes in a configuration list.  Example  print(slot[1].smu[1].configlist.size(\"testMeasList\"))  Returns the number of configuration indexes in a configuration list named testMeasList on channel&nbsp;1 of the module installed in slot 1.  Example output:  1  Also see  slot[Z].smu[X].configlist.create()  "},{"id":35,"title":"slot[Z].smu[X].configlist.store()","url":"115237.htm","text":"This function stores the active measure settings into the named configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].configlist.store(\"configListName\")  slot[Z].smu[X].configlist.store(\"configListName\", index)  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a configuration list  index  A number starting from 1 that defines a specific configuration index in the configuration list. This parameter is optional.  Details  Use this command to store the active measure settings to a configuration index in a configuration list. If the index parameter is not provided, the new settings are appended to the end of the list. The index only stores the active settings for a single active measure function.  Configuration lists are not saved when the instrument is turned off or reset. To save a configuration list, create a configuration script to save instrument settings, including any defined configuration lists.   For a complete list of measure settings that the instrument stores, see \"Settings stored in a measure configuration index\" in the MP5000 Source&#8209;Measure Unit Reference Manual.  Example  slot[1].smu[1].configlist.store(\"MyConfigList\")  Stores the active settings of the instrument to the end of the configuration list MyConfigList on channel 1 of the module installed in slot 1.  slot[1].smu[1].configlist.store(\"MyConfigList\", 5)  Stores the active settings of the instrument to configuration index 5 in the configuration list MyConfigList on channel 1 of the module installed in slot 1.  Also see  \"Configuration lists\" in the General operation section of the MP5000 Source-Measure Unit Reference Manual  createconfigscript()   slot[Z].smu[X].configlist.create()  "},{"id":36,"title":"slot[Z].smu[X].configlist.table()","url":"115240.htm","text":"This function returns the name of one measure configuration lists that is stored on the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].configlist.table()  Z  Module slot number  X  Module channel number  Details  You can use this command to retrieve the names of measure configuration lists that are stored in the instrument.   This command returns one name each time you send it. This command returns nil to indicate that there are no more names to return. If the command returns nil the first time you send it, no measure configuration lists have been created for the instrument.  Example  print(slot[1].smu[1].configlist.table())  Requests the name of one configuration list that is stored in the instrument. Send the command again until it returns nil to get all stored lists.  print(slot[1].smu[1].configlist.table())  If there are two configuration lists on the instrument.  Example output:  testMeasList  print(slot[1].smu[1].configlist.table())  myMeasList  print(slot[1].smu[1].configlist.table())  nil  Also see  \"Configuration lists\" in the General operation section of the MP5000 Source-Measure Unit Reference Manual  createconfigscript()  slot[Z].smu[X].configlist.create()  "},{"id":37,"title":"slot[Z].smu[X].contact.calibratehi()","url":"115212.htm","text":"This function adjusts the high/sense high contact check measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].contact.calibratehi(cp1Measured, cp1Reference, cp2Measured, cp2Reference)  Z  Module slot number  X  Channel (1 or 2)  cp1Measured  The value measured for point 1  cp1Reference  The reference measurement for point 1 as measured externally  cp2Measured  The value measured for point 2  cp2Reference  The reference measurement for point 2 as measured externally  Details  Contact check measurement calibration does not require range information.  Typically, points one and two are near 0 Ω and 50 Ω, respectively.  All four measurements (cp1Measured, cp1Reference, cp2Measured, and cp2Reference) must be made with the active calibration set. If not, corruption of the calibration constants may result.  The new calibration constants are activated immediately but are not written to nonvolatile memory. Use slot[Z].smu[X].cal.save() to save the new constants to nonvolatile memory. The active calibration constants stay in effect until the instrument is power cycled or a calibration set is loaded from nonvolatile memory with the slot[Z].smu[X].cal.restore() function.  This function is disabled until a successful call to slot[z].smuX.cal.unlock() is made.  Example  -- Short SENSE LO and LO terminals.  -- Short SENSE HI and HI terminals.  -- Allow readings to settle, then get measurements.  r0_hi, r0_lo = slot[1].smu[1].contact.r()  -- Connect 50 OHM resistor between SENSE LO and LO.  -- Connect 50 OHM resistor between SENSE HI and HI.  -- Allow readings to settle, then get measurements.  r50_hi, r50_lo = slot[1].smu[1].contact.r()  slot[1].smu[1].contact.calibratelo(r0_lo, Z_actual_lo, r50_lo, 50_ohm_actual_lo)  slot[1].smu[1].contact.calibratehi(r0_hi, Z_actual_hi, r50_hi, 50_ohm_actual_hi)  For channel 1 of the SMU installed in slot 1 of the MP5000 Series mainframe:  The instrument performs a contact check.  Install and measure two resistors.  The user sends the contact check LO calibration command.  The user sends the contact check HI calibration command.  Also see  Adjustment section in the MP5000 SMU Calibration and Adjustment Manual  slot[Z].smu[X].cal.restore() in the MP5000 SMU Calibration and Adjustment Manual  slot[Z].smu[X].cal.save() in the MP5000 SMU Calibration and Adjustment Manual  slot[Z].smu[X].cal.unlock() in the MP5000 SMU Calibration and Adjustment Manual  slot[Z].smu[X].contact.calibratelo  "},{"id":38,"title":"slot[Z].smu[X].contact.calibratelo()","url":"115215.htm","text":"This function adjusts the low/sense low contact check measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].contact.calibratelo(cp1Measured, cp1Reference, cp2Measured, cp2Reference)  Z  Module slot number  X  Channel (1 or 2)  cp1Measured  The value measured for point 1  cp1Reference  The reference measurement for point 1 as measured externally  cp2Measured  The value measured for point 2  cp2Reference  The reference measurement for point 2 as measured externally  Details  Contact check measurement calibration does not require range information.  Typically, points one and two are near 0 Ω and 50 Ω, respectively.  All four measurements (cp1Measured, cp1Reference, cp2Measured, and cp2Reference) must be made with the active calibration set. If not, corruption of the calibration constants may result.  The new calibration constants are activated immediately but are not written to nonvolatile memory. Use slot[Z].smuX.cal.save() to save the new constants to nonvolatile memory. The active calibration constants stay in effect until the instrument is power cycled or a calibration set is loaded from nonvolatile memory with the slot[Z].smu[X].cal.restore() function.  This function is disabled until a successful call to slot[z].smuX.cal.unlock() is made.  Example  -- Short SENSE LO and LO terminals.  -- Short SENSE HI and HI terminals.  -- Allow readings to settle, then get measurements.  r0_hi, r0_lo = slot[1].smu[1].contact.r()  -- Connect 50 OHM resistor between SENSE LO and LO.  -- Connect 50 OHM resistor between SENSE HI and HI.  -- Allow readings to settle, then get measurements.  r50_hi, r50_lo = slot[1].smu[1].contact.r()  slot[1].smu[1].contact.calibratelo(r0_lo, Z_actual_lo, r50_lo, 50_ohm_actual_lo)  slot[1].smu[1].contact.calibratehi(r0_hi, Z_actual_hi, r50_hi, 50_ohm_actual_hi)  For channel 1 of the SMU installed in slot 1 of the MP5000 Series mainframe:  The instrument performs a contact check.  Install and measure two resistors.  The user sends the contact check LO calibration command.  The user sends the contact check HI calibration command.  Also see  Adjustment section in the MP5000 SMU Calibration and Adjustment Manual  slot[Z].smu[X].cal.restore() in the MP5000 SMU Calibration and Adjustment Manual  slot[Z].smu[X].cal.save() in the MP5000 SMU Calibration and Adjustment Manual  slot[Z].smu[X].cal.unlock() in the MP5000 SMU Calibration and Adjustment Manual  slot[Z].smu[X].contact.calibratehi()  "},{"id":39,"title":"slot[Z].smu[X].contact.check()","url":"111445.htm","text":"This function performs a contact check measurement and compares the result to the user-specified contact check threshold setting.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  contactCheckResult, hi, lo = slot[Z].smu[X].contact.check()  contactCheckResult  The result of the contact check measurement: true or false  hi  The contact check hi measurement in ohms; only available with calibration&nbsp;unlocked  lo  The contact check lo measurement in ohms; only available with calibration&nbsp;unlocked  X  Module channel number  Z  Module slot number  Details  Performs a contact check measurement sequence, then compares the result to the user&#8209;specified threshold set using slot[Z].smu[X].contact.threshold. Returns true if the measurement is within the threshold. If it is not within the threshold, it returns false.  This measurement is performed on the best fixed range for the user threshold setting.  The command also returns the resistance measurements used in determining the contact check result, but only when calibration is unlocked. These measurements are needed for the contact check calibration procedure.  Example  print(slot[1].smu[1].contact.check())  Returns true or false based on the contact resistances for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].contact.r()  slot[Z].smu[X].contact.threshold  slot[Z].smu[X].contact.speed  "},{"id":40,"title":"slot[Z].smu[X].contact.r()","url":"111444.htm","text":"This function performs a contact check measurement and returns the measured contact resistances.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  hi, lo = slot[Z].smu[X].contact.r()  hi  The contact check hi measurement in ohms  lo  The contact check lo measurement in ohms  Z  Module slot number  X  Module channel number  Example  print(slot[1].smu[1].contact.r())  Performs a measurement of the hi and lo contact resistances for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].contact.check()  slot[Z].smu[X].contact.speed  "},{"id":41,"title":"slot[Z].smu[X].contact.speed","url":"111446.htm","text":"This attribute sets the contact check measurement speed.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  slot[Z].smu[X].CONTACT_FAST  Usage  slot[Z].smu[X].contact.speed = contactCheckSpeed  contactCheckSpeed = slot[Z].smu[X].contact.speed  Z  Module slot number  X  Module channel number  contactCheckSpeed  The contact check speed option:  slot[Z].smu[X].CONTACT_FAST  slot[Z].smu[X].CONTACT_MEDIUM  slot[Z].smu[X].CONTACT_SLOW  Details  This attribute contains the contact check speed fast, medium, or slow. The speed setting affects both the contact check function and the contact resistance measurement function.  The speed setting directly changes the number of conversions averaged during each phase of a contact check measurement.  Example  slot[1].smu[1].contact.speed = slot[1].smu[1].CONTACT_MEDIUM  Sets the contact check measurement speed to medium for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].contact.r()  slot[Z].smu[X].contact.check()  "},{"id":42,"title":"slot[Z].smu[X].contact.threshold","url":"111447.htm","text":"This attribute sets the contact check pass or fail threshold.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  50.0 (Ω)  Usage  slot[Z].smu[X].contact.threshold = contactCheckThreshold  contactCheckThreshold = slot[Z].smu[X].contact.threshold  Z  Module slot number  X  Module channel number  contactCheckThreshold  The contact check pass or fail threshold in ohms  Details  This attribute contains the contact check pass/fail threshold used by the contact check function slot[Z].smu[X].contact.check(). Acceptable settings are ****.  The threshold also effectively sets the contact check measure range used by slot[Z].smu[X].contact.check() and calibration.  Example  slot[1].smu[1].contact.threshold = 100  Sets the contact check function pass or fail threshold to 100 Ω for the module installed in slot 1.  Also see  slot[Z].smu[X].contact.check()  "},{"id":43,"title":"slot[Z].smu[X].defbufferY","url":"104128.htm","text":"This attribute contains the default dedicated reading buffers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  See Details  Not applicable  Usage  bufferVar = slot[Z].smu[X].defbufferY  bufferVar  The dedicated reading buffer  Z  Module slot number  X  Module channel  Y  Buffer (1 = debuffer1, 2 = debuffer2)  Details  Each SMU channel contains two dedicated reading buffers: slot[Z].smu[X].defbuffer1 and slot[Z].smu[X].defbuffer2.  All routines that return measurements can store readings in either buffer.  Example  slot[1].smu[2].measure.v(slot[1].smu[2].defbuffer1)  Stores voltage measurements in defbuffer1 of channel 2 of the module installed in slot 1.  Also see  None  "},{"id":44,"title":"slot[Z].smu[X].guard.v()","url":"115847.htm","text":"This function makes a guard voltage measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  reading = slot[Z].smu[X].guard.v()  reading  The measurement value  Z  Module slot number  X  Module channel number  Details  This function performs a guard output voltage measurement. The result is useful to determine if the guard is shorted or otherwise loaded in a way that makes it ineffective. Under normal conditions, the guard voltage should be 0 V.  Example  GuardVoltage = slot[1].smu[1].guard.v()  Measures the guard output voltage of channel 1 of the module installed in slot 1.  Also see  None  "},{"id":45,"title":"slot[Z].smu[X].makebuffer()","url":"109252.htm","text":"This function creates a reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  bufferVar = slot[Z].smu[X].makebuffer(bufferSize)  bufferVar  The name of the buffer being created  Z  Module slot number  X  Module channel number  bufferSize  The desired size of the reading buffer  Details  Reading buffers can be created and allocated dynamically using this function. Use bufferSize to designate the number of readings the buffer can store.  An error is returned if bufferSize exceeds the maximum storage capacity of the module  Dynamically allocated reading buffers can be used interchangeably with the dedicated slot[Z].smu[X].defbufferY buffers.  A reading buffer can be deleted by setting all references to the reading buffer equal to nil, then running the garbage collector.  Example  mybuffer2 = slot[1].smu[2].makebuffer(200)  Creates a 200-element reading buffer (mybuffer2) for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].defbufferY  "},{"id":46,"title":"slot[Z].smu[X].measure.aperture","url":"104129.htm","text":"This attribute configures the measurement aperture for a channel in seconds.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  slot[Z].smu[X].measure.nplc<br>Instrument reset<br>Recall setup  Saved setup  1e−6  Usage  value = slot[Z].smu[X].measure.aperture  value  Aperture: 1e-6 to 500e-3 s  Z  Module slot number  X  Module channel number  Details  This setting configures the aperture for a channel in seconds. Setting this attribute affects the slot[Z].smu[X].measure.nplc attribute.  This attribute is useful when you want to set a fixed measurement aperture time. To set an aperture that is a multiple of power line cycles, use slot[Z].smu[X].measure.nplc.  Example  print(slot[1].smu[2].measure.aperture)  Returns the present measure aperture in seconds for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.nplc  "},{"id":47,"title":"slot[Z].smu[X].measure.autodelay","url":"111487.htm","text":"This attribute enables or disables the automatic measurement delay.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  ON  Usage  autoDelay = slot[Z].smu[X].measure.autodelay  slot[Z].smu[X].measure.autodelay = autoDelay  autoDelay  The measure autodelay setting:  Enabled: slot[Z].smu[X].ON  Disabled: slot[Z].smu[X].OFF  Z  Module slot number  X  Module channel number  Details  This attribute enables or disables the automatic measure delay.  When enabled, a source range-dependent delay is added before the first measurement. This happens when a measurement command executes when the measure action is performed in a sweep, or after changing ranges during an autoranged measurement.  When disabled, the value of the slot.[Z].smu[X].measure.delay attribute is used as the measure delay.  Example  slot[1].smu[1].measure.autodelay = slot[1].smu[1].ON  Enables the automatic measure delay for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.delay  "},{"id":48,"title":"slot[Z].smu[X].measure.autorangeY","url":"111575.htm","text":"This attribute contains the state of the measure autorange control (on or&nbsp;off).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  slot[Z].smu[X].measure.rangeY<br>***  ***  smu[X].ON  Usage  measureAutorange = slot[Z].smu[X].measure.autorangeY  slot[Z].smu[X].source.autorangeY = measureAutorange  measureAutorange  State of autorange:  Disabled (fixed range): slot[Z].smu[X].OFF or 0  Enabled (autorange): slot[Z].smu[X].ON or 1  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This attribute indicates the measurement autorange state.  Setting this attribute to slot[Z].smu[X].OFF puts the SMU on a fixed measure range. The fixed range is the present SMU measure range.  Setting this attribute to slot[Z].smu[X].ON puts the SMU measure circuit in autorange mode. It remains on its present measure range until the next measurement is requested. At this time, a new range may be selected based on the result of the measurement. The slot[Z].smu[X].measure.rangeY attribute is updated to reflect the new range.  If slot[Z].smu[X].measure.autodelay is set to slot[Z].smu[X].ON, a settling delay will be automatically added between measurements for each range change required.  Example  slot[2].smu[1].measure.autorangey = slot[2].smu.ON  Enables autoranging for the current measurement function for channel 1 of the module installed in slot 2.  Also see  slot[Z].smu[X].measure.lowrangeY  slot[Z].smu[X].measure.rangeY  "},{"id":49,"title":"slot[Z].smu[X].measure.count","url":"104136.htm","text":"This attribute sets the number of measurements performed when a measurement is requested.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  count = slot[Z].smu[X].measure.count  slot[Z].smu[X].measure.count = count  count  Number of measurements > 0  Z  Module slot number  X  Module channel number  Details  This attribute controls the number of measurements made any time a measurement is requested. When using a reading buffer with a measure command, this attribute also controls the number of readings to be stored.   Example  slot[1].smu[1].measure.count = 100  Sets the number of measurements to be performed on channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.overlappedY()  slot[Z].smu[X].measure.Y()  "},{"id":50,"title":"slot[Z].smu[X].measure.delay","url":"111488.htm","text":"This attribute controls the measurement delay.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  0 (s)  Usage  delay = slot[Z].smu[X].measure.delay  slot[Z].smu[X].measure.delay = delay  delay  The measure delay value (in seconds), set to a value between 0 and   Z  Module slot number  X  Module channel number  Details  This attribute allows for additional delay (settling time) before making a measurement. If slot[Z].smu[X].measure.autodelay is set to slot[Z].smu[X].OFF, this value is used for the measure delay instead of using the automatic delay value, regardless of the range.  When reading this attribute, if slot[Z].smu[X].measure.autodelay is set to slot[Z].smu[X].ON, the value returned is the automatic delay value of the present source range. The user delay value can still be programmed and is not overwritten when autodelay is turned on, and that delay will be used when autodelay is turned off again.  If slot[Z].smu[X].measure.count is greater than 1, the measurement delay is only inserted before the first measurement.  To disable all measurement delays, set slot[Z].smu[X].measure.autodelay to slot[Z].smu[X].OFF and set slot[Z].smu[X].measure.delay to 0.  Example  slot[1].smu[1].measure.delay = 0.2  Sets the first measurement delay to 200 ms for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.autodelay  slot[Z].smu[X].measure.interval  "},{"id":51,"title":"slot[Z].smu[X].measure.interval","url":"111489.htm","text":"This attribute sets the interval between multiple measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Never  Nonvolatile memory  0 (s)  Usage  interval = slot[Z].smu[X].measure.interval  slot[Z].smu[X].measure.interval = interval  interval  The interview value (in seconds), set to a value between 0 and   Z  Module slot number  X  Module channel number  Details  This attribute sets the time interval between measurements when slot[Z].smu[X].measure.count is set to a value greater than 1. The SMU attempts to start each measurement when scheduled. If the SMU cannot keep up with the interval setting, measurements are made as quickly as possible.  Example  slot[1].smu[1].measure.interval = 100e-3  Sets the time between measurements to 100 ms for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.count  "},{"id":52,"title":"slot[Z].smu[X].measure.lowrangeY","url":"111576.htm","text":"This attribute sets the lowest measurement range to be used when the instrument is autoranging.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Module reset<br>Recall setup  Saved setup  Current: 10e-9 (10nA)<br>Voltage: 200e-3 (200 mV)  Usage  measureLowrange = slot[Z].smu[X].measure.lowrangeY  slot[Z].smu[X].source.lowrangeY = measureLowrange  measureLowrange  The lowest voltage or current range to use during autoranging  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This attribute is used with autoranging to put a lower boundary on the range used. Since lower ranges generally require greater settling times, setting a lowest range limit could make measurements require less settling time.  If the instrument is set to autorange and it is on a range lower than the specified low range, the range is changed to the measureLowrange&nbsp;range value when the next measurement is made.  Example  slot[3].smu[1].measure.lowrangev = 6  Sets the low range for the voltage measurement function to 6 V for channel 1 of the module installed in slot 3.  Also see  slot[Z].smu[X].measure.autorangeY  slot[Z].smu[X].measure.rangeY  "},{"id":53,"title":"slot[Z].smu[X].measure.nplc","url":"104130.htm","text":"This command sets the time that the input signal is measured in number of power line cycles.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  slot[Z].smu[X].measure.aperture<br>Instrument reset<br>Recall setup  Saved setup  1.0  Usage  nplc = slot[Z].smu[X].measure.nplc  nplc  Power line cycles: 0.00005 to 30  Z  Module slot number  X  Module channel number  Details  This setting configures the measurement aperture in number of power line cycles (NPLC) for the channel. The measurement aperture is the amount of time that the input signal is measured. The amount of time is specified as the number of power line cycles (NPLCs). Each PLC for 60&nbsp;Hz is 16.67&nbsp;ms (1/60) and each PLC for 50&nbsp;Hz is 20&nbsp;ms (1/50). For 60&nbsp;Hz, if you set the NPLC to 0.1, the measure time is 1.667 ms. The shortest amount of time results in the fastest reading rate but increases the reading noise. The longest amount of time provides the lowest reading noise but has the slowest reading rate.  Settings between the fastest and slowest number of power line cycles are a compromise between speed and noise.  If you change this attribute, the slot[Z].smu[X].measure.aperture attribute is changed to the equivalent value of seconds.  Use this attribute to set a measurement aperture that is a multiple of the number of power line cycles. To set a fixed aperture, use slot[Z].smu[X].measure.aperture.  Example  NPLC1 = slot[1].smu[2].measure.nplc  print(NPLC1)  Reads the measurement aperture in NPLCs for channel 2 of the module installed in slot 1 and prints the value of NPLC1.  Also see  slot[Z].smu[X].measure.aperture  "},{"id":54,"title":"slot[Z].smu[X].measure.overlappedY()","url":"104131.htm","text":"This function starts an asynchronous (background) measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  slot[Z].smu[X].measure.overlappedY(rbuffer)  slot[Z].smu[X].measure.overlappediv(ibuffer, vbuffer)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance r  Power: p  rbuffer  A reading buffer object where readings are stored  ibuffer  A reading buffer object where current readings are stored  vbuffer  A reading buffer object where voltage readings are stored  Details  This function starts a measurement and immediately returns the readings. The measurements are stored in a reading buffer, along with any ancillary information also acquired. If the instrument is configured to return multiple readings, the readings become available as they are made.  Measurements are in the following units: v = volts, i = amperes, r = ohms, p = watts.  The slot[Z].smu[X].measure.overlappediv() function stores current readings in ibuffer and voltage readings in vbuffer.  This function is an overlapped command. Script execution continues while measurements are made in the background. Attempts to access result values that have not yet been generated cause the script to wait for the data to become available. The waitcomplete() function can also be used to wait for the measurements to complete before continuing with the script.  Any data in a reading buffer is deleted before recording any measurements unless the reading buffer has been configured to append data.  Example  slot[1].smu[1].measure.overlappedv(slot[1].smu[1].defbuffer1)  Starts background voltage measurements for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.aperture  "},{"id":55,"title":"slot[Z].smu[X].measure.rangeY","url":"104132.htm","text":"This attribute contains the positive, full scale value of the measurement range for voltage or current.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Usage  rangeValue = slot[Z].smu[X].measure.rangeY  rangeValue  Voltage: 200 mV, 2 V, 6 V, 20 V, or 60 V  Current: 100 nA,1 µA, 10 µA, 100 µA, 1 mA, 10 mA, 100 mA, 1 A, or 1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This attribute indicates the range to use for measuring the specified function.  Example  print(slot[1].smu[2].measure.rangev)  Displays the present voltage measurement range for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.autorangeY  slot[Z].smu[X].source.rangeY  "},{"id":56,"title":"slot[Z].smu[X].measure.rel.enableY","url":"104133.htm","text":"This attribute turns relative measurements on or off.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  relEnable = slot[Z].smu[X].measure.rel.enableY  slot[Z].smu[X].measure.rel.enableY = relEnable  relEnable  Relative measurement control; set relEnable to one of the following values:  Disable relative measurements: smu[X].DISABLE  Enable relative measurements: smu[X].ENABLE  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance: r  Power: p  Details  This attribute enables or disables relative measurements. When relative measurements are enabled, all subsequent measured readings are offset by the relative offset value specified by slot[Z].smu[X].measure.rel.levelY.   Each returned measured relative reading is the result of the following:  Relative reading = Actual measured reading − Relative offset value  Example  slot[1].smu[2].measure.rel.enablev = slot[1].smu[2].ENABLE  Enables relative voltage measurements for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.rel.levelY  "},{"id":57,"title":"slot[Z].smu[X].measure.rel.levelY","url":"104134.htm","text":"This attribute specifies the offset value for relative measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  relValue = slot[Z].smu[X].measure.rel.levelY  slot[Z].smu[X].measure.rel.levelY = relValue  relValue  Relative measurement offset value  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance: r  Power: p  Details  This attribute specifies the offset value used for relative measurements. When relative measurements are enabled (slot[Z].smu[X].measure.rel.enableY), all subsequent measured readings will be offset by the value of this attribute.  Each returned measured relative reading is the result of the following calculation:   Relative reading = Actual measured reading − Relative offset value  Example  slot[1].smu[2].measure.rel.levelv = slot[1].smu[2].measure.v()  Makes a voltage measurement using channel 2 of the module installed in slot 1 and then uses the reading as the relative offset value.  Also see  slot[Z].smu[X].measure.rel.enableY  "},{"id":58,"title":"slot[Z].smu[X].measure.tempcomp","url":"116173.htm","text":"This attribute turns temperature compensation on or off for the current measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  smu[X].ENABLE  Usage  tempcomp = slot[Z].smu[X].measure.tempcomp  slot[Z].smu[X].measure.tempcomp = tempcomp  tempcomp  Temperature compensation control setting:  Disable temperature compensation: smu[X].DISABLE  Enable temperature compensation: smu[X].ENABLE&nbsp;  Z  Module slot number  X  Module channel number  Details  This attribute enables or disables temperature compensation for current measurements. It does not affect voltage measurements. Enabling temperature compensation reduces the measure rate for current measurements because the analog-to-digital converter performs an additional temperature measurement.  @This setting must be disabled when taking measurements for current calibration.  Example  slot[1].smu[2].measure.tempcomp = slot[1].smu[2].ENABLE  Enables temperature compensation for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":59,"title":"slot[Z].smu[X].measure.Y()","url":"104135.htm","text":"This function makes one or more measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  reading = slot[Z].smu[X].measure.Y()  reading = slot[Z].smu[X].measure.Y(readingBuffer)  iReading, vReading = slot[Z].smu[X].measure.iv()  iReading, vReading = slot[Z].smu[X].measure.iv(iReadingBuff, vReadingBuff)  reading  The measurement value  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance: r  Power: p  readingBuffer  A reading buffer object where the readings will be stored  Details  When the measurement function is current and calibration is unlocked, this command also returns a compensation value as a second value. This compensation value is then used for the slot[Z].smu[X].measure.calibratei() and slot[Z].smu[X].measure.calibratetc() commands.  Example  voltageValue = slot[1].smu[2].measure.v()  Measures the voltage on channel 2 of the module installed in slot 1 and stores it in the voltagevalue variable.  Also see  slot[Z].smu[X].measure.rel.enableY  "},{"id":60,"title":"slot[Z].smu[X].overlapped","url":"109258.htm","text":"This attribute contains the state of the overlapped mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  slot[Z].smu.DISABLE or 0  Usage  overlappedMode = slot[Z].smu[X].overlapped  slot[Z].smu[X].overlapped = overlappedMode  overlappedMode  Set the overlap mode:  Disable: slot[Z].smu.DISABLE or 0  Enable: slot[Z].smu.ENABLE or 1  Z  Module slot number  X  Module channel number  Details  This attribute configures the state of the overlapped mode.  When this attribute is set to DISABLE, SMU operations proceed as normal. A command is processed before executing the next command.  When this attribute is set to ENABLE, a command returns as soon as it is able, even if it has not been reflected in the hardware. The command for setting the source voltage level for example, returns to Lua so it can process the next command, even if the SMU is not yet sourcing at that voltage level. This only applies to commands that specify settings. A command that retrieves a setting or a measure command waits for commands to complete before executing.  This attribute is useful when performing operations on multiple channels. Changing the voltage level on channel 1 and channel 2 with this setting enabled should result in those changes occurring with less time between than if this setting was disabled.  Example  slot[1].smu[2].overlapped = slot[1].smu.ENABLE  Enables overlapped mode for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":61,"title":"slot[Z].smu[X].reset()","url":"104137.htm","text":"This function turns off the output and resets the commands that begin with smu [X]. to their default settings.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].reset()  Z  Module slot number  X  Module channel number  Details  This function turns off the output and returns the specified SMU to its default settings.  Example  slot[1].smu[1].reset()  Turns off the output and resets channel 1 of the module installed in slot 1 to its default settings.  Also see  None  "},{"id":62,"title":"slot[Z].smu[X].sense","url":"111051.htm","text":"This attribute contains the state of the sense mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset  ***  ***  SENSE_LOCAL (2-wire)  Usage  senseMode = slot[Z].smu[X].sense  slot[Z].smu[X].sense = senseMode  senseMode  The sense setting:  slot[Z].smu[X].SENSE_LOCAL or slot[Z]smu[X].SENSE_2WIRE  slot[Z].smu[X].SENSE_REMOTE or slot[Z].smu[X].SENSE_4WIRE  slot[Z].smu[X].SENSE_AUTO  slot[Z].smu[X].SENSE_CALA  Z  Module slot number  X  Module channel number  Details  Source-measure operations are performed using either 2-wire local sense connections or 4-wire remote sense connections. Writing to this attribute selects the sense mode. The sense mode can be changed between local and remote while the output is on.  When local sense or 2-wire sense is selected, sensing is configured for local sense operation. When remote or  4-wire sense is selected, sensing is configured for remote sense operation and the autosense circuit is disabled.  When auto is selected, 4-wire remote sensing is configured and the autosense circuit is enabled. When autosense is enabled, the 4-wire is monitored co in case the sense leads become disconnected.  The slot[Z].smu[X].SENSE_CALA mode is only used for calibration. You must enable calibration before selecting the calibration sense setting. The output must be off when this option is selected.  Example  slot[1].smu[1].sense = slot[1].smu[1].SENSE_REMOTE  Configures the sense mode to remote sense operation for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":63,"title":"slot[Z].smu[X].source.atlimit","url":"104144.htm","text":"This attribute indicates the state of source compliance.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  Yes  Usage  value = slot[Z].smu[X].source.atlimit  value  The state of source compliance:  Indicates that the limit function is in control of the source (source is in compliance): True  Indicates that the source function is in control of the output<br>(source is not in compliance): False  Z  Module slot number  X  Module channel number  Details  Reading this attribute updates the status model with generated compliance information. ***See Current Limit (ILMT) in the status model diagram for the Measurement event registers. The Voltage Limit (VLMT) is not shown in the status model diagram for the Measurement event registers but is similar to the Current Limit (ILMT).  Example  atlimit = slot[1].smu[2].source.atlimit  print(atlimit)  Reads and prints the source compliance state for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].source.levelY  "},{"id":64,"title":"slot[Z].smu[X].source.autodelay","url":"111033.htm","text":"This attribute enables or disables the automatic delay that occurs when the source is changed.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  ***  ***  OFF  Usage  state = slot[Z].smu[X].source.autodelay  slot[Z].smu[X].source.autodelay = state  state  Disable the source auto delay: slot[Z].smu[X].OFF  Enable the source auto delay: slot[Z].smu[X].ON  Z  Module slot number  X  Module channel number  Details  When autodelay is turned on, the delay that is set depends on the range. Range-dependent delays are based on the output settling time values in the specifications for the instrument. Delays are only applied when the source output is on.  If you set a source delay when source autodelay is enabled, the autodelay is turned off.  Example  slot[1].smu[1].source.autodelay = slot[1].smu[1].ON  Adds a range-dependent delay after each source action while the source is turned on for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].source.delay  "},{"id":65,"title":"slot[Z].smu[X].source.autorangeY","url":"111049.htm","text":"This attribute contains the state of the source autorange control (on or off).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  ***  ***  smu.ON (1)  Usage  sourceAutorange = slot[Z].smu[X].source.autorangeY  slot[Z].smu[X].source.autorangeY = sourceAutorange  sourceAutorange  slot[Z].smu.OFF or 0  slot[Z].smu.ON or 1  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This attribute sets the source autorange state.  If voltage autoranging is enabled, attempting to change the voltage level while overlapped measurements are in progress results in an error being generated and the setting is not be applied. If current autoranging is enabled, attempting to change the current level while overlapped measurements are in progress causes an error to be generated and the setting is not applied.  Example  slot[1].smu[2].source.autorangev = slot[1].smu.OFF  Disables autoranging for channel 2 of the module installed in slot 1. The source range is fixed.  Also see  slot[Z].smu[X].source.levelY  slot[Z].smu[X].source.lowrangeY  slot[Z].smu[X].measure.overlapped  "},{"id":66,"title":"slot[Z].smu[X].source.constantcurrent","url":"116314.htm","text":"This attribute indicates when the source is within the current limit.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Usage  value = slot[Z].smu[X].source.constantcurrent  value  The state of source compliance:  True :  Indicates that the power supply is in constant current state  False:  Indicates that the power supply is in constant voltage state  Z  Module slot number  X  Module channel number  Details  This setting indicates the state of source compliance.  Example  print(slot[1].smu[2].source.constantcurrent)  Returns whether the source connected to channel 2 of the module installed in slot 1 is within the current limit.  Also see  None  "},{"id":67,"title":"slot[Z].smu[X].source.delay","url":"111034.htm","text":"This attribute contains the delay that occurs when the source is changed.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  ***  ***  0.0  Usage  sDelay = slot[Z].smu[X].source.delay  slot[Z].smu[X].source.delay = sDelay  sDelay  The length of the delay in seconds  Z  Module slot number  X  Module channel number  Details  This attribute allows for additional delay (settling time) after an output step. Set sDelay to a user-defined value (in seconds). If you set a specific source delay, source autodelay is turned off. Delays are only applied when the source output is on.  When the source autodelay is turned on, the manual source delay setting is overwritten.  Example  slot[1].smu[1].source.delay = 3e-3  Sets a 3 ms delay after each source action while the source is turned on for channel 1 of the module installed in slot&nbsp;1.  Also see  slot[Z].smu[X].source.autodelay  "},{"id":68,"title":"slot[Z].smu[X].source.func","url":"104146.htm","text":"This attribute configures the source function as either voltage source or current source.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  FUNC_DCVOLTS  Usage  sFunction = slot[Z].smu[X].source.func  slot[Z].smu[X].source.func = sFunction  sFunction  Set the source function:  Current: slot[Z].smu.FUNC_DC_CURRENT  Voltage: slot[Z].smu.FUNC_DC_VOLTAGE  Z  Module slot number  X  Module channel number  Details  This setting configures the source function as either voltage or current.  This command accepts the following options to ease 26xx migration of existing scripts. Setting source function with one of these options configures the source for the correct function. However, the return value will be one of the options noted for value under usage above.  Acceptable parameters for backwards compatibility with 26xx:  slot[Z].smu.FUNC_DCAMPS for current  slot[Z].smu.FUNC_DCVOLTS for voltage  Example  slot[1].smu[2].source.func = slot[1].smu.FUNC_DC_CURRENT  Configures the source as DC current for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":69,"title":"slot[Z].smu[X].source.levelY","url":"104147.htm","text":"This attribute configures the source level setting.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  0.0 V / 0.0 A  Usage  sourceLevel = slot[Z].smu[X].source.levelY  slot[Z].smu[X].source.levelY = sourceLevel  sourceLevel  Voltage: 0 V to ± 48 V  Current: 0 A to ± 250e-3 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance: r  Power: p  Details  This attribute configures the output level of the voltage or current source.  Example  slot[1].smu[2].source.levelv = 3.5  Sets the voltage source level of channel 2 of the SMU module installed in slot 1 to 3.5 V.  Also see  slot[Z].smu[X].source.atlimit  slot[Z].smu[X].source.func  slot[Z].smu[X].source.output  "},{"id":70,"title":"slot[Z].smu[X].source.limitnY","url":"110849.htm","text":"This attribute configures the negative source limit.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Never  Nonvolatile memory  Voltage: −1e−1 V<br>Current: −-2e1 A  Usage  value = slot[Z].smu[X].source.limitnY  slot[Z].smu[X].source.limitnY = value  value  Voltage: 0 V to &#8211;60 V  Current: 0 A to &#8211;1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This setting configures the negative source limit setting. The value must be negative.  Example  slot[1].smu[2].source.limitnv = &#8211;2  Sets the negative voltage limit to -2 V for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].source.limitpY  slot[Z].smu[X].source.limitY  "},{"id":71,"title":"slot[Z].smu[X].source.limitpY","url":"110848.htm","text":"This attribute configures the positive source limit.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  ***  ***  Voltage: 2.0000 e+1 V<br>Current: 1e−1 A  Usage  value = slot[Z].smu[X].source.limitpY  slot[Z].smu[X].source.limitpY = value  value  Voltage: *** to &#8211;60 V  Current: *** to &#8211;1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This setting configures the positive source limit.  Example  slot[1].smu[2].source.limitpv = 2  Sets the positive voltage limit to 2 V for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].source.limitnY  slot[Z].smu[X].source.limitY  "},{"id":72,"title":"slot[Z].smu[X].source.limitY","url":"110847.htm","text":"This attribute symmetrically configures both the positive and the negative source limit settings.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  ***  ***  2.0000 e+1 V / 1e-1 A  Usage  value = slot[Z].smu[X].source.limitY  slot[Z].smu[X].source.limitY = value  value  Voltage: 0 V to 60 V  Current: 0 A to 1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This setting symmetrically configures both the positive and negative source limit settings.  Example  slot[1].smu[2].source.limiti = 35e-3  Sets the positive current limit to 35 mA and the negative current limit to -35 mA for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].source.limitnY  slot[Z].smu[X].source.limitpY  "},{"id":73,"title":"slot[Z].smu[X].source.lowrangeY","url":"111050.htm","text":"This attribute sets the lowest source range that will be used during autoranging.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  ***  ***  200e-3 V / 100e-9 A  Usage  sourceRangeLow = slot[Z].smu[X].source.lowrangeY  slot[Z].smu[X].source.lowrangeY = sourceRangeLow  sourceRangeLow  Voltage: 0 V to 60 V  Current: 0 A to 1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This attribute is used with source autoranging to put a lower limit on the selected range. Lower ranges generally require greater settling times. By setting a low-range value, sourcing small values may  be able to be made with less settling time. If the instrument is set to autorange and it is on a range lower than the one specified by sourceRangeLow, the source range will be changed to the range specified by sourceRangeLow.  Example  slot[1].smu[1].source.lowrangei = 1e-6  Sets the current source low range attribute to 1 uA. This prevents the source from using lower ranges when sourcing current.  Also see  slot[Z].smu[X].source.autorangeY  "},{"id":74,"title":"slot[Z].smu[X].source.offfunc","url":"111450.htm","text":"This attribute sets the source function used (source 0 A or 0 V) when the output is turned off and the source-measure-unit (SMU) is in normal output-off mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  SMU reset  FUNC_DC_VOLTAGE  Usage  offfunc = slot[Z].smu[X].source.offfunc  slot[Z].smu[X].source.offfunc = offfunc  offfunc  Source function:  Current: slot[Z].smu[X].FUNC_DC_CURRENT  Voltage: slot[Z].smu[X].FUNC_DC_VOLTAGE  Z  Module slot number  X  Module channel number  Details  This attribute controls the source function used when the output is turned off and slot[Z].smu[X].source.offmode is set to slot[X].smu[Y].OFFMODE_NORMAL. Set this attribute to slot[Z].smu[X].FUNC_DC_VOLTAGE for the source to be a 0 V source when the output is off (slot[Z].smu[X].offlimiti is used). Set it to slot[Z].smu.FUNC_DC_CURRENT for the source to be a 0 A source when the output is off (slot[Z].smu[X].offlimitv is used).  This attribute is only used when the slot[Z].smu[X].source.offmode attribute is set to slot[Z].smu[X].OFFMODE_NORMAL.  Example  slot[1].smu[1].source.offfunc = slot[1].smu[1].FUNC_DC_CURRENT  Sets the normal output-off mode to source 0 A when the output is turned off for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].source.offmode  slot[Z].smu[X].source.output  "},{"id":75,"title":"slot[Z].smu[X].source.offlimitnY","url":"111454.htm","text":"This attribute configures the negative source off limit setting.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Voltage: −200e−3 V<br>Current: −1e-6 A  Usage  value = slot[Z].smu[X].source.offlimitnY  slot[Z].smu[X].source.offlimitnY = value  value  Voltage: 0 V to −60 V  Current: 0 A to −1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This setting configures the negative source off limit setting. The off limit value must be negative.  Example  slot[1].smu[1].source.offlimitny = -2  Sets the negative voltage off limit to -2 V for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":76,"title":"slot[Z].smu[X].source.offlimitpY","url":"111453.htm","text":"This attribute configures the positive source off limit setting.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Voltage: 200e3 V<br>Current: 1e6 A  Usage  value = slot[Z].smu[X].source.offlimitpY  slot[Z].smu[X].source.offlimitpY = value  value  Voltage: 0 V to 60 V  Current: 0 A to 1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This setting configures the positive source off limit setting.  Example  slot[1].smu[1].source.offlimitpy = 2  Sets the negative voltage off limit to 2 V for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":77,"title":"slot[Z].smu[X].source.offlimitY","url":"111452.htm","text":"This attribute configures both the positive and negative source off limit settings symmetrically.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  Voltage: 200e−3 V<br>Current: 1e−6 A  Usage  value = slot[Z].smu[X].source.offlimitY  slot[Z].smu[X].source.offlimitY = value  value  Voltage: 0 V to 60 V  Current: 0 A to 1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This setting configures both the positive and negative source off limit settings symmetrically.  Example  slot[1].smu[1].source.offlimity = 35e-3  Sets the positive current off limit to 35 mA and the negative current off limit to −35 mA.  Also see  None  "},{"id":78,"title":"slot[Z].smu[X].source.offmode","url":"111451.htm","text":"This attribute sets the source output-off mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  SMU reset  ???  smu.OFFMODE_NORMAL  Usage  sourceOffmode = slot[Z].smu[X].source.offmode  slot[Z].smu[X].source.offmode = sourceOffmode  sourceOffmode  The output&#8209;off mode:  Normal: slot[Z].smu.OFFMODE_NORMAL  High impedance: slot[Z].smu.OFFMODE_HIGH_Z  Z  Module slot number  X  Module channel number  Details  Reading this attribute returns the output-off mode of the source. Setting this attribute configures the SMU output-off mode.  In normal mode, the source function is configured as set by the slot[Z].smu[X].source.offfunc attribute. The slot[Z].smu[X].source.offfunc attribute controls whether the SMU is configured as a 0 V voltage source or a 0 A current source. When the SMU is operating as a 0 A source, the slot[Z].smu[X].source.offlimitv attribute sets the voltage limit, just as the slot[Z].smu[X].source.offlimiti attribute sets the current limit when the SMU is operating as a 0 V voltage source.  When the mode is set to slot[Z].smu[X].OFFMODE_HIGH_Z, the SMU opens the output relay when the output is turned off.  Example  slot[1].smu[1].source.offmode = slot[1].smu[1].OFFMODE_HIGH_Z  Sets the output-off operation to open the output relay when the output is turned off for channel 1 of the module installed in slot 1.  Also see  slot[Z].smu[X].source.offfunc  slot[Z].smu[X].source.output  "},{"id":79,"title":"slot[Z].smu[X].source.output","url":"104154.htm","text":"This attribute enables or disables the source output.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  OFF or 0  Usage  value = slot[Z].smu[X].source.output  slot[Z].smu[X].source.output = value  value  slot[Z].smu.OFF or 0  slot[Z].smu.ON or 1  slot[Z].smu.OUTPUT_HIGH_Z  Z  Module slot number  X  Module channel number  Details  This setting enables or disables the source output.  If you specify the slot[Z].smu.OUTPUT_HIGH_Z for this attribute, the output will turn off and High Z mode will be enabled. This will ignore the slot[Z].smu.source.offmode setting.  Example  slot[1].smu[2].source.output = slot[1].smu.ON  Turns on the output for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].source.offfunc  slot[Z].smu[X].source.offmode  "},{"id":80,"title":"slot[Z].smu[X].source.rangeY","url":"104155.htm","text":"This attribute configures the source range setting to be fixed for function Y.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  OFF  Usage  value = slot[Z].smu[X].source.rangeY  slot[Z].smu[X].source.rangeY = value  value  Voltage ranges: 200 mV, 2 V, 6 V, 20 V, 60 V  Current: 100 nA, 1 µA, 10 µA, 100 µA, 1 mA, 10 mA, 100 mA, 1 A, 1.5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This setting configures the source fixed range setting for the specified source function.  The range setting is dependent on the maximum voltage level setting (see slot[Z].bank[X].maxvoltagelevel). When the maximum voltage level selects the 48 V rail rather than the 12 V range, the maximum voltage range is 48 V and the maximum current range is 100 mA. However, when the maximum voltage level selects the 12 V rail rather than the 48 V rail, the maximum voltage level is 12 V and the maximum  current range is 250 mA.  Example  slot[1].smu[2].source.rangev = 12  Selects the 12 V range for channel 2 of the module installed in slot 1.  Also see  slot[Z].smu[X].measure.rangeY  slot[Z].smu[X].reset()  slot[Z].smu[X].source.autorangeY  "},{"id":81,"title":"slot[Z].smu[X].trigger.measure.Y()","url":"115821.htm","text":"This function configures the reading buffer and measure type for the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].trigger.measure.Y(ReadingBuffer)  slot[Z].smu[X].trigger.measure.iv(ibuffer, vbuffer)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Power: p  Current and voltage: iv  Resistance:  r  ReadingBuffer  Buffer to store the measurement result  ibuffer  Buffer to store current readings  vbuffer  Buffer to store voltage readings  Details  This command configures the reading buffer and measure type for the trigger model. Any measurements made in the trigger model will be stored in this reading buffer according to the specified measurement type.  Example  SmuCh1 = slot[1].smu[1]  --- Configure SMU Ch1 to measure voltage and save the result in the reading buffer.  ReadingBuffer = SmuCh1.makebuffer(10)  SmuCh1.trigger.measure.v(ReadingBuffer)  --- Set the initial voltage output for SMU Ch1 to 2V ---  SmuCh1.source.levelv = 2  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Make the voltage measurement 10 times ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.measure(\"TM1\", \"MeasureVoltage\", 1, 10)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")  -- Now printbuffer the 10 measurements.  printbuffer(1, ReadingBuffer.n, ReadingBuffer)  A reading buffer is configured for voltage measurements and a measure block captures measurements for the module installed in slot 1.  Also see  slot[Z].trigger.model.addblock.measure()  slot[Z].trigger.model.addblock.measureoverlapped()  "},{"id":82,"title":"slot[Z].smu[X].trigger.source.linearY()","url":"115828.htm","text":"This function configures the linear sweep for the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].trigger.source.linearY(StartY, EndY, Points)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  StartY  Start source level  EndY  End source level  Points  Number of points used to calculate the step size  Details  This command sets up a linear sweep by configuring the start source level, end source level, and the number of steps to increase or decrease from the starting source level to the ending source level.  The points parameter does not set the number of steps in a sweep. Instead, it is used to calculate source values within a subsequent sweep. If the subsequent sweep has more points than specified in points, the source restarts at the beginning. This means that if the number of times that the source.action.step block is executed is greater than the number of points in a sweep as configured, the instrument satisfies the block execution count by restarting the sweep values from the beginning.  If the subsequent sweep has fewer points than specified in points, endY is not reached during the sweep. This means that if the block execution count is less than the number of source values configured, the instrument satisfies the block execution count and ignores the remaining source values.  In cases where the first sweep point is a nonzero value, it may be necessary to pre-charge the circuit so that the sweep returns a stable value for the first measured point without penalizing remaining points in the sweep.  When you use a linear staircase sweep, the voltage or current source increases or decreases in fixed steps. Each point is equally-spaced between the start and stop.  Example  SmuCh1 = slot[1].smu[1]  --- Set the linear sweep starting at 0 V rising to 5 V over 6 steps  ---  SmuCh1.trigger.source.linearv(0,5,6)  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Loop 6 times stepping the voltage from 0 V to 5 V for 6 steps in 1 V increments as specified in the smuCh1.trigger.source.linearv specification above. Branch to \"SourceActionStep\" ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.source.action.step(\"TM1\", \"SourceActionStep\", 1, 0)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay5ms\", 0.005)  slot[1].trigger.model.addblock.branch.counter(\"TM1\", \"BranchCounter\", \"SourceActionStep\", 6)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")  This example sets up a linear sweep with source level beginning, end, and number of steps.  Also see  slot[Z].trigger.model.addblock.source.action.bias()  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.action.step()  "},{"id":83,"title":"slot[Z].smu[X].trigger.source.listY()","url":"115829.htm","text":"This function configures the list sweep for the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].trigger.source.listY(SourceLevels)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  SourceLevels  List of source levels. Each time a source block is reached, the index increases by 1. When it reaches the end, it cycles back to the beginning.  For example, ({1, 2, 3})  Details  This command sets up a list sweep by configuring the source type and the source levels list.  In a list staircase sweep, the voltage or current increases by one step when the source block is reached. Once the index reaches the end of the list, it loops back to the beginning.  Example  SmuCh1 = slot[1].smu[1]  --- Set the list sweep starting at 1V and iterate the list ---  slot[Z].smu[X].trigger.source.listY({1,2,3})  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Loop 4 times stepping the voltage from 1 V to 3 V and stepping back to  1V the fourth time. ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.source.action.step(\"TM1\", \"SourceActionStep\", 1, 0)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay5ms\", 0.005)  slot[1].trigger.model.addblock.branch.counter(\"TM1\", \"BranchCounter\", \"SourceActionStep\", 4)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")  This example uses the slot[Z].smu[X].trigger.source.listY() to set the sweep source levels, and the list is iterated. The measurement loop is then initiated and the trigger model is executed.  Also see  slot[Z].trigger.model.addblock.source.action.bias()  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.action.step  "},{"id":84,"title":"slot[Z].smu[X].trigger.source.logY()","url":"115830.htm","text":"This function configures a logarithmic sweep for the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].smu[X].trigger.source.logY(StartY, EndY, Points)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  StartY  Start source level  EndY  End source level  Points  Number of points used to calculate the step size  Details  This command sets up a logarithmic sweep by configuring the start source level, end source level, and the number of steps to increase or decrease from the starting source level to the ending source level.  The points parameter does not set the number of steps in a sweep. Instead, it is used to calculate source values within a subsequent sweep. If the subsequent sweep has more points than specified in points, the source restarts at the beginning. This means that if the number of times the source.action.step block is visited is greater than the number of points in a sweep as configured, the instrument satisfies the block execution count by restarting the sweep values from the beginning.  If the subsequent sweep has fewer points than specified in points, endY is not reached during the sweep. This means that if the block execution count is less than the number of source values configured, the instrument satisfies the block execution count and ignores the remaining source values.  In cases where the first sweep point is a nonzero value, it may be necessary to pre-charge the circuit so that the sweep returns a stable value for the first measured point without penalizing remaining points in the sweep.  A logarithmic staircase sweep is similar to a linear staircase sweep. In a logarithmic sweep, however, the steps are scaled logarithmically.  Example  SmuCh1 = slot[1].smu[1]  --- Set the logarithmic sweep starting at 0V rising to 5V over 6 steps  ---  slot[1].smu[1].trigger.source.logy(0,5,6)  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Loop for 6 times stepping the voltage from 0V to 5V for 6 steps as specified in the SmuCh1.trigger.logy specification above. Branch to \"SourceActionStep\" ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.source.action.step(\"TM1\", \"SourceActionStep\", 1, 0)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay5ms\", 0.005)  slot[1].trigger.model.addblock.branch.counter(\"TM1\", \"BranchCounter\", \"SourceActionStep\", 6)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")  This example sets up a logarithmic sweep with source level beginning, end, and number of steps.  Also see  slot[Z].trigger.model.addblock.source.action.bias()  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.action.step()  "},{"id":85,"title":"slot[Z].status","url":"117357.htm","text":"This attribute contains the registers of the status register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;-  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  137 (all bits set)  Usage  measurementRegister = slot[Z].status.condition  measurementRegister = slot[Z].status.enable  measurementRegister = slot[Z].status.event  measurementRegister = slot[Z].status.ntr  measurementRegister = slot[Z].status.ptr  slot[Z].status.enable = measurementRegister  slot[Z].status.ntr = measurementRegister  slot[Z].status.ptr = measurementRegister   measurementRegister  The status of the slot status summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Z  Module slot number  Details  These attributes are used to read or write to the slot status summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, assume the value 129 is returned for the enable register. The binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 (MSB) and bit B7 (OSB) are set.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  status.MSB  Set bit indicates   Bit B0 decimal value: 1  B1 to B2  Not used  Not applicable.  B3  status.QSB  Set bit indicates   Bit B3 decimal value: 8  B4 to B6  Not used.  Not applicable.  B7  status.OSB  Set bit indicates that  Bit B7 decimal value: 128  B8 to B15  Not used  Not applicable.  As an example, to set bit B0 of the Slot Status Register for slot 1, set slot1.status.enable = status.MSB.  In addition to the above constants, measurementRegister can be set to the decimal equivalent of the bit to set. To set more than one bit of the register, set measurementRegister to the sum of their decimal weights. For example, to set bits B0 and B7, set measurementRegister to 129 (which is the sum of 1 + 128).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example  slot1.status.enable = status.MSB  Sets the MSB bit of the status summary enable register using a constant.  Also see  Measurement event registers  "},{"id":86,"title":"slot[Z].status.measurement","url":"116015.htm","text":"This attribute contains the measurement event register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6,491 (all bits set)  Usage  measurementRegister = slot[Z].status.measurement.condition  measurementRegister = slot[Z].status.measurement.enable  measurementRegister = slot[Z].status.measurement.event  measurementRegister = slot[Z].status.measurement.ntr  measurementRegister = slot[Z].status.measurement.ptr  slot[Z].status.measurement.enable = measurementRegister  slot[Z].status.measurement.ntr = measurementRegister  slot[Z].status.measurement.ptr = measurementRegister  measurementRegister  The status of the measurement event register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Z  Module slot number  Details  These attributes read or write the measurement event registers.  Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.For example, assume value 257 is returned for the enable register. The binary equivalent is 0000&nbsp;0001&nbsp;0000&nbsp;0001. This value indicates that bit B0 (VLMT) and bit B8 (BAV) are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  status.measurement.VLMT  Set bit is a summary of the status.measurement.voltage_limit register.  Bit B0 decimal value: 1  B1  status.measurement.ILMT  Set bit is a summary of the status.measurement.current_limit register.  Bit B1 decimal value: 2  B2 to B6  Not used  Not applicable  B7  status.measurement.ROF  Set bit is a summary of the status.measurement.reading_overflow register.  Bit B7 decimal value: 128  B8  status.measurement.BAV  Set bit is a summary of the status.measurement.buffer_available register.  Bit B8 decimal value: 256  B9 to B10  Not used  Not applicable  B11  status.measurement.INT  Set bit indicates that interlock has been asserted.  Bit B11 decimal value: 2,048  B12  status.measurement.INST  Set bit indicates that a bit in the measurement instrument summary register is set.  Bit B12 decimal value: 4,056  B13 to B15  Not used  Not applicable  As an example, to set bit B8 of the measurement event enable register for slot 1, set slot1.status.measurement.enable = status.measurement.BAV.  In addition to the above constants, measurementRegister can be set to the decimal equivalent of the bit to set. To set more than one bit of the register, set measurementRegister to the sum of their decimal weights. For example, to set bits B1 and B8, set measurementRegister to 258 (which is the sum of 2 + 256).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example  slot1.status.measurement.enable = status.measurement.BAV  Sets the BAV bit of the measurement event enable register.  Also see  Measurement event registers  "},{"id":87,"title":"slot[Z].status.measurement.buffer_available.*","url":"117223.htm","text":"This attribute contains the measurement event buffer available summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6 (all bits set)  Usage  measurementRegister = slot[Z].status.measurement.buffer_available.condition  measurementRegister = slot[Z].status.measurement.buffer_available.enable  measurementRegister = slot[Z].status.measurement.buffer_available.event  measurementRegister = slot[Z].status.measurement.buffer_available.ntr  measurementRegister = slot[Z].status.measurement.buffer_available.ptr  slot[Z].status.measurement.buffer_available.enable = measurementRegister  slot[Z].status.measurement.buffer_available.ntr = measurementRegister  slot[Z].status.measurement.buffer_available.ptr = measurementRegister  measurementRegister  The status of the measurement event register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the measurement event buffer available summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  Not used  B1  status.measurement.buffer_available.SMU1  Set bit indicates that there is at least one reading stored in either or both of the dedicated reading&nbsp;buffers.  Bit B1 decimal value: 2  Binary value: 0000 0010  B2  status.measurement.buffer_available.SMU2  Set bit indicates that there is at least one reading stored in either or both dedicated reading buffers.  Bit B2 decimal value: 4  Binary value: 0000 0100  B3 to B15  Not used  As an example, to set bit B1 of the measurement event buffer available summary enable register, set status.measurement.buffer_available.enable = status.measurement.buffer_available.SMU1.  In addition to the above constants, measurementRegister can be set to the decimal equivalent of the bit to set.  Example 1  slot[1].status.measurement.buffer_available.enable = status.measurement.buffer_available.SMU1  Uses the constant to set the SMU1 bit of the measurement event buffer available summary enable register.  Example 2  slot[1].status.measurement.buffer_available.enable = 2  Uses the decimal value to set the SMU1 bit of the measurement event buffer available summary enable register.  Also see  Measurement event registers  "},{"id":88,"title":"slot[Z].status.measurement.current_limit.*","url":"117321.htm","text":"This attribute contains the measurement event current limit summary registers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6 (all bits set)  Usage  measurementRegister = slot[Z].status.measurement.current_limit.condition  measurementRegister = slot[Z].status.measurement.current_limit.enable  measurementRegister = slot[Z].status.measurement.current_limit.event  measurementRegister = slot[Z].status.measurement.current_limit.ntr  measurementRegister = slot[Z].status.measurement.current_limit.ptr  slot[Z].status.measurement.current_limit.enable = measurementRegister  slot[Z].status.measurement.current_limit.ntr = measurementRegister  slot[Z].status.measurement.current_limit.ptr = measurementRegister  measurementRegister  The status of the measurement event current limit summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit&nbsp;settings  Z  Module slot number  Details  These attributes are used to read or write to the measurement event current limit summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For example, assume value 6 is returned for the enable register. The binary equivalent is 0000&nbsp;0000&nbsp;0000&nbsp;0110. This value indicates that bit B1 (SMUA) and bit B2 (SMUB) are&nbsp;set.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  Not used  Not applicable.  B1  status.measurement.current_limit.SMU1  Set bit indicates that the SMU 1 current limit was exceeded.  Bit B1 decimal value: 2  Binary value: 0000 0010  B2  status.measurement.current_limit.SMU2  Set bit indicates that the SMU 2 current limit was exceeded.  Bit B2 decimal value: 4  Binary value: 0000 0100  B3 to B15  Not used  Not applicable.  As an example, to set bit B1 of the measurement event current limit summary enable register, set status.measurement.current_limit.enable = status.measurement.current_limit.SMU1.  In addition to the above constants, measurementRegister can be set to the decimal equivalent of the bit to set. To set more than one bit of the register, set measurementRegister to the sum of their decimal weights. For example, to set bits B1 and B2, set measurementRegister to 6 (which is the sum of 2 + 4).  Example  slot[1].status.measurement.current_limit.enable = status.measurement.current_limit.SMU1  Sets the SMU1 bit of the Measurement Event Current Limit Summary Enable Register.  Also see  Measurement event registers  status.measurement.instrument.smuX.*  "},{"id":89,"title":"slot[Z].status.measurement.instrument.*","url":"117334.htm","text":"This attribute contains the registers of the measurement event instrument summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6 (all bits set)  Usage  measurementRegister = slot[Z].status.measurement.instrument.condition  measurementRegister = slot[Z].status.measurement.instrument.enable  measurementRegister = slot[Z].status.measurement.instrument.event  measurementRegister = slot[Z].status.measurement.instrument.ntr  measurementRegister = slot[Z].status.measurement.instrument.ptr  slot[Z].status.measurement.instrument.enable = measurementRegister  slot[Z].status.measurement.instrument.ntr = measurementRegister  slot[Z].status.measurement.instrument.ptr = measurementRegister  measurementRegister  The status of the measurement event instrument summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Z  Module slot number  Details  These attributes are used to read or write to the measurement event instrument summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For example, assume the value 6 is returned for the enable register. The binary equivalent is 0000&nbsp;0000&nbsp;0000&nbsp;0110. This value indicates that bit B1 (SMU1) and bit B2 (SMU2) are set.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.   Bit  Value  Description  B0  Not used  Not applicable.  B1  status.measurement.instrument.SMU1  Set bit indicates one or more enabled bits of the measurement event SMU&nbsp;1 summary register is set.  Bit B1 decimal value: 2  Binary value: 0000 0010  B2  status.measurement.instrument.SMU2  Set bit indicates one or more enabled bits of the measurement event SMU 2 summary register is set.  Bit B2 decimal value: 4  Binary value: 0000 0100  B3 to B15  Not used  Not applicable.  As an example, to set bit B1 of the measurement event instrument summary enable register, set status.measurement.instrument.enable = status.measurement.instrument.SMU1.  In addition to the above constants, measurementRegister can be set to the decimal equivalent of the bit to set. To set more than one bit of the register, set measurementRegister to the sum of their decimal weights. For example, to set bits B1 and B2, set measurementRegister to 6 (which is the sum of 2 + 4).  Example  slot1.status.measurement.instrument.enable = status.measurement.instrument.SMU1  Sets the SMU 1 bit of the measurement event instrument summary enable register for the instrument in slot&nbsp;1 using a constant.  Also see  Measurement event registers  "},{"id":90,"title":"slot[Z].status.measurement.instrument.smuX.*","url":"117330.htm","text":"This attribute contains the registers of the measurement event SMU 1 summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;-  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  387 (all bits set)   Usage  measurementRegister = slot[Z].status.measurement.instrument.smuX.condition  measurementRegister = slot[Z].status.measurement.instrument.smuX.enable  measurementRegister = slot[Z].status.measurement.instrument.smuX.event  measurementRegister = slot[Z].status.measurement.instrument.smuX.ntr  measurementRegister = slot[Z].status.measurement.instrument.smuX.ptr  slot[Z].status.measurement.instrument.smuX.enable = measurementRegister  slot[Z].status.measurement.instrument.smuX.ntr = measurementRegister  slot[Z].status.measurement.instrument.smuX.ptr = measurementRegister   measurementRegister  The status of the instrument measurement status SMU Z summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Z  Module slot number  X  Channel of the SMU: 1 or 2  Details  These attributes are used to read or write to the measurement event SMU summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, assume the value 257 is returned for the enable register. The binary equivalent is 0000&nbsp;0001&nbsp;0000&nbsp;0001. This value indicates that bit B0 (VLMT) and bit B8 (BAV) are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0*  status.measurement.instrument.smuX.VLMT  Set bit indicates that the voltage limit was exceeded.  Bit B0 decimal value: 1  B1*  status.measurement.instrument.smuX.ILMT  Set bit indicates that the current limit was exceeded.  Bit B1 decimal value: 2  B2 to B6  Not used  Not applicable.  B7  status.measurement.instrument.smuX.ROF  Set bit indicates that an overflow reading has been detected.  Bit B7 decimal value: 128  B8  status.measurement.instrument.smuX.BAV  Set bit indicates that there is at least one reading stored in either or both dedicated reading buffers.  Bit B8 decimal value: 256  B9 to B15  Not used  Not applicable.  * This bit is updated only when a measurement is made or smuX.source.compliance is invoked.  As an example, to set bit B0 of the measurement event SMU&nbsp;1 summary enable register, set status.measurement.instrument.smu1.enable = status.measurement.instrument.smu1.VLMT.  In addition to the above constants, measurementRegister can be set to the decimal equivalent of the bit to set. To set more than one bit of the register, set measurementRegister to the sum of their decimal weights. For example, to set bits B1 and B8, set measurementRegister to 258 (which is the sum of 2 + 256).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example  status.measurement.instrument.smu1.enable = status.measurement.instrument.smu1.VLMT  Sets the VLMT bit of the measurement event SMU&nbsp;1 summary enable register using a constant.  Also see  Measurement event registers  "},{"id":91,"title":"slot[Z].status.measurement.reading_overflow.*","url":"117325.htm","text":"This attribute contains the measurement event reading overflow summary register set.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6 (all bits set)  Usage  measurementRegister = slot[Z].status.measurement.reading_overflow.condition  measurementRegister = slot[Z].status.measurement.reading_overflow.enable  measurementRegister = slot[Z].status.measurement.reading_overflow.event  measurementRegister = slot[Z].status.measurement.reading_overflow.ntr  measurementRegister = slot[Z].status.measurement.reading_overflow.ptr  slot[Z].status.measurement.reading_overflow.enable = measurementRegister  slot[Z].status.measurement.reading_overflow.ntr = measurementRegister  slot[Z].status.measurement.reading_overflow.ptr = measurementRegister  measurementRegister  The status of the measurement reading overflow summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Z  Module slot number  Details  These attributes are used to read or write to the measurement event reading overflow summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, assume the value 2 is returned for the enable register. The binary equivalent is 0000&nbsp;0000&nbsp;0000&nbsp;0010. This value indicates that bit B1 (SMUA) is set.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  Not used  Not applicable.  B1  status.measurement.reading_overflow.SMU1  Set bit indicates that an overflow reading has been detected for SMU 1.  Bit B1 decimal value: 2  Binary value: 0000 0010  B2  status.measurement.reading_overflow.SMU2  Set bit indicates that an overflow reading has been detected for SMU 2.  Bit B2 decimal value: 4  Binary value: 0000 0100  B3 to B15  Not used  Not applicable.  As an example, to set bit B1 of the measurement event reading overflow summary enable register, set status.measurement.reading_overflow.enable = status.measurement.reading_overflow.SMU1.  In addition to the above constants, measurementRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set measurementRegister to the sum of their decimal weights. For example, to set bits B1 and B2, set measurementRegister to 6 (which is the sum of 2 + 4).  Example  slot[1].status.measurement.reading_overflow.enable = status.measurement.reading_overflow.SMU1  Sets the SMU 1 bit of the measurement reading overflow summary enable register using a constant.  Also see  Measurement event registers  "},{"id":92,"title":"slot[Z].status.measurement.voltage_limit.*","url":"117323.htm","text":"This attribute contains the measurement event voltage limit summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6 (all bits set)  Usage  measurementRegister = slot[Z].status.measurement.voltage_limit.condition  measurementRegister = slot[Z].status.measurement.voltage_limit.enable  measurementRegister = slot[Z].status.measurement.voltage_limit.event  measurementRegister = slot[Z].status.measurement.voltage_limit.ntr  measurementRegister = slot[Z].status.measurement.voltage_limit.ptr  slot[Z].status.measurement.voltage_limit.enable = measurementRegister  slot[Z].status.measurement.voltage_limit.ntr = measurementRegister  slot[Z].status.measurement.voltage_limit.ptr = measurementRegister  measurementRegister  The status of the measurement voltage limit summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other decimal values indicate bit settings   Z  Module slot number  Details  These attributes read or write to the measurement event voltage limit summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  Not used  Not applicable.  B1  status.measurement.voltage_limit.SMU1  Set bit indicates the enabled VLMT bit for the SMU 1 measurement register is&nbsp;set.  Bit B1 decimal value: 2  Binary value: 0000 0010  B2  status.measurement.voltage_limit.SMU2  Set bit indicates the enabled VLMT bit for the SMU 2 measurement register is&nbsp;set.  Bit B2 decimal value: 4  Binary value: 0000 0100  B3 to B15  Not used  Not applicable.  As an example, to set bit B1 of the measurement event voltage limit summary enable register, set status.measurement.voltage_limit.enable = status.measurement.voltage_limit.SMU1.  In addition to the above constants, measurementRegister can be set to the decimal equivalent of the bit to set. To set more than one bit of the register, set measurementRegister to the sum of their decimal weights. For example, to set bits B1 and B2, set measurementRegister to 6 (which is the sum of 2 + 4).  Example  slot[2].status.measurement.voltage_limit.enable = status.measurement.voltage_limit.SMU2  Sets the SMU2 bit of the measurement event voltage limit summary enable register using a constant.  Also see  Measurement event registers  "},{"id":93,"title":"slot[Z].status.questionable.*","url":"117351.htm","text":"These attributes manage the questionable status register set of the status model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6,400 (all bits set)  Usage  questionableRegister = slot[Z].status.questionable.condition  questionableRegister = slot[Z].status.questionable.enable  questionableRegister = slot[Z].status.questionable.event  questionableRegister = slot[Z].status.questionable.ntr  questionableRegister = slot[Z].status.questionable.ptr  slot[Z].status.questionable.enable = questionableRegister  slot[Z].status.questionable.ntr = questionableRegister  slot[Z].status.questionable.ptr = questionableRegister  questionableRegister  The status of the questionable status register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit&nbsp;settings  Z  Module slot number  Details  These attributes are used to read or write to the questionable status registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.   For example, if a value of 6,144 is read as the value of the condition register, the binary equivalent is 0001 1000 0000 0000. This value indicates that bits B11 and B12 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0 to B7  Not used  Not available  B8  status.questionable.CAL  An enabled bit in the questionable status calibration summary event register is set.  Bit B8 decimal value: 256  B9 to B10  Not used  Not available  B11  status.questionable.OTEMP  An enabled bit in the questionable status over temperature summary event register is set.  Bit B11 decimal value: 2,048  B12  status.questionable.INST  An enabled bit in the questionable status instrument summary event register is set.  Bit B13 decimal value: 4,096  B13 to B15  Not used  Not available  As an example, to set bit B8 of the questionable status enable register for slot 1, set slot1.status.questionable.enable = status.questionable.CAL.  In addition to the above constants, questionableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set questionableRegister to the sum of their decimal weights. For example, to set bits B11 and B12, set questionableRegister to 6,144 (which is the sum of 2,048 + 4,096).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example  slot1.status.questionable.enable = status.questionable.OTEMP  Uses a constant to set the OTEMP bit of the questionable status enable register for slot&nbsp;1.  Also see  Questionable Status Registers  "},{"id":94,"title":"slot[Z].status.questionable.calibration.*","url":"117342.htm","text":"This attribute contains the questionable status calibration summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6 (all bits set)  Usage  questionableRegister = slot[Z].status.questionable.calibration.condition  questionableRegister = slot[Z].status.questionable.calibration.enable  questionableRegister = slot[Z].status.questionable.calibration.event  questionableRegister = slot[Z].status.questionable.calibration.ntr  questionableRegister = slot[Z].status.questionable.calibration.ptr  slot[Z].status.questionable.calibration.enable = questionableRegister  slot[Z].status.questionable.calibration.ntr = questionableRegister  slot[Z].status.questionable.calibration.ptr = questionableRegister  questionableRegister  The status of the questionable status calibration summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Z  Module slot number  Details  These attributes are used to read or write to the questionable status calibration summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  Not used  B1  status.questionable.calibration.SMU1  Set bit indicates that the SMU 1 calibration constants stored in nonvolatile memory were corrupted and could not be loaded when the instrument powered up.  Bit B1 decimal value: 2  Binary value: 0000 0010  B2  status.questionable.calibration.SMU2  Set bit indicates that the SMU 2 calibration constants stored in nonvolatile memory were corrupted and could not be loaded when the instrument powered up.  Bit B2 decimal value: 4  Binary value: 0000 0100  B3 to B15  Not used  As an example, to set bit B1 of the questionable status calibration summary enable register for slot&nbsp;1, set slot1.status.questionable.calibration.enable = status.questionable.calibration.SMU1.  In addition to the above constants, questionableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set questionableRegister to the sum of their decimal weights. For example, to set bits B1 and B2, set questionableRegister to 6 (which is the sum of 2&nbsp;+&nbsp;4).  Example  slot1.status.questionable.calibration.enable = status.questionable.calibration.SMU1  Uses a constant to set the SMU1 bit of the questionable status calibration summary enable register for slot&nbsp;1.  Also see  Questionable Status Registers  status.questionable.*  "},{"id":95,"title":"slot[Z].status.questionable.instrument.*","url":"117348.htm","text":"This attribute contains the questionable status instrument summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6 (all bits set)  Usage  questionableRegister = slot[Z].status.questionable.instrument.condition  questionableRegister = slot[Z].status.questionable.instrument.enable  questionableRegister = slot[Z].status.questionable.instrument.event  questionableRegister = slot[Z].status.questionable.instrument.ntr  questionableRegister = slot[Z].status.questionable.instrument.ptr  slot[Z].status.questionable.instrument.enable = questionableRegister  slot[Z].status.questionable.instrument.ntr = questionableRegister  slot[Z].status.questionable.instrument.ptr = questionableRegister   questionableRegister  The status of the questionable status instrument summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Z  Module slot number  Details  These attributes are used to read or write to the questionable status instrument summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  Not used  Not applicable.  B1  status.questionable.instrument.SMU1  Set bit indicates one or more enabled bits for the SMU 1 questionable register are set.  Bit B1 decimal value: 2  Binary value: 0000 0010  B2  status.questionable.instrument.SMU2  Set bit indicates one or more enabled bits for the SMU&nbsp;2 questionable register are set.  Bit B2 decimal value: 4  Binary value: 0000 0100  B3 to B15  Not used  Not applicable.  As an example, to set bit B1 of the questionable status instrument summary enable register of slot&nbsp;1, set slot1.status.questionable.instrument.enable = status.questionable.instrument.SMU1.  In addition to the above constants, questionableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal weights. For example, to set bits B1 and B2, set questionableRegister to 6 (which is the sum of 2 + 4).  Example  slot1.status.questionable.instrument.enable = status.questionable.instrument.SMU1  Uses a constant to set the SMU1 bit of the questionable status instrument summary enable register for slot&nbsp;1.  Also see  Questionable Status Registers  status.questionable.*  "},{"id":96,"title":"slot[Z].status.questionable.instrument.smuX.*","url":"117354.htm","text":"This attribute contains the questionable status SMU1 summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  4352 (all bits set)  Usage  questionableRegister = slot[Z].status.questionable.instrument.smuX.condition  questionableRegister = slot[Z].status.questionable.instrument.smuX.enable  questionableRegister = slot[Z].status.questionable.instrument.smuX.event  questionableRegister = slot[Z].status.questionable.instrument.smuX.ntr  questionableRegister = slot[Z].status.questionable.instrument.smuX.ptr  slot[Z].status.questionable.instrument.smuX.enable = questionableRegister  slot[Z].status.questionable.instrument.smuX.ntr = questionableRegister  slot[Z].status.questionable.instrument.smuX.ptr = questionableRegister  questionableRegister  The status of the questionable status SMU summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Z  Module slot number  X  Channel of the SMU: 1 or 2  Details  These attributes are used to read or write to the questionable status instrument SMU summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, if a value of 7.68000e+02 (which is 768) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0011&nbsp;0000&nbsp;0000. This value indicates that bit B8 and bit B12 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0 to B7  Not used  Not applicable.  B8  status.questionable.instrument.smu1.CAL  Set bit indicates that the calibration constants stored in nonvolatile memory were corrupted and could not be loaded when the instrument powered up.  Bit B8 decimal value: 256  B9 to B11  Not used  Not applicable  B12  status.questionable.instrument.smu1.OTEMP  Set bit indicates that an over temperature condition was detected.  Bit B12 decimal value: 4,096  B13 to B15  Not used  Not applicable.  As an example, to set bit B8 of the questionable status SMU 1 summary enable register for slot 1, set slot1.status.questionable.instrument.smua.enable = status.questionable.instrument.smu1.CAL.  In addition to the above constants, questionableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set questionableRegister to the sum of their decimal weights. For example, to set bits B8 and B12, set questionableRegister to 4352 (the sum of 256 + 4096).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example  questionableRegister = status.questionable.instrument.smu1.CAL +     status.questionable.instrument.smu1.OTEMP  slot1.status.questionable.instrument.smu1.enable = questionableRegister  Uses constants to set bit B8 and bit B12 of the questionable status SMU 1 summary enable register for slot&nbsp;1.  Also see  Questionable Status Registers  status.operation.*  "},{"id":97,"title":"slot[Z].status.questionable.over_temperature.*","url":"117345.htm","text":"This attribute contains the questionable status overtemperature summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  6 (all bits set)  Usage  questionableRegister = slot[Z].status.questionable.over_temperature.condition  questionableRegister = slot[Z].status.questionable.over_temperature.enable  questionableRegister = slot[Z].status.questionable.over_temperature.event  questionableRegister = slot[Z].status.questionable.over_temperature.ntr  questionableRegister = slot[Z].status.questionable.over_temperature.ptr  slot[Z].status.questionable.over_temperature.enable = questionableRegister  slot[Z].status.questionable.over_temperature.ntr = questionableRegister  slot[Z].status.questionable.over_temperature.ptr = questionableRegister  questionableRegister  The status of the questionable status over temperature summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Z  Module slot number  Details  These attributes are used to read or write to the questionable status over temperature summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  Not used  Not applicable.  B1  status.questionable.over_temperature.SMU1  Set bit indicates that an over temperature condition was detected on SMU 1.  Bit B1 decimal value: 2  Binary value: 0000 0010  B2  status.questionable.over_temperature.SMU2  Set bit indicates that an over temperature condition was detected on SMU&nbsp;2.  Bit B2 decimal value: 4  Binary value: 0000 0100  B3 to B15  Not used  Not applicable.  As an example, to set bit B1 of the questionable status overtemperature summary enable register for slot 1, set slot1.status.questionable.instrument.enable = status.questionable.instrument.SMU1.  In addition to the above constants, questionableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal weights. For example, to set bits B1 and B2, set questionableRegister to 6 (which is the sum of 2 + 4).  Example  slot1.status.questionable.over_temperature.enable = status.questionable.over_temperature.SMU1  Uses a constant to set the SMU 1 bit in the questionable status overtemperature summary enable register for slot&nbsp;1.  Also see  Questionable Status Registers  status.questionable.*  "},{"id":98,"title":"slot[Z].trigger.model.abort()","url":"114956.htm","text":"This function stops trigger model execution on the specified module.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.abort(\"triggerModelName\")  Z  Module slot number  triggerModelName  Name of the trigger model to abort  Details  This function stops the running trigger model on the specified module.  Example  slot[1].trigger.model.abort(\"TM1\")  Stops the TM1 trigger model running in the module located in slot 1.  Also see  slot[Z].trigger.model.initiate()  "},{"id":99,"title":"slot[Z].trigger.model.addblock.branch.always()","url":"114960.htm","text":"This function defines a trigger model block that always branches to a specific block.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.always(\"triggerModelName\", \"blockName\", \"branchToBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  branchToBlockName  Name of the next trigger block to run  Details  When a trigger model reaches a branch-always trigger block, it goes to the block specified by branchToBlockName.  Example  SLOT = 1  slot[SLOT].smu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"branchalways1\")  slot[SLOT].trigger.model.addblock.source.output(\"branchalways1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"branchalways1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"branchalways1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.addblock.delay.constant(\"branchalways1\", \"delay4\", 0.1)  slot[SLOT].trigger.model.addblock.branch.always(\"branchalways1\", \"branchalways5\", \"sourceoutput1\")  slot[SLOT].trigger.model.print(\"branchalways1\")  slot[1].trigger.model.initiate(\"branchalways1\")  -- Please wait some time to let pulses show up on the channel output  slot[1].trigger.model.abort(\"branchalways1\")  In this example, the  trigger model turns on and turns off a 2 V signal with a pulse width of 5 ms. The trigger model runs infinitely on channel 1 of the module installed in slot 3. Note the assignment of the SLOT variable; change according to your configuration.  <br>You can use the slot[Z].trigger.model.abort() command to end the loop.  Also see  slot[Z].trigger.model.abort()  slot[Z].trigger.model.initiate()  slot[Z].trigger.model.addblock.nop()  "},{"id":100,"title":"slot[Z].trigger.model.addblock.branch.counter()","url":"114961.htm","text":"This function defines a trigger model block that branches to a block a specified number of times.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.counter(\"triggerModelName\", \"blockName\", \"branchToBlockName\", targetCount)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  branchToBlockName  Name of the next block to run  targetCount  Number of times to repeat the branch  Details  This command defines a trigger model block that branches to another block a specified number of times.  The counter resets to 0 when the trigger model starts, and it it is incremented each time the trigger model reaches the counter block. After incrementing the counter, if the counter is less than or equal to targetCount, the trigger model will go to the branchToBlockName block. Otherwise it will go to the next block in the sequence.  If you are using remote commands, you can query the counter. The counter is incremented immediately before the branch compares the actual counter value to the set counter value. Therefore, the counter is at 0 until the first comparison. When the trigger model reaches the set counter value, branching stops and the counter value is one greater than the setting.If the branch is not taken, the counter resets to 0.  Example  SLOT = 1  STEPS = 10  ALIAS = slot[SLOT].trigger  slot[SLOT].smu[1].trigger.source.linearv(0,5,STEPS)   ALIAS.model.create(\"branchcounter1\")  ALIAS.model.addblock.source.output(\"branchcounter1\", \"sourceoutput1\", 1, 1)  ALIAS.model.addblock.delay.constant(\"branchcounter1\", \"delay2\", 0.1)  ALIAS.model.addblock.source.action(\"branchcounter1\", \"sourceaction3\", 1, 0)  ALIAS.model.addblock.branch.counter(\"branchcounter1\", \"branchcounter4\", \"delay2\", STEPS*4)  slot[SLOT].trigger.model.print(\"branchcounter1\")  slot[SLOT].trigger.model.initiate(\"branchcounter1\")  This example demonstrates a trigger model that uses branch-counter to linear sweep the output of channel1 four times. Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":101,"title":"slot[Z].trigger.model.addblock.branch.event()","url":"114966.htm","text":"This function causes the trigger model to branch to a specified trigger model block when a specified event occurs.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.event(\"triggerModelName\", \"blockName\", \"branchToBlockName\", eventId)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  branchToBlockName  Name of the block to branch to on true condition  eventId  The event that must occur before the trigger model branches to the specified block; for example, trigger.EVENT_NOTIFY4  Details  The branch.event block goes to a specified trigger model block after a specified trigger event occurs. If the trigger event has not yet occurred when the trigger model reaches the branch.event block, the trigger model continues to execute the blocks in the normal sequence. After the trigger event occurs, the trigger model proceeds to the specified trigger model block when the branch.event block is encountered.  After an event occurs and the branch.event block executes, the branch is taken and the event detector is cleared. The trigger event must occur again for the trigger model to execute to the block again; otherwise, the blocks are executed in the normal sequence.  If you set the branch event to none, an error is generated when you run the trigger model.  The following table shows the constants for the events.  Event description  Event constant  Notify trigger block N (1 to 16) generates a trigger event when the trigger model executes  trigger.EVENT_NOTIFYN  Example  # Branch Event. #  SLOT = 1  slot[SLOT].smu[1].source.levelv = 5.0  slot[SLOT].trigger.model.delete(\"branchonevent2\")  slot[SLOT].trigger.model.create(\"branchonevent2\")  slot[SLOT].trigger.model.addblock.source.output(\"branchonevent2\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"branchonevent2\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.branch.event(\"branchonevent2\", \"branchonevent3\", \"TheEnd\", slot[SLOT].trigger.model.EVENT_NOTIFY1)  slot[SLOT].trigger.model.addblock.branch.counter(\"branchonevent2\", \"branchcounter4\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.source.output(\"branchonevent2\", \"sourceoutput5\", 1, 0)  slot[SLOT].trigger.model.addblock.notify(\"branchonevent2\", \"notify6\", slot[SLOT].trigger.model.EVENT_NOTIFY1)  slot[SLOT].trigger.model.addblock.branch.counter(\"branchonevent2\", \"branchcounter7\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.source.output(\"branchonevent2\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"branchonevent2\")  slot[SLOT].trigger.model.initiate(\"branchonevent2\")  This example demonstrates a trigger model that uses branch.event to differentiate two loops. The first loop lacks EVENT_NOTIFY1, so its pulse is 300 ms. The second loop occurs after EVENT_NOTIFY1, so its pulse is 100 ms long. The trigger model then stops.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":102,"title":"slot[Z].trigger.model.addblock.branch.once()","url":"114964.htm","text":"This function causes the trigger model to branch to a specified trigger model block the first time it is encountered in the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.once(\"triggerModelName\", \"blockName\", \"branchToBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  branchToBlockName  Name of the block to branch to on the first pass through this block  Details  The branch.once trigger model block branches to a specified block the first time it is encountered by the trigger model. If the block is encountered again, it is ignored, and the trigger model proceeds to the next trigger model block.  The branch.once block is reset when the trigger model execution completes.  The branch.once block is reset as part of the setup for starting execution of the trigger model. When the trigger model execution completes, the internal, hidden, code has the internal counter set to state that the branch.once block has been activated.  Example  SLOT = 1  slot[SLOT].trigger.model.create(\"branchonce1\")  slot[SLOT].trigger.model.addblock.source.output(\"branchonce1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.logevent(\"branchonce1\", \"logevent2\", slot[SLOT].trigger.model.LOG_INFO3, \"logevent2\")  slot[SLOT].trigger.model.addblock.branch.once(\"branchonce1\", \"branchonce3\", \"sourceoutput1\")  slot[SLOT].trigger.model.addblock.logevent(\"branchonce1\", \"logevent4\", slot[SLOT].trigger.model.LOG_INFO2, \"Done.\")  slot[SLOT].trigger.model.print(\"branchonce1\")  slot[SLOT].trigger.model.initiate(\"branchonce1\")  errorqueue.next()  This example demonstrates a trigger model that uses branch.once to branch back one time. Log events will show the behavior.<br>Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].trigger.model.addblock.branch.onceexcluded()  "},{"id":103,"title":"slot[Z].trigger.model.addblock.branch.onceexcluded()","url":"114965.htm","text":"This function causes the trigger model to branch to a specified trigger model block every time it is encountered in the trigger model except for the first time.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.onceexcluded(\"triggerModelName\", \"blockName\", \"branchToBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  branchToBlockName  Name of the block to branch to on the first pass through this block  Details  The branch.onceexcluded block is ignored the first time it is encountered by the trigger model. After the first encounter, the trigger model always branches to the specified block.  The branch.onceexcluded block is reset as part of the setup for starting execution of the trigger model. When the trigger model execution completes, the internal, hidden, code has the internal counter set to state that the branch.onceexcluded block has been activated.  Example  SLOT= 1  slot[SLOT].trigger.model.create(\"branchonceexcluded1\")  slot[SLOT].trigger.model.addblock.source.output(\"branchonceexcluded1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.logevent(\"branchonceexcluded1\", \"logevent2\", slot[SLOT].trigger.model.LOG_INFO3, \"Visiting branch.onceexcluded.\")  slot[SLOT].trigger.model.addblock.delay.constant(\"branchonceexcluded1\", \"delay3\", 1)  slot[SLOT].trigger.model.addblock.branch.onceexcluded(\"branchonceexcluded1\", \"branchonceexcluded4\", \"sourceoutput1\")  slot[SLOT].trigger.model.addblock.logevent(\"branchonceexcluded1\", \"logevent5\", slot[SLOT].trigger.model.LOG_INFO2, \"Return because of branch counter.\")  slot[SLOT].trigger.model.addblock.branch.counter(\"branchonceexcluded1\", \"branchcounter6\", \"sourceoutput1\", 4  slot[SLOT].trigger.model.print(\"branchonceexcluded1\")  slot[SLOT].trigger.model.initiate(\"branchonceexcluded1\")  slot[SLOT].trigger.model.abort(\"branchonceexcluded1\")  This example demonstrates a trigger model that uses branch.onceexcluded to branch back many times, excluding the first visit. Log-events will show the behavior. Please note the need for the call to slot[1].trigger.model.abort().  Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].trigger.model.addblock.branch.once()  "},{"id":104,"title":"slot[Z].trigger.model.addblock.configlist.next()","url":"115499.htm","text":"This function recalls the settings at the next index of a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.configlist.next(\"triggerModelName\", \"blockName\", channel, \"configlistName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  channel  Module channel number  configlistName  A string that defines the configuration list to recall  Details  When trigger model execution reaches a configuration recall next block, the settings at the next index in the specified configuration list are restored.  The first time the trigger model encounters this block for a specific configuration list, the first index is recalled if the list has not already had an index recalled by the recall block command in an earlier trigger-model block. If the configuration list has recalled an index with the recall block, the next index in the list is recalled instead of the first. For example, the recall block recalls index 1 by default, so if the trigger model uses a recall block before this one, the first time the next block is reached after that recall, index 2 is recalled. Each subsequent time this block is encountered, the settings at the next index in the configuration list are recalled and take effect before the next step executes. When the last index in the list is reached, it returns to the first index.  The configuration lists must be defined before you can use this block.  Example  SLOT = 1  -- Create and store a 3 config Config List.  LOOPS = 3 * 2  slot[SLOT].smu[1].source.levelv = 0.0  slot[SLOT].smu[1].configlist.create(\"MyConfigList\")  slot[SLOT].smu[1].source.levelv = 1.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList\")  slot[SLOT].smu[1].source.levelv = 2.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList\")  slot[SLOT].smu[1].source.levelv = 3.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList\")  slot[SLOT].trigger.model.delete(\"configlistnext1\")  slot[SLOT].trigger.model.create(\"configlistnext1\")  slot[SLOT].trigger.model.addblock.source.output(\"configlistnext1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.configlist.recall(\"configlistnext1\", \"configlistrecall2\", 1, \"MyConfigList\", 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"configlistnext1\", \"delay3\", 0.1)  slot[SLOT].trigger.model.addblock.configlist.next(\"configlistnext1\", \"configlistnext4\", 1, \"MyConfigList\")  slot[SLOT].trigger.model.addblock.branch.counter(\"configlistnext1\", \"branchcounter5\", \"delay3\", LOOPS)  slot[SLOT].trigger.model.addblock.source.output(\"configlistnext1\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"configlistnext1\")  slot[SLOT].trigger.model.initiate(\"configlistnext1\")  This example demonstrates a trigger model that uses configlistnext to step the output through 3 states. As the number of loops is 6, there should be 6 output transitions.  Note the assignment of the SLOT variable and change it accordingly.  Also see  Configuration lists   "},{"id":105,"title":"slot[Z].trigger.model.addblock.configlist.prev()","url":"115500.htm","text":"This function defines a trigger-model block that recalls the settings stored at the previous index in a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.configlist.prev(\"triggerModelName\", \"blockName\", channel, \"configlistName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  channel  Module channel number  configlistName  A string that defines the configuration list to recall  Details  The configlist.prev block defines a trigger-model block that recalls the settings stored at the previous index in a configuration list if a single configuration list is specified.  The configuration list previous index trigger block type recalls the previous index in a configuration list. It configures the settings of the instrument based on the settings at that index. The trigger model executes the settings at that index before the next block is executed.  The first time the trigger model encounters this block, the last index in the configuration list is recalled if the list has not already had an index recalled by the recall block command in an earlier trigger-model block. If the configuration list has recalled an index with the recall block, the previous index in the list is called instead of the last. For example, the recall block recalls index 1 by default, so if the trigger model uses a recall block before this one, the first time the previous block is reached after that recall, the last index is recalled. However, if the recall block recalled index 3, the previous block would recall index 2. Each subsequent time trigger model execution reaches a configuration list previous block for this configuration list, it goes backward one index. When the first index in the list is reached, it goes to the last index in the configuration list.  The configuration lists must be defined before you can use this block.  Example  SLOT = 1  -- Create and store a 3 config Config List.  LOOPS = 3 * 2  slot[SLOT].smu[1].source.levelv = 0.0  slot[SLOT].smu[1].configlist.create(\"MyConfigList2\")  -- NOTE:  This will be identical to \"MyConfigList\" in the previous example.  slot[SLOT].smu[1].source.levelv = 1.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList2\")  slot[SLOT].smu[1].source.levelv = 2.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList2\")  slot[SLOT].smu[1].source.levelv = 3.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList2\")  slot[SLOT].trigger.model.delete(\"configlistprev1\")  slot[SLOT].trigger.model.create(\"configlistprev1\")  slot[SLOT].trigger.model.addblock.source.output(\"configlistprev1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.configlist.recall(\"configlistprev1\", \"configlistrecall2\", 1, \"MyConfigList2\", 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"configlistprev1\", \"delay3\", 0.1)  slot[SLOT].trigger.model.addblock.configlist.prev(\"configlistprev1\", \"configlistprev4\", 1, \"MyConfigList2\")  slot[SLOT].trigger.model.addblock.branch.counter(\"configlistprev1\", \"branchcounter5\", \"delay3\", LOOPS)  slot[SLOT].trigger.model.addblock.source.output(\"configlistprev1\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"configlistprev1\")  slot[SLOT].trigger.model.initiate(\"configlistprev1\")  This example demonstrates a trigger model that uses configlist.prev to step the output backwards through three states. As the number of loops is six, there should be six output transitions.  Note the assignment of the SLOT variable and change it accordingly.  Also see  Configuration lists   "},{"id":106,"title":"slot[Z].trigger.model.addblock.configlist.recall()","url":"115501.htm","text":"This function recalls the system settings that are stored in a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.configlist.recall(\"triggerModelName\", \"blockName\", channel, \"configlistName\", index)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  channel  Module channel number  configlistName  A string that defines the configuration list to recall  index  The index in the configuration list to recall; default is 1  Details  When the trigger model reaches a configuration recall block, the settings in the specified configuration list are recalled.  You can restore a specific set of configuration settings in the configuration list by defining the index.  The configuration lists must be defined before you can use this block. If one of the indexes for the configuration list changes, verify that the trigger model count is still accurate.  Example  SLOT = 1  -- Create and store a 3 config Config List.  LOOPS = 3 * 2  slot[SLOT].smu[1].source.levelv = 0.0  slot[SLOT].smu[1].configlist.create(\"MyConfigList3\")  -- NOTE:  This will be identical to \"MyConfigList2\" in the previous example.  slot[SLOT].smu[1].source.levelv = 1.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList3\")  slot[SLOT].smu[1].source.levelv = 2.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList3\")  slot[SLOT].smu[1].source.levelv = 3.0  slot[SLOT].smu[1].configlist.store(\"MyConfigList3\")  slot[SLOT].trigger.model.delete(\"configlistrecall1\")  slot[SLOT].trigger.model.create(\"configlistrecall1\")  slot[SLOT].trigger.model.addblock.source.output(\"configlistrecall1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.configlist.recall(\"configlistrecall1\", \"configlistrecall2\", 1, \"MyConfigList3\", 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"configlistrecall1\", \"delay3\", 0.1)  slot[SLOT].trigger.model.addblock.configlist.next(\"configlistrecall1\", \"configlistprev4\", 1, \"MyConfigList3\")  slot[SLOT].trigger.model.addblock.branch.counter(\"configlistrecall1\", \"branchcounter5\", \"delay3\", LOOPS)  slot[SLOT].trigger.model.addblock.source.output(\"configlistrecall1\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"configlistrecall1\")  slot[SLOT].trigger.model.initiate(\"configlistrecall1\")  This example demonstrates a trigger model that uses configlistrecall to start the stepping of the output through 3 states. As the number of loops loops is 6, there should be 6 output transitions.  Note the assignment of the SLOT variable and change it accordingly.  Also see  Configuration lists   "},{"id":107,"title":"slot[Z].trigger.model.addblock.delay.constant()","url":"114967.htm","text":"This function adds a constant delay to the execution of a trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.delay.constant(\"triggerModelName\", \"blockName\", delayTime)  slot[Z].trigger.model.addblock.delay.constant(\"triggerModelName\", \"blockName\", delayTime, \"referenceBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block where execution will proceed when the evaluation result is true  delayTime  Time delay as a positive value, from 1 μs to 1,000,000 s.  referenceBlockName  Name of a block having the time of its last trigger model visit being used as the start time of the delay.  Details  When the trigger model reaches a delay constant block it will pause for the specified time. If a reference block is specified, the trigger model will pause for the time delay since the start of the reference block.  Up to 32 different blocks can be used as reference blocks within a trigger model.  If a reference block was not visited before this block, the entry time of the trigger model will be used instead.  Example  SLOT = 1  slot[SLOT].smu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"delayconstant1\")  slot[SLOT].trigger.model.addblock.source.output(\"delayconstant1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"delayconstant1\", \"delay2\", 0.01)  slot[SLOT].trigger.model.addblock.source.output(\"delayconstant1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.addblock.delay.constant(\"delayconstant1\", \"delay4\", 0.01)  slot[SLOT].trigger.model.addblock.source.output(\"delayconstant1\", \"sourceoutput5\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"delayconstant1\", \"delay6\", 0.05, \"delay2\")    -- NOTE:  This pulse high will NOT be 50 milliseconds, because of the reference to \"delay2\".  slot[SLOT].trigger.model.addblock.source.output(\"delayconstant1\", \"sourceoutput7\", 1, 0)  slot[SLOT].trigger.model.print(\"delayconstant1\")  slot[SLOT].trigger.model.initiate(\"delayconstant1\")  This example demonstrates a trigger model that uses delay.constant to define a pair of 1.0 volt pulses. The first pulse is 10 ms wide. The second pulse is 30 ms wide because the use of a reference block in the delay.constant will overlap some timing with the first pulse. The second pulse is accurately timed from a specific, much earlier, block.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":108,"title":"slot[Z].trigger.model.addblock.logevent()","url":"115503.htm","text":"This function allows you to log an event in the event log when the trigger model is running.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.logevent(\"triggerModelName\", \"blockName\", eventNumber, \"message\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  eventNumber  The event number:  trigger.LOG_INFON  trigger.LOG_WARNN  trigger.LOG_ERRORN  Where N is 1 to 4; you can define up to four of each type  You can also set trigger.LOG_WARN_ABORT, which aborts the trigger model immediately and posts a warning event log message  message  A string up to 31 characters  Details  This block allows you to log an event in the event log when trigger model execution reaches this block. You can also force the trigger model to abort with this block. When the trigger model executes the block, the defined event is logged. If the abort option is selected, the trigger model is also aborted immediately.  You can define the type of event (information, warning, abort model, or error). All events generated by this block are logged in the event log. Warning and error events are also displayed in a popup on the front&#8209;panel display.  Note that using this block too often in a trigger model could overflow the event log. It may also take away from the time needed to process more critical trigger model blocks.  Example  SLOT = 1  slot[SLOT].trigger.model.create(\"logevent1\")  slot[SLOT].trigger.model.addblock.source.output(\"logevent1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.logevent(\"logevent1\", \"logevent2\", slot[SLOT].trigger.model.LOG_INFO3, \"ran logevent2 block\")  slot[SLOT].trigger.model.addblock.branch.counter(\"logevent1\", \"branchcounter3\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.logevent(\"logevent1\", \"logevent4\", slot[SLOT].trigger.model.LOG_INFO2, \"Done.\")  slot[SLOT].trigger.model.print(\"logevent1\")  slot[SLOT].trigger.model.initiate(\"logevent1\")  errorqueue.next()  This example demonstrates a trigger model that uses log events to show behavior. The 'ran logeven2 block' should report 3 times and then 'Done'. reported once.   Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":109,"title":"slot[Z].trigger.model.addblock.measure()","url":"114968.htm","text":"This function defines a trigger block that makes a measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.measure(\"triggerModelName\", \"blockName\", channel)  slot[Z].trigger.model.addblock.measure(\"triggerModelName\", \"blockName\", channel, count)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  channel  Channel list, specified in a table. For example, <br>{channel1[[, channel2]...]}  count  Number of measurements to make when this block is executed  Details  This block triggers measurements based on the measure function that is selected when the trigger model is initiated. When trigger model execution reaches this block:  The instrument begins making measurements  The trigger execution waits for the measurement to be made  If more than one channel is specified, the measure count for each channel must be the same unless a count value is also specified.  If count is specified, this will override the measure count configured for the channels with slot[Z].smu[X].measure.count().  Example  # Measure. #  SLOT = 1  MEASURES = 2 ; PHASES = 2  rb1 = slot[SLOT].smu[1].makebuffer(MEASURES * PHASES)  slot[SLOT].smu[1].trigger.measure.v(rb1)  slot[SLOT].smu[1].source.levelv = 2.0  slot[SLOT].trigger.model.create(\"measure1\")  slot[SLOT].trigger.model.addblock.source.output(\"measure1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.measure(\"measure1\", \"measure2\", 1, MEASURES)  -- Phase 1  slot[SLOT].trigger.model.addblock.source.output(\"measure1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.addblock.measure(\"measure1\", \"measure4\", 1, MEASURES)  -- Phase 2  slot[SLOT].trigger.model.print(\"measure1\")  slot[SLOT].trigger.model.initiate(\"measure1\")  printbuffer(1, rb1.n, rb1) ; rb1.clear()  This example demonstrates a trigger model that uses measure block to collect measurements. The first pair of measurements should be near 2.0 V and the second pair of measurements should be near 0.0 V. <br>Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":110,"title":"slot[Z].trigger.model.addblock.measureoverlapped()","url":"114969.htm","text":"This function defines a trigger-model block that makes a measurement in an overlapped mode which allows you to measure the response of the device under test while the source is being stepped.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.measureoverlapped(\"triggerModelName\", \"blockName\", channel)  slot[Z].trigger.model.addblock.measureoverlapped(\"triggerModelName\", \"blockName\", channel, count)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  channel  Module channel number to measure  count  Number of measurements to make when this block starts  Details  This block triggers measurements based on the measure function that is selected when the trigger model is initiated. When trigger model execution reaches this block:  Begins triggering measurements  The instrument processes the reading and places it into the specified reading buffer. If you are defining a reading buffer, you must create it before you define this block  If there is one measureoverlapped for a channel, there may be no other measure or measureoverlapped blocks for that channel except those that stop an infinite count.  Example  SLOT = 1  COUNT = 10  rb3 = slot[SLOT].smu[1].makebuffer(COUNT)  slot[SLOT].smu[1].trigger.measure.v(rb3)  slot[SLOT].smu[1].source.output = 0  slot[SLOT].smu[1].source.levelv = 5  slot[SLOT].trigger.model.create(\"measureoverlapped1\")  slot[SLOT].trigger.model.addblock.measureoverlapped(\"measureoverlapped1\", \"measureoverlapped1\", 1, COUNT)  slot[SLOT].trigger.model.addblock.delay.constant(\"measureoverlapped1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"measureoverlapped1\", \"source-output3\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"measureoverlapped1\", \"delay4\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"measureoverlapped1\", \"source-output5\", 1, 0)  slot[SLOT].trigger.model.print(\"measureoverlapped1\")  rb3.clear() ; slot[SLOT].trigger.model.initiate(\"measureoverlapped1\") ; print(\"DONE\") ;  print(\"\\nvoltages:\") ; printbuffer(1, rb3.n, rb3) ; print(\"timestamps:\") ; printbuffer(1, rb3.n, rb3.timestamps)  Demonstrates a trigger model that uses measure overlapped block to collect measurements asynchronously. The overlapped measurements are started at block 'measureoverlapped1' and recur while the trigger model continues running. printbuffers() will print the 10 overlapped measurements showing a 5 V pulse rise and fall over 1e-1 seconds.   Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":111,"title":"slot[Z].trigger.model.addblock.nop()","url":"114970.htm","text":"This function creates a placeholder block that performs no action in the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.nop(\"triggerModelName\", \"blockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  Details  This trigger block creates a placeholder that performs no action in the trigger model.  You can use this command to create:  A named block from which a trigger model will branch forward or backward  A named block to use as a placeholder if you remove a trigger model block, so that you do not need to renumber the other blocks  Example  SLOT = 1  slot[SLOT].smu[1].source.levelv = 3  slot[SLOT].trigger.model.create(\"nop1\")  slot[SLOT].trigger.model.addblock.source.output(\"nop1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.nop(\"nop1\", \"nop2\")  slot[SLOT].trigger.model.addblock.delay.constant(\"nop1\", \"delay3\", 0.1, \"nop2\")  -- Reference delayed from block 'nop2'.  slot[SLOT].trigger.model.addblock.branch.once(\"nop1\", \"branchonce4\", \"nop2\")  -- Branch back to block 'nop2'.  slot[SLOT].trigger.model.addblock.source.output(\"nop1\", \"sourceoutput5\", 1, 0)  slot[SLOT].trigger.model.print(\"nop1\")  slot[SLOT].trigger.model.initiate(\"nop1\")  This example demonstrates a trigger model that uses a nop block for a delay timing reference and for a branch target.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":112,"title":"slot[Z].trigger.model.addblock.notify()","url":"114971.htm","text":"This function defines a trigger model block that generates a trigger event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.notify(\"triggerModelName\", \"blockName\", eventId)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  eventId  slot[Z].trigger.EVENT_NOTIFYN, where N is the number of the notify event  Details  When trigger model execution reaches a notify block, the instrument generates a trigger event and immediately continues to the next block.  Other commands can reference the event that the notify block generates. For example, you can use the notify event as the stimulus of a hardware trigger line or the gating event for another trigger wait block to continue execution after waiting on the specific event generated by this notification.  Example  # Notify. #  SLOT = 1  slot[SLOT].smu[1].source.levelv = 5.0  slot[SLOT].trigger.model.delete(\"notify1\")  slot[SLOT].trigger.model.create(\"notify1\")  slot[SLOT].trigger.model.addblock.source.output(\"notify1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"notify1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.branch.event(\"notify1\", \"branchonevent3\", \"TheEnd\", slot[SLOT].trigger.model.EVENT_NOTIFY1)  slot[SLOT].trigger.model.addblock.branch.counter(\"notify1\", \"branchcounter4\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.source.output(\"notify1\", \"sourceoutput5\", 1, 0)  slot[SLOT].trigger.model.addblock.notify(\"notify1\", \"notify6\", slot[SLOT].trigger.model.EVENT_NOTIFY1)  slot[SLOT].trigger.model.addblock.branch.counter(\"notify1\", \"branchcounter7\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.source.output(\"notify1\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"notify1\")  slot[SLOT].trigger.model.initiate(\"notify1\")  This example demonstrates a trigger model that uses notify to differentiate 2 loops. The first loop lacks the EVENT_NOTIFY1, so its pulse is 300 ms. The second loop occurs after EVENT_NOTIFY1, so its pulse is 100&nbsp;ms long and the trigger model stops.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":113,"title":"slot[Z].trigger.model.addblock.reset.branch.counter()","url":"114972.htm","text":"This function defines a trigger model block that resets the count for a branch counter block.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.reset.branch.counter()(\"triggerModelName\", \"blockName\", \"resetBranchCountBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  resetBranchCountBlockName  Name of the branch counter block to reset the count value to 0  Details  This command defines a trigger model building block that resets the count of the branch counter block specified by resetBranchCountBlockName.  Example  SLOT = 1  slot[SLOT].smu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"resetcount1\")  slot[SLOT].trigger.model.addblock.source.output(\"resetcount1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"resetcount1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"resetcount1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.addblock.delay.constant(\"resetcount1\", \"delay4\", 0.1)  slot[SLOT].trigger.model.addblock.branch.counter(\"resetcount1\", \"branchcounter5\", \"sourceoutput1\", 2)  slot[SLOT].trigger.model.addblock.reset.branch.counter(\"resetcount1\", \"resetcount6\", \"branchcounter5\")  slot[SLOT].trigger.model.addblock.branch.counter(\"resetcount1\", \"branchcounter7\", \"sourceoutput1\", 2)  slot[SLOT].trigger.model.print(\"resetcount1\")  slot[SLOT].trigger.model.initiate(\"resetcount1\")  This example demonstrates a trigger model that uses reset-branch-counter to pulse 4 times the output of channel&nbsp;1 because of the resetting and nested branch-counters. Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z]/trigger.model.addblock.branch.counter()  "},{"id":114,"title":"slot[Z].trigger.model.addblock.source.action.bias()","url":"115504.htm","text":"This function changes the source output level to the present level of the sweep configuration, then advances to the next step in the sweep configuration.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.source.action.bias(\"triggerModelName\", \"blockName\", channel)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block defining where to branch  channel  Channel number  Details  This function defines a trigger model building block that advances the source output based on the setup for the specified channel.  For a stair-step returning to the initial value on each advance, set the initial output bias voltage before defining the trigger model. For example, you want to to return to 2 V on each step, set the SMU channel to start at 2 V.  Example  SLOT_NUM = 1  CHANNEL_NUM = 1  SmuCh1 = slot[SLOT_NUM].smu[CHANNEL_NUM]  SmuCh1.source.levelv = 2  SmuCh1.trigger.source.linearv(0,5,6)  SmuCh1.source.output = 1  TM = slot[SLOT_NUM].trigger.model     TM.delete(\"TM1\")  TM.create(\"TM1\")  TM.addblock.source.action.step(\"TM1\", \"sourceActionStep\", CHANNEL_NUM)  TM.addblock.delay.constant(\"TM1\", \"delay50ms\", 0.05)  TM.addblock.source.action.bias(\"TM1\", \"sourceActionBias\", CHANNEL_NUM)  TM.addblock.delay.constant(\"TM1\", \"delay50ms\", 0.05)  TM.addblock.branch.counter(\"TM1\",\"branchCounter\", \"sourceActionStep\", 6)  TM.initiate(\"TM1\")  waitcomplete() print(\"Done\")  SmuCh1.source.output = 0  This example demonstrates a trigger model that increases from 0 to 5 V in six steps and between steps returns to the 2 V bias level for 50 ms.  Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].smu[X].trigger.source.linearY()  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.action.step()  "},{"id":115,"title":"slot[Z].trigger.model.addblock.source.action.skip()","url":"115827.htm","text":"This function defines a trigger-model block that executes a source action to advance a sweep operation on the specified channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.source.action.skip(\"triggerModelName\", \"blockName\", channel)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block defining where to branch  channel  Channel number  Details  This command defines a trigger model building block that advances the source output based on the channel setup for the specified channel.  For a stair-step operation incrementing through the sweep definition, do not include the optional StepOrBias string.  For a stair step returning to the initial value on each advance, set the initial output voltage prior to defining the trigger model to the desired bias voltage. For example, if the user wants to return to 2 V on each step, the channel should be set to start at 2 V.   Example  SLOT = 1  COUNT = 6  SMU = slot[SLOT].smu[1]  SMU.trigger.source.linearv(0, 5, COUNT)  TM = slot[SLOT].trigger.model  TM.delete(\"sourceaction1\")  TM.create(\"sourceaction1\")  TM.addblock.source.output(\"sourceaction1\", \"sourceoutput1\", 1, 1)  TM.addblock.source.action.skip(\"sourceaction1\", \"sourceaction2\", 1)  TM.addblock.delay.constant(\"sourceaction1\", \"delay3\", 0.01)  TM.addblock.branch.counter(\"sourceaction1\", \"branchcounter4\", \"sourceaction2\", 2 * COUNT)  TM.addblock.source.output(\"sourceaction1\", \"TheEnd\", 1, 0)  TM.print(\"sourceaction1\")  TM.initiate(\"sourceaction1\")  This example demonstrates a trigger model that uses source-action to create 2 linear sweeps, 0 V to 5 V over 100 ms. The branch counter is called 2 * COUNT, which causes a second sweep to occur.  Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].smu[X].trigger.source.linearY()  slot[Z].trigger.model.addblock.source.action.bias()  slot[Z].trigger.model.addblock.source.action.step()  slot[Z].trigger.model.addblock.source.output()  "},{"id":116,"title":"slot[Z].trigger.model.addblock.source.action.step()","url":"114973.htm","text":"This function changes the source output level to the present level of the sweep configuration, then advances to the next step in the sweep configuration.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.source.action.step(\"triggerModelName\", \"blockName\", channel)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block defining where to branch  channel  Channel number  Details  This command defines a trigger model building block that advances the source output based on the setup for the specified channel.  For a stair-step returning to the initial value on each advance, set the initial output bias voltage before defining the trigger model. For example, you want to to return to 2 V on each step, set the Module channel number to start at 2 V.  Example  SLOT_NUM = 1  CHANNEL_NUM = 1  SmuCh1 = slot[SLOT_NUM].smu[CHANNEL_NUM]  SmuCh1.source.levelv = 2  SmuCh1.trigger.source.linearv(0,5,6)  SmuCh1.source.output = 1  TM = slot[SLOT_NUM].trigger.model     TM.delete(\"TM1\")  TM.create(\"TM1\")  TM.addblock.source.action.step(\"TM1\", \"sourceActionStep\", CHANNEL_NUM)  TM.addblock.delay.constant(\"TM1\", \"delay50ms\", 0.05)  TM.addblock.branch.counter(\"TM1\",\"branchCounter\", \"sourceActionStep\", 6)  TM.initiate(\"TM1\")  waitcomplete() print(\"Done\")  SmuCh1.source.output = 0  This example demonstrates a trigger model that increases from 0 to 5 V in six steps.  Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].smu[X].trigger.source.linearY()  slot[Z].trigger.model.addblock.source.action.bias()  slot[Z].trigger.model.addblock.source.action.skip()  "},{"id":117,"title":"slot[Z].trigger.model.addblock.source.output()","url":"114974.htm","text":"This function defines a trigger model block that turns the output source on or off.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.source.output(\"triggerModelName\", \"blockName\", channel, state)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block to be added  channel  Module channel number  state  Turn the source off: smu.OFF  Turn the source on: smu.ON  Details  The source output block determines if the output source is turned on or off when the trigger model reaches this block. This block does not determine the settings of the output source, such as the output voltage level and source delay. The source settings are determined by either the current settings of the instrument or by a configuration list.  Example  # Source Output #  SLOT = 1  SMU = slot[SLOT].smu[1]  SMU.source.levelv = 4.2  TM = slot[SLOT].trigger.model  TM.delete(\"sourceoutput1\")  TM.create(\"sourceoutput1\")  TM.addblock.source.output(\"sourceoutput1\", \"sourceoutput1\", 1, 1)  TM.addblock.delay.constant(\"sourceoutput1\", \"delay2\", 0.01)  TM.addblock.source.output(\"sourceoutput1\", \"sourceoutput3\", 1, 0)  TM.addblock.delay.constant(\"sourceoutput1\", \"delay4\", 0.005)  TM.addblock.branch.counter(\"sourceoutput1\", \"branchcounter5\", \"sourceoutput1\", 10)  TM.print(\"sourceoutput1\")  TM.initiate(\"sourceoutput1\")  This example demonstrates a trigger model that uses source-output to create 10 pulses of 4.2 V and approximately 10 ms wide.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":118,"title":"slot[Z].trigger.model.addblock.wait()","url":"114975.htm","text":"This function defines a trigger model block that waits for an event before allowing the trigger model to continue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear, logic)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear, logic, event)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear, logic, event, event)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear, logic, event, event, event)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block being added by this command  event  The event that must occur before the trigger block allows trigger execution to continue (see Details)  clear  To clear previously detected trigger events when entering the wait block:  trigger.CLEAR_ENTER  To immediately act on any previously detected triggers and not clear them (default):  trigger.CLEAR_NEVER  logic  If each event must occur before the trigger model continues: trigger.WAIT_AND  If at least one of the events must occur before the trigger model continues:  trigger.WAIT_OR  Details  You can use this command to synchronize measurements with other instruments and devices. You can set the instrument to wait for the following events:  Notify  Command interface trigger  Digital input/output signals, such as DIGIO and TSP-Link  The event can occur before trigger model execution reaches the wait block. If the event occurs after trigger model execution starts but before the trigger model execution reaches the wait block, the trigger model records the event.  By default, when trigger model execution reaches the wait block, it executes the wait block without waiting for the event to occur again when the clear parameter is set to never.   The instrument clears the memory of the recorded event when trigger model execution is at the start block and when the trigger model exits the wait block. It also clears the recorded trigger event when the clear parameter is set to enter.  Example  SLOT = 1  SMU1 = slot[SLOT].smu[1]  SMU2 = slot[SLOT].smu[2]  SMU1.source.levelv = 4.2 ; SMU2.source.levelv = 5.3  SMU1.source.output = 0 ; SMU2.source.output = 0  EVENT = slot[SLOT].trigger.model.EVENT_NOTIFY1  TM = slot[SLOT].trigger.model  TM.delete(\"waitCH1\") ; TM.delete(\"notifyCH2\")  TM.create(\"waitCH1\") ; TM.create(\"notifyCH2\")  TM.addblock.wait(\"waitCH1\", \"wait1\", EVENT)  TM.addblock.source.output(\"waitCH1\", \"sourceoutput2\", 1, 1)  TM.addblock.delay.constant(\"waitCH1\", \"delay2\", 0.01)  TM.addblock.source.output(\"waitCH1\", \"sourceoutput3\", 1, 0)  TM.addblock.source.output(\"notifyCH2\", \"sourceoutput1\", 2, 1)  TM.addblock.notify(\"notifyCH2\", \"notify2\", EVENT)  TM.addblock.delay.constant(\"notifyCH2\", \"delay3\", 0.01)  TM.addblock.source.output(\"notifyCH2\", \"sourceoutput3\", 2, 0)  TM.print(\"notifyCH2\") ; TM.print(\"waitCH1\")  TM.initiate(\"waitCH1\") ; TM.initiate(\"notifyCH2\")  This example demonstrates a trigger model that uses 2 channels to create a wait and notify pair. The wait trigger model is initiated first and when the notify trigger model reaches the notify block, the outputs of both channels will pulse high for 10 ms.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":119,"title":"slot[Z].trigger.model.create()","url":"114957.htm","text":"This function creates a trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.create(\"triggerModelName\")  Z  Module slot number  triggerModelName  Name of the trigger model to create  Details  You can create multiple, named trigger models with this command. Duplicate or empty trigger model name strings are not accepted; if you attempt to create a trigger model without a name or with a name that already exists, an error will occur.  You can add trigger model blocks with the slot[Z].trigger.model.addblock.* series of functions.  Example  SLOT = 1  slot[SLOT].smu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"create1\")  slot[SLOT].trigger.model.addblock.source.output(\"create1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"create1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"create1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.initiate(\"create1\")  This example creates a trigger model that turns on the output of channel 1 for 100 ms for the module installed in slot 1. Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].trigger.model.delete()  "},{"id":120,"title":"slot[Z].trigger.model.delete()","url":"114958.htm","text":"This function deletes a trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.delete(\"triggerModelName\")  Z  Module slot number  triggerModelName  Name of the trigger model to delete  Details  This function deletes a trigger model. Attempting to delete a running trigger model will cause an error.  You can add trigger model blocks with the slot[Z].trigger.model.addblock.* series of functions.  Example  slot[1].trigger.model.create(\"delete1\")  slot[1].trigger.model.delete(\"delete1\")  Creates and then deletes a trigger model named delete1 on the module installed in slot 1.  Also see  slot[Z].trigger.model.create()  "},{"id":121,"title":"slot[Z].trigger.model.initiate()","url":"114959.htm","text":"This function starts a specified trigger model on a module.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.initiate(\"triggerModelName\")  Z  Module slot number  triggerModelName  Name of the trigger model to start  Details  This function runs the named trigger model on a module. When this function completes, the trigger model will continue to run in the background.  Initiating a trigger module that is already running or a trigger model that has not yet been created will cause an error.  Example  SLOT =1  slot[SLOT].smu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"initiate1\")  slot[SLOT].trigger.model.addblock.source.output(\"initiate1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"initiate1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"initiate1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.print(\"initiate1\")  slot[SLOT].trigger.model.initiate(\"initiate1\")  Initiates trigger model initiate1, which turns on the output of channel 1 installed in slot 1 for 100 ms. Note the assignment of the SLOT variable and change it accordingly.   Also see  slot[Z].trigger.model.abort  "},{"id":122,"title":"slot[Z].trigger.model.removeblock()","url":"115826.htm","text":"This function removes the trigger block from the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.removeblock(\"triggerModelName\", \"triggerBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model from which this trigger block will be removed  triggerBlockName  Unique name of the trigger block to remove; this string cannot be empty  Details  When this command is executed, the specified trigger block within the named trigger model will be deleted. If either the trigger block name or the trigger model name does not exist, an error message will be returned.  You can add trigger model blocks with the slot[Z].trigger.model.addblock.* series of functions.  Example  SmuCh1 = slot[1].smu[1]  --- Set the initial voltage output for SMU Ch1 to 2 V   ---  SmuCh1.source.levelv = 2  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Delete the second delay constant block before trigger model initiates ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay1\", 0.2)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay2\", 0.5)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  slot[1].trigger.model.removeblock(\"TM1\", \"Delay2\")  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")  This example uses the slot[Z].trigger.model.removeblock() command to delete an existing trigger model block. This prevents the second trigger model delay block (0.5 s) from running when the trigger model is initiated.  Also see  None  "},{"id":123,"title":"slot[Z].trigger.model.state()","url":"115506.htm","text":"This function returns the present state of the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  status = slot[Z].trigger.model.state(\"triggerModelName\")  status  The status of the trigger model:  trigger.STATE_ABORTED  trigger.STATE_ABORTING  trigger.STATE_BUILDING  trigger.STATE_EMPTY  trigger.STATE_FAILED  trigger.STATE_IDLE  trigger.STATE_RUNNING  Z  Module slot number  triggerModelName  Name of the trigger model  Details  This function returns the state of the trigger model. The instrument checks the state of a trigger model as the model executes. A trigger model name is required; an empty set of parentheses will cause an error.  The trigger model states are:  Aborted: The trigger model is stopped  Aborting: The trigger model is stopping  Building: Blocks have been added  Empty: The trigger model is selected, but no blocks are defined  Failed: The trigger model is stopped because of an error  Idle: The trigger model is stopped  Running: The trigger model is running  Example  print(slot[1].trigger.model.state(\"TM1\"))  Prints the state of trigger model TM1.<br>STATE_RUNNING  Also see  None  "},{"id":124,"title":"slot[Z].version","url":"107215.htm","text":"This attribute stores the firmware version number of the module in the specified slot of the mainframe.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Firmware upgrade  Not applicable  Not applicable  Usage  version = slot[Z].version  version  The module firmware version number  Z  Module slot number  Details  This attribute stores the firmware version number of the module installed in the specified slot.  Example  slot[1].version  Returns the firmware revision number of the module installed in slot 1.  Also see  None  "}]}