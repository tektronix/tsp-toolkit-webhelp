{"pages":[{"id":1,"title":"TSP command reference","url":"MP5103_TSP_command_reference.htm","text":""},{"id":2,"title":"MP5000 Series TSP commands","url":"116606.htm","text":"The TSP commands available for the MP5000 Series Modular Precision Mainframe instrument are listed in alphabetical order.  "},{"id":3,"title":"bit.bitand()","url":"116209.htm","text":"This function performs a bitwise logical AND operation on two numbers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.bitand(value1, value2)  result  Result of the logical AND operation  value1  Operand for the logical AND operation; cannot be a negative number  value2  Operand for the logical AND operation; cannot be a negative number  Details  Any fractional parts of value1 and value2 are truncated to form integers. The returned result is also an&nbsp;integer.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.bitand(10, 9)  print(testResult)  Performs a logical AND operation on decimal 10 (binary 1010) with decimal 9 (binary 1001), which returns a value of decimal 8 (binary 1000).  Output:  8.0000000e+00  Also see  ***Bit manipulation and logic operations  bit.bitor()  bit.bitxor()  "},{"id":4,"title":"bit.bitor()","url":"116210.htm","text":"This function performs a bitwise logical OR operation on two numbers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.bitor(value1, value2)  result  Result of the logical OR operation  value1  Operand for the logical OR operation; cannot be a negative number  value2  Operand for the logical OR operation; cannot be a negative number  Details  Any fractional parts of value1 and value2 are truncated to make them integers. The returned result is also an&nbsp;integer.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.bitor(10, 9)  print(testResult)  Performs a bitwise logical OR operation on decimal 10 (binary 1010) with decimal 9 (binary 1001), which returns a value of decimal 11 (binary 1011).  Output:  1.1000000e+01  Also see  *** manipulation and logic operations  bit.bitand()  bit.bitxor()  "},{"id":5,"title":"bit.bitxor()","url":"116211.htm","text":"This function performs a bitwise logical XOR (exclusive OR) operation on two numbers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.bitxor(value1, value2)  result  Result of the logical XOR operation  value1  Operand for the logical XOR operation; cannot be a negative number  value2  Operand for the logical XOR operation; cannot be a negative number  Details  Any fractional parts of value1 and value2 are truncated to make them integers. The returned result is also an integer.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.bitxor(10, 9)  print(testResult)  Performs a logical XOR operation on decimal 10 (binary 1010) with decimal 9 (binary 1001), which returns a value of decimal 3 (binary 0011).  Output:  3.0000000e+00  Also see  *** manipulation and logic operations  bit.bitand()  bit.bitor()  "},{"id":6,"title":"bit.clear()","url":"116212.htm","text":"This function clears a bit at a specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.clear(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to clear (1 to 32)  Details  Any fractional part of value is truncated to make it an integer. The returned result is also an integer.  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.clear(15, 2)  print(testResult)  The binary equivalent of decimal 15 is 1111. If you clear the bit at index position 2, the returned decimal value is 13 (binary&nbsp;1101).  Output:  1.3000000e+01  Also see  ***Bit manipulation and logic operations  bit.get()  bit.set()  bit.test()  bit.toggle()  "},{"id":7,"title":"bit.get()","url":"116213.htm","text":"This function retrieves the weighted value of a bit at a specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.get(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to get (1 to 32)  Details  This function returns the value of the bit in value at index. This is the same as returning value with all other bits set to zero&nbsp;(0).  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  If the indexed bit for the number is set to zero (0), the result is zero (0).  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.get(10, 4)  print(testResult)  The binary equivalent of decimal 10 is 1010. If you get the bit at index position 4, the returned decimal value&nbsp;is 8 (binary 1000).  Output:  8.0000000e+00  Also see  ***Bit manipulation and logic operations  bit.clear()  bit.set()  bit.test()  bit.toggle()  "},{"id":8,"title":"bit.getfield()","url":"116214.htm","text":"This function returns a field of bits from the value starting at the specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.getfield(value, index, width)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to get (1 to 32)  width  The number of bits to include in the field (1 to 32)  Details  A field of bits is a contiguous group of bits. This function retrieves a field of bits from value starting at&nbsp;index.  The index position is the least significant bit of the retrieved field. The number of bits to return is specified by&nbsp;width.  The least significant bit of value is at index position 1; the most significant bit is at index&nbsp;position&nbsp;32.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  myResult = bit.getfield(13, 2, 3)  print(myResult)  The binary equivalent of decimal 13 is 1101.   The field at index position 2 and width 3 consists of the binary bits 110. The returned value is decimal 6 (binary 110).  Output:  6.0000000e+00  Also see  ***Bit manipulation and logic operations  bit.get()  bit.set()  bit.setfield()  "},{"id":9,"title":"bit.set()","url":"116215.htm","text":"This function sets a bit at the specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.set(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to set (1 to 32)  Details  This function returns result, which is value with the indexed bit set. The index must be between&nbsp;1&nbsp;and 32.  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  Any fractional part of value is truncated to make it an integer.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.set(8, 3)  print(testResult)  The binary equivalent of decimal 8 is 1000. If the bit at index position 3 is set to 1, the returned value is decimal 12 (binary&nbsp;1100).  Output:  1.2000000e+01  Also see  ***Bit manipulation and logic operations  bit.clear()  bit.get()  bit.getfield()  bit.setfield()  bit.test()  bit.toggle()  "},{"id":10,"title":"bit.setfield()","url":"116216.htm","text":"This function overwrites a bit field at a specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.setfield(value, index, width, fieldValue)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position in value to set (1 to 32)  width  The number of bits to include in the field (1 to 32)  fieldValue  Value to write to the field  Details  This function returns result, which is value with a field of bits overwritten, starting at index. The index specifies the position of the least significant bit of value. The width bits starting at index are set to&nbsp;fieldValue.  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  Before setting the field of bits, any fractional parts of value and fieldValue are truncated to form integers.  If fieldValue is wider than width, the most significant bits of the fieldValue that exceed the width are truncated. For example, if width is 4 bits and the binary value for fieldValue is 11110 (5&nbsp;bits), the most significant bit of fieldValue is truncated and a binary value of 1110 is used.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.setfield(15, 2, 3, 5)  print(testResult)  The binary equivalent of decimal 15 is 1111. After overwriting it with a decimal 5 (binary 101) at index position 2, the returned value is decimal 11 (binary 1011).  Output:  1.1000000e+01  Also see  ***Bit manipulation and logic operations  bit.get()  bit.set()  bit.getfield()  "},{"id":11,"title":"bit.test()","url":"116217.htm","text":"This function returns the Boolean value (true or false) of a bit at the specified index posiion.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.test(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to test: 1 to 32  Details  This function returns result, which is the result of the tested bit.   The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  If the indexed bit for value is 0, result is false. If the bit of value at index is 1, the returned value is&nbsp;true.  If index is bigger than the number of bits in value, the result is false.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.test(10, 4)  print(testResult)  The binary equivalent of decimal 10 is 1010. Testing the bit at index position 4 returns a Boolean value of&nbsp;true.  Output:  true  Also see  ***Bit manipulation and logic operations  bit.clear()  bit.get()  bit.set()  bit.toggle()  "},{"id":12,"title":"bit.toggle()","url":"116218.htm","text":"This function toggles the value of a bit at a specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.toggle(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to toggle: 1 to 32  Details  This function returns result, which is the result of toggling the bit index in value.  Any fractional part of value is truncated to make it an integer. The returned value is also an integer.  The indexed bit for value is toggled from 0 to 1, or 1 to 0.  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  The TSP scripting engine stores all numbers internally as IEEE Standard 754 double-precision floating-point values. The logical operations work on 32-bit integers. Fractional bits of any input values are truncated. Returned values are integers. For numbers larger than 4294967295, only the lower 32 bits are used.  Example  testResult = bit.toggle(10, 3)  print(testResult)  The binary equivalent of decimal 10 is 1010. Toggling the bit at index position 3 returns a decimal value of 14 (binary&nbsp;1110).  Output:  1.4000000e+01  Also see  ***Bit manipulation and logic operations  bit.clear()  bit.get()  bit.set()  bit.test()  "},{"id":13,"title":"dataqueue.add()","url":"116219.htm","text":"This function adds an entry to the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  result = dataqueue.add(value)  result = dataqueue.add(value, timeout)  result  The resulting value of true or false based on the success of the function  value  The data item to add; value can be of any type  timeout  The maximum number of seconds to wait for space in the data queue  Details  You cannot use the timeout value when accessing the data queue from a remote node. You can only use the timeout value while adding data to the local data queue.  The timeout value is ignored if the data queue is not full.  The dataqueue.add() function returns false:  If the timeout expires before space is available in the data queue  If the data queue is full and a timeout value is not specified  If the value is a table, a duplicate of the table and any subtables is made. The duplicate table does not contain any references to the original table or to any subtables.  Example  dataqueue.clear()  dataqueue.add(10)  dataqueue.add(11, 2)  result = dataqueue.add(12, 3)  if result == false then     print(\"Failed to add 12 to the dataqueue\")  end  print(\"The dataqueue contains:\")  while dataqueue.count > 0 do     print(dataqueue.next())  end  Clear the data queue.  Each line adds one item to the data queue.  Output:  The dataqueue contains:  10  11  12  Also see  dataqueue.CAPACITY  dataqueue.clear()  dataqueue.count  dataqueue.next()  ***Using the data queue for real-time communications  "},{"id":14,"title":"dataqueue.CAPACITY","url":"116220.htm","text":"This constant is the maximum number of entries that you can store in the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  count = dataqueue.CAPACITY  count  The variable that is assigned the value of dataqueue.CAPACITY  Details  This constant always returns the maximum number of entries that can be stored in the data queue.  Example  MaxCount = dataqueue.CAPACITY  while dataqueue.count < MaxCount do     dataqueue.add(1)  end  print(\"There are \" .. dataqueue.count .. \" items in the data queue\")  This example fills the data queue until it is full and prints the number of items in the queue.  Output:  There are 128 items in the data queue  Also see  dataqueue.add()  dataqueue.clear()  dataqueue.count  dataqueue.next()  ***Using the data queue for real-time communications  "},{"id":15,"title":"dataqueue.clear()","url":"116222.htm","text":"This function clears the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dataqueue.clear()  Details  This function forces all dataqueue.add() commands that are in progress to time out and deletes all data from the data queue.  Example  MaxCount = dataqueue.CAPACITY  while dataqueue.count < MaxCount do     dataqueue.add(1)  end  print(\"There are \" .. dataqueue.count     .. \" items in the data queue\")  dataqueue.clear()  print(\"There are \" .. dataqueue.count     .. \" items in the data queue\")  This example fills the data queue and prints the number of items in the queue. It then clears the queue and prints the number of items again.  Output:  There are 128 items in the data queue  There are 0 items in the data queue  Also see  dataqueue.add()  dataqueue.CAPACITY  dataqueue.count  dataqueue.next()  ***Using the data queue for real-time communications  "},{"id":16,"title":"dataqueue.count","url":"116223.htm","text":"This attribute contains the number of items in the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  count = dataqueue.count  count  The number of items in the data queue  Details  The count is updated as entries are added with dataqueue.add() and read from the data queue with dataqueue.next(). It is also updated when the data queue is cleared with dataqueue.clear().  A maximum of dataqueue.CAPACITY items can be stored at any one time in the data queue.  Example  MaxCount = dataqueue.CAPACITY  while dataqueue.count < MaxCount do     dataqueue.add(1)  end  print(\"There are \" .. dataqueue.count     .. \" items in the data queue\")  dataqueue.clear()  print(\"There are \" .. dataqueue.count     .. \" items in the data queue\")  This example fills the data queue and prints the number of items in the queue. It then clears the queue and prints the number of items again.  Output:  There are 128 items in the data queue  There are 0 items in the data queue  Also see  dataqueue.add()  dataqueue.CAPACITY  dataqueue.clear()  dataqueue.next()  **&***Using the data queue for real-time communications  "},{"id":17,"title":"dataqueue.next()","url":"116224.htm","text":"This function removes the next entry from the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  value = dataqueue.next()  value = dataqueue.next(timeout)  value  The next entry in the data queue  timeout  The number of seconds to wait for data in the queue  Details  If the data queue is empty, the function waits up to the timeout value.  If data is not available in the data queue before the timeout expires, the return value is nil.  The entries in the data queue are removed in first-in, first-out (FIFO) order.  If the value is a table, a duplicate of the original table and any subtables is made. The duplicate table does not contain any references to the original table or to any subtables.  Example  dataqueue.clear()  for i = 1, 3 do     dataqueue.add(i)  end  print(\"There are \" .. dataqueue.count .. \" items in the data queue\")  while dataqueue.count > 0 do     x = dataqueue.next()     print(x)  end  print(\"There are \" .. dataqueue.count .. \" items in the data queue\")  Clears the data queue, adds ten entries, then reads the entries from the data queue. Output:  There are 3 items in the data queue  1  2  3  There are 0 items in the data queue  Your output may differ depending on the setting of format.asciiprecision.  Also see  dataqueue.add()  dataqueue.CAPACITY  dataqueue.clear()  dataqueue.count  format.asciiprecision  ****Using the data queue for real-time communications  "},{"id":18,"title":"delay()","url":"115901.htm","text":"This function delays the execution of the commands that follow it.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  delay(seconds)  seconds  The number of seconds to delay: 0&nbsp;s to 100 ks  Details  The instrument delays execution of the commands for at least the specified number of seconds and fractional seconds. However, the processing time may cause the instrument to delay 5&nbsp;μs to 10&nbsp;μs (typical) more than the requested delay.  Example  slot.start(1)  delay(10)  slot.stop(1)  Powers-on the module in slot 1, delays 10 seconds, then powers-down the module.  Also see  None  "},{"id":19,"title":"digio.readbit()","url":"115119.htm","text":"This function reads one digital I/O line.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data = digio.readbit(N)  data  The present value on the line: 1 or 0  N  Digital I/O line number to be read: 1 to 18  Details  A returned value of zero (0) indicates that the line is low. A returned value of one (1) indicates that the line is high.  Example  -Read the value of digital I/O line 2  local value = digio.readbit(2)  print(\"The value of line 2 is: \" .. value)  Reads the state of digital I/O line 2.  Output  The value of line 2 is: 0  Also see  digio.readport()  digio.writebit()  digio.writeport()  "},{"id":20,"title":"digio.readport()","url":"115118.htm","text":"This function reads the digital I/O port  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data = digio.readport()  data  The present value of the input lines on the digital I/O port  Details  The binary equivalent of the returned value indicates the value of the input lines on the I/O port. The least significant bit (bit B1) of the binary number corresponds to line 1; bit B14 corresponds to line 14.  For example, a returned value of 170 has a binary equivalent of 000000010101010, which indicates that lines 2, 4, 6, and 8 are high (1), and the other 10 lines are low (0).  Example  data = digio.readport()  print(data)  Assume lines 2, 4, 6, and 8 are set high when the I/O port is read.  Output:  1.7000000e+02  This is binary 10101010.  Also see  digio.readbit()  digio.writebit()  digio.writeport()  "},{"id":21,"title":"digio.trigger[N].assert()","url":"115129.htm","text":"This function asserts a trigger pulse on one of the digital I/O lines  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.trigger[N].assert()  N  Digital I/O trigger line: 1 to 18  Details  This command asserts a trigger on the specified trigger line. When a trigger is asserted, it generates a pulse with the duration specified by digio.trigger[N].pulsewidth.  Examples  digio.trigger[2].assert()  Asserts digital I/O trigger line 2.  digio.trigger[2].logic = digio.LOGIC_NEGATIVE  digio.trigger[2].mode = digio.MODE_TRIGGER_OUT  digio.trigger[2].pulsewidth = 0  digio.trigger[2].assert()  digio.trigger[2].release()  Negative trigger out. This example uses indefinite-length triggers, as it sets the pulse width to 0 and uses digio.trigger[N].release() rather than using automatic pulse generation.  digio.trigger[2].logic = digio.LOGIC_POSITIVE  digio.trigger[2].mode = digio.MODE_TRIGGER_OUT  digio.trigger[2].pulsewidth = 10e-6  digio.trigger[2].assert()  Positive trigger out.  Also see  digio.trigger[N].mode  digio.trigger[N].pulsewidth  "},{"id":22,"title":"digio.trigger[N].clear()","url":"115324.htm","text":"This function clears the trigger event on a digital I/O line.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  N = digio.trigger[N].clear()  N  Digital I/O trigger line: 1 to 18  Details  The event detector of a trigger enters the detected state when an event is detected. It is cleared when digio.trigger[N].wait() or digio.trigger[N].clear() is called.  digio.trigger[N].clear() clears the event detector of the specified trigger line, discards the history of the trigger line, and clears the digio.trigger[N].overrun attribute.  Example  digio.trigger[2].clear()  Clears the trigger event on digital I/O line 2.  Also see  digio.trigger[N].overrun  digio.trigger[N].wait  "},{"id":23,"title":"digio.trigger[N].edge","url":"115124.htm","text":"This command configures the edge detection mode for a digital I/O line.  Type  TSP-Link accssible  Affected by  Where saved  Default value  Attribute (RW)  Yes  digio.trigger[N].reset<br>Instrument reset<br>Power cycle  Not applicable  digio.EDGE_FALLING  Usage  triggerEdge = digio.trigger[N].edge  digio.trigger[N].edge = triggerEdge  triggerEdge  The trigger edge selection; see Trigger edge values for values  N  Digital I/O trigger line: 1 to 18  Details  This command is used for input trigger detection. To control output trigger generation, use the digio.trigger[N].logic command.  To directly control the line state, set the mode of the line to digital and use the write command. When the digital line mode is set for open drain, the edge settings assert a TTL low&#8209;pulse.  Set triggerEdge to one of the following values:  Trigger edge values  triggerEdge  Description  digio.EDGE_FALLING  Detects falling&#8209;edge triggers as input when the line is configured as an input or open drain  digio.EDGE_RISING  Detects rising&#8209;edge triggers as input when the line is configured as an open drain  digio.EDGE_EITHER  Detects rising- or falling&#8209;edge triggers as input when the line is configured as an input or open drain  Example  digio.trigger[3].edge = digio.EDGE_RISING  Sets the trigger edge detection mode for I/O line 3 to digio.EDGE_RISING. This will configure line 3 to detect rising edges as input triggers.  Also see  digio.trigger[N].clear()  digio.trigger[N].logic  digio.trigger[N].mode  digio.trigger[N].reset  digio.writeport()  "},{"id":24,"title":"digio.trigger[N].EVENT_ID","url":"116241.htm","text":"This constant identifies the trigger event generated by the digital I/O line N.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = digio.trigger[N].EVENT_ID  eventID  The trigger event number  N  Digital I/O trigger line: 1 to 18  Details  Use this constant to refer to an event generated on trigger line N. You can configure the trigger stimulus of another trigger object to respond to this event by setting the stimulus attribute equal to this constant.  Example  digio.trigger[5].stimulus = digio.trigger[3].EVENT_ID  Uses a trigger event on digital I/O trigger line 3 to be the stimulus for digital I/O trigger line 5.  Also see  digio.trigger[N].stimulus  "},{"id":25,"title":"digio.trigger[N].logic","url":"115125.htm","text":"This attribute sets the output logic of the trigger event generator to positive or negative for the specified line.  Type  TSP-Link accssible  Affected by  Where saved  Default value  Attribute (RW)  Yes  digio.trigger[N].reset<br>Instrument reset<br>Power cycle  Not applicable  digio.LOGIC_NEGATIVE  Usage  triggerLogic = digio.trigger[N].logic  digio.trigger[N].logic = triggerLogic  triggerLogic  The trigger mode; see Details for values  N  Digital I/O trigger line: 1 to 18  Details  This attribute is used for output trigger generation. To control input trigger detection, use the digio.trigger[N].edge command.  Set triggerLogic to one of the following values:  Trigger logic level  triggerLogic  Description  digio.LOGIC_POSITIVE  Asserts a TTL&#8209;high pulse for output  digio.LOGIC_NEGATIVE  Assert a TTL-low pulse for output  Example  digio.trigger[3].logic = digio.LOGIC_POSITIVE  digio.trigger[3].mode = digio.MODE_TRIGGER_OUT  Sets I/O line 3 mode to be a trigger output and sets the output logic of the trigger event generator to negative.  Also see  digio.trigger[N].edge  digio.trigger[N].mode  digio.trigger[N].reset  "},{"id":26,"title":"digio.trigger[N].mode","url":"115123.htm","text":"This attribute sets the mode of the digital I/O line to be a digital line, trigger line, or synchronous line and sets the line to be input, output, or open-drain.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  digio.trigger[N].reset()<br>Instrument reset<br>Power cycle  Not applicable  digio.MODE_DIGITAL_IN  Usage  digio.trigger[N].mode = triggerMode  N  Digital I/O trigger line: 1 to 18  triggerMode  The trigger mode; see Details for values  Details  Set triggerMode to one of the following values:  Mode values  triggerMode  Description  digio.MODE_DIGITAL_IN  Digital control, input  digio.MODE_DIGITAL_OUT  Digital control, output  digio.MODE_DIGITAL_OPEN_DRAIN  Digital control, open drain  digio.MODE_TRIGGER_IN  Trigger control, input  digio.MODE_TRIGGER_OUT  Trigger control, output  digio.MODE_TRIGGER_OPEN_DRAIN  Trigger control, open drain  digio.MODE_SYNCHRONOUS_MASTER  Synchronous master  digio.MODE_SYNCHRONOUS_ACCEPTOR  Synchronous acceptor  You can use this command to place each digital I/O line into one of the following modes:  Digital open&#8209;drain, output, or input  Trigger open&#8209;drain, output, or input  Trigger synchronous master or synchronous acceptor  A digital line allows direct control of the digital I/O lines by writing a bit pattern to the lines. A trigger line uses the digital I/O lines to detect triggers.  The following settings of triggerMode set the line for direct control as a digital line:  digio.MODE_DIGITAL_IN: The instrument automatically detects externally generated logic levels. You can read an input line, but you cannot write to it.  digio.MODE_DIGITAL_OUT: You can set the line as logic high (+5&nbsp;V) or as logic low (0&nbsp;V). The default level is logic low (0&nbsp;V). When the instrument is in output mode, the line is actively driven high or low.  digio.MODE_DIGITAL_OPEN_DRAIN: Configures the line to be an open&#8209;drain signal. The line can serve as an input, an output or both. When a digital I/O line is used as an input in open&#8209;drain mode, you must write a 1 to it.  The following settings of triggerMode set the line for direct control as a trigger line:  digio.MODE_TRIGGER_IN: The line automatically responds to and detects externally generated triggers. It detects falling&#8209;edge, rising&#8209;edge, or either&#8209;edge triggers as input. This line state uses the edge setting specified by the digio.trigger[N].edge attribute.  digio.MODE_TRIGGER_OUT: The line is automatically set high or low depending on the output logic specified by the digio.trigger[N].logic attribute. Use the negative logic setting when you want to generate a falling edge trigger and use the positive logic setting when you want to generate a rising edge trigger.  digio.MODE_TRIGGER_OPEN_DRAIN: Configures the line to be an open&#8209;drain signal. You can use the line to detect input triggers or generate output triggers. This line state uses the edge setting specified by the digio.trigger[N].edge attribute and the logic setting specified by the digio.trigger[N].logic attribute.  When the line is set as a synchronous acceptor, the line detects the falling-edge input triggers and utomatically latches and drives the trigger line low. Asserting an output trigger releases the atched line.  When the line is set as a synchronous master, the line detects rising-edge triggers as input. For utput, the line asserts a TTL-low pulse.  Example  digio.trigger[3].mode = digio.MODE_DIGITAL_IN  Sets the trigger mode for I/O line 3 to digio.MODE_DIGITAL_IN.  Also see  digio.trigger[N].edge  digio.writebit()  "},{"id":27,"title":"digio.trigger[N].overrun","url":"115323.htm","text":"This function returns the event detector overrun status.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  digio.trigger[N].clear()<br>digio.trigger[N].reset()<br>Instrument reset<br>Power cycle  Not applicable  Not applicable  Usage  overrun = digio.trigger[N].overrun  overrun  Trigger overrun state: true or false  N  Digital I/O trigger line: 1 to 18  Details  If this is true, an event was ignored because the event detector was already in the detected state when the event occurred.  This is an indication of the state of the event detector built into the line itself. It does not indicate if an overrun occurred in any other part of the trigger model or in any other detector that is monitoring the&nbsp;event.  Example  overrun = digio.trigger[1].overrun  if overrun then       print(\"Trigger overrun set on digital input 1\")  else       print(\"No trigger overrun on digital input 1\")  end  Prints the status of the event detector overrun.  Also see  digio.trigger[N].clear()  digio.trigger[N].reset()  "},{"id":28,"title":"digio.trigger[N].pulsewidth","url":"115126.htm","text":"This attribute describes the length of time that the trigger line is asserted for output triggers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  digio.trigger[N].reset<br>Instrument reset<br>Power cycle  Not applicable  10e-6 (10 us)  Usage  triggerPulseWidth = digio.trigger[N].pulsewidth  digio.trigger[N].pulsewidth = triggerPulseWidth  triggerPulseWidth  Pulse width, from 0.1 µs to 400 s, or 0 for indefinite  N  Digital I/O trigger line: 1 to 18  Details  Setting the pulse width to zero (0) seconds asserts the trigger indefinitely. To release the trigger line use digio.trigger[N].release().  Example  digio.trigger[2].pulsewidth = 0.0001  Sets the pulse width for I/O trigger line 2 to 100 µs.  Also see  digio.trigger[N].assert()  digio.trigger[N].release()  digio.trigger[N].reset()  "},{"id":29,"title":"digio.trigger[N].release()","url":"115130.htm","text":"This function releases an indefinite length or latched trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.trigger[N].release()  N  Digital I/O trigger line (1 to 18)  Details  Releases a trigger that was asserted with an indefinite pulsewidth time. It also releases a trigger that was latched in response to receiving a synchronous mode trigger. Only the specified trigger line is affected.  Examples  digio.trigger[2].release()  Releases digital I/O trigger line 2.  Also see  digio.trigger[N].assert()  digio.trigger[N].pulsewidth  "},{"id":30,"title":"digio.trigger[N].reset()","url":"115131.htm","text":"This function resets digital I/O line values to their factory defaults.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.trigger[N].reset()  N  Digital I/O trigger line: 1 to 18  Details  This function resets the following attributes to their default values:  digio.trigger[N].mode  digio.trigger[N].edge  digio.trigger[N].logic  digio.trigger[N].pulsewidth  digio.trigger[N].stimulus  It also clears digio.trigger[N].overrun.  Example 1  digio.trigger[2].reset()  Resets digital I/O trigger line 2.  Example 2  digio.trigger[3].mode = digio.MODE_TRIGGER_OUT  digio.trigger[3].pulsewidth = 50e-6  digio.trigger[3].stimulus = digio.trigger[5].EVENT_ID  print(digio.trigger[3].mode, digio.trigger[3].pulsewidth, digio.trigger[3].stimulus)  digio.trigger[3].reset()  print(digio.trigger[3].mode, digio.trigger[3].pulsewidth, digio.trigger[3].stimulus)  Set the digital I/O trigger line 3 for a negative TTL logic pulse with a pulsewidth of 50 µs.  Use digital I/O line 5 to trigger the event on line 3.  Reset the line to factory default values.  Output before reset:  4.0000000e+00        5.0000000e-05        5.0000000e+00  Output after reset:  0.0000000e+00        1.0000000e-05        0.0000000e+00  Also see  digio.trigger[N].edge  digio.trigger[N].logic  digio.trigger[N].mode  digio.trigger[N].overrun  digio.trigger[N].pulsewidth  digio.trigger[N].stimulus  "},{"id":31,"title":"digio.trigger[N].stimulus","url":"115574.htm","text":"This attribute selects the event that causes a trigger to be asserted on the digital output line.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Restore configuration<br>Instrument reset<br>Power cycle<br>Digital I/O trigger N reset  Configuration script  digio.EVENT_NONE  Usage  eventID = digio.trigger[N].stimulus  digio.trigger[N].stimulus = eventID  eventID  The event to use as a stimulus; see Details  N  Digital I/O trigger line: 1 to 18  Details  Set this attribute to trigger.EVENT_NONE to disable the automatic trigger output.  Do not use this attribute to generate output triggers under script control. Use digio.trigger[N].assert()&nbsp;instead.  The event IDs that can be used for this command include mainframe-specific event IDs as well as event IDs for any installed modules capable of generating a trigger event. See ***Trigger event IDs*** to find the event IDs for your mainframe and specific modules.  Also see  digio.trigger[N].assert  digio.trigger[N].clear  digio.trigger[N].mode  digio.trigger[N].reset  "},{"id":32,"title":"digio.trigger[N].wait()","url":"115298.htm","text":"This function waits for an input trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = digio.trigger[N].wait(timeout)  triggered  Trigger detected: true  No triggers detected during the timeout period: false  N  Digital I/O trigger line: 1 to 18  timeout  Timeout in seconds  Details  This function pauses for up to timeout seconds for an input trigger. If one or more trigger events are detected since the last time digio.trigger[N].wait() or digio.trigger[N].clear() was called, this function returns a value immediately. After waiting for a trigger with this function, the event detector is automatically reset and is ready to detect the next trigger. This is true regardless of the number of events detected.  Example  triggered = digio.trigger[1].wait(5)  if triggered then       print(\"Trigger event detected on pin 1\")  else       print(\"Timeout waiting for trigger event on pin 1\")  end  Waits for up to 5 s for a trigger to be detected on trigger line 1, then outputs the results.<br>Output if no trigger is detected:  Timeout waiting for trigger event on pin 1<br>Output if a trigger is detected:<br>Trigger event detected on pin 1  Also see  digio.trigger[N].clear  digio.trigger[N].mode  "},{"id":33,"title":"digio.writebit()","url":"115121.htm","text":"This function writes a value to a specific digital I/O line.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.writebit(N, value)  N  Digital I/O trigger line: 1 to 18  value  The value to write to the bit:  0 (low)  Non-zero (high)  Details  If the output line is write&#8209;protected using the digio.writeprotect attribute, the command is ignored.  The reset() function does not affect the present state of the digital I/O lines.  The data must be zero (0) to clear the bit. Any value other than zero (0) sets the&nbsp;bit.  You cannot write to a digital I/O line set to trigger mode or set to input only. The line must be set to a digital control line using digio.MODE_DIGITAL_OUT or digio.MODE_DIGITAL_OPEN_DRAIN. See digio.trigger[N].mode for details.  Example  digio.trigger[2].mode = digio.MODE_DIGITAL_OUT  digio.writebit(2, 0)  Sets digital I/O line 2 to low (0).  Also see  digio.readbit()  digio.readport()  digio.trigger[N].mode  digio.writeport()  digio.writeprotect  "},{"id":34,"title":"digio.writeport()","url":"115120.htm","text":"This function writes to all digital I/O lines.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.writeport(data)  data  Value to write to the port: (0 to 262143  Details  The binary representation of data indicates the output pattern to be written to the I/O port. For example, a data value of 170 has a binary equivalent of 00000010101010. Lines 2, 4, 6, and 8 are set high (1), and the other 10 lines are set low (0).  Write&#8209;protected lines are not changed.  The reset() function does not affect the present states of the digital I/O lines.  You cannot write to a digital I/O line set to trigger mode or set to input only. The line must be set to a digital control line using digio.MODE_DIGITAL_OUT or digio.MODE_DIGITAL_OPEN_DRAIN. See digio.trigger[N].mode for details.   Example  digio.writeport(255)  Sets digital I/O lines 1 through 8 high (binary 00000011111111)  Also see  digio.readbit()  digio.readport()  digio.trigger[N].mode  digio.writebit()  digio.writeprotect  "},{"id":35,"title":"digio.writeprotect","url":"115122.htm","text":"This attribute contains the write&#8209;protect mask that protects bits from changes from the digio.writebit() and digio.writeport() functions.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Power cycle  Not applicable  0  Usage  digio.writeprotect = mask  mask = digio.writeprotect  mask  The value that specifies the bit pattern for write&#8209;protect: 0 to 262143  Details  Bits that are set to one cause the corresponding line to be write&#8209;protected.  The binary equivalent of mask indicates the mask to be set for the I/O port. For example, a mask value of 7 has a binary equivalent of 00000000000111. This mask write&#8209;protects lines 1, 2, and 3.  Example  local writeProtectMask = 15  digio.writeprotect = writeProtectMask  Protects digital I/O lines 1, 2, 3, and 4 (binary 00001111).  Also see  digio.writebit()  digio.writeport()  "},{"id":36,"title":"eventlog.clear()","url":"104218.htm","text":"This function clears the event log.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  eventlog.clear()  Details  This command removes all events from the command log.  Example  eventlog.clear()  Clears the event log.  Also see  None  "},{"id":37,"title":"eventlog.count","url":"104219.htm","text":"This attribute stores the number of events in the event log.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Usage  count = eventlog.count  count  The total number of events in the event log  Details  This attribute stores the total number of events in the event log.  Example  count = eventlog.count  print(count)  Displays the eventlog count.  Also see  None  "},{"id":38,"title":"eventlog.next()","url":"104229.htm","text":"This function reads and returns the oldest unread event message from the event log,which is then removed from the event log.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  eventNumber, message, severity, nodeID, timeSeconds, timeFractional = eventlog.next()   eventNumber, message, severity, nodeID, timeSeconds, timeFractional = eventlog.next(eventType)  eventNumber  The event number  message  A description of the event  severity  The severity of the event  nodeID  The TSP-Link node in which the event occurred  timeSeconds  The seconds portion of the time the event occurred  timeFractional  The fractional seconds portion of the time when the event occurred  eventType  Limits the return to specific event log types  Details  When an event occurs on the instrument, it is placed in the event log in a first-in, first-out (FIFO) queue. This command retrieves the oldest unread event from the event log and removes it from the event log.  If there are no entries in the event log, the following is returned:  0 No error 0 0 0 0  To read multiple events, execute this command multiple times.  If the event type is not defined, an event of any type is returned.  Example  print(eventlog.next())  Returns the following if no event log entries exist:  0 No error 0 0 0 0  Also see  None  "},{"id":39,"title":"exit()","url":"116242.htm","text":"This function stops a script that is presently running  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  exit()  Details  Terminates script execution when called from a script that is being executed.  This command does not wait for overlapped commands to complete before terminating script execution. If overlapped commands are required to finish, use the waitcomplete() function before calling exit().  Example  print(\"First Line\")  exit()  print(\"Third Line\")  The script exits before executing the third line of the code.  Output:  First Line  Also see  waitcomplete()  "},{"id":40,"title":"fileVar:close()","url":"14772.htm","text":"This function closes the file that is represented by the fileVar variable.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  fileVar:close()  fileVar  The file descriptor variable to close  Details  This command is equivalent to io.close(fileVar).  Note that files are automatically closed when the file descriptors are garbage collected.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  print(\"\\n*** fileVar:close\")  do  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  end  myfile, myfile_err, myfile_errnum = io.open(fileName, \"r\")  myfile:close()  os.remove(fileName)  Opens file myfile.txt for writing. If no errors were found while opening, writes Removing file and closes the file.  Also see  fileVar:flush()  fileVar:read()  fileVar:seek()  fileVar:write()  io.close()  io.open()  "},{"id":41,"title":"fileVar:flush()","url":"14786.htm","text":"This function writes buffered data to a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  fileVar:flush()  fileVar  The file descriptor variable to flush  Details  The fileVar:write() or io.write() functions buffer data, which may not be written immediately to the USB flash drive. Use fileVar:flush() to flush this data. Using this function removes the need to close a file after writing to it, allowing the file to be left open to write more data. Data may be lost if the file is not closed or flushed before a script ends.   If there is going to be a time delay before more data is written to a file, and you want to keep the file open, flush the file after you write to it to prevent loss of data.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** io.read\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\\n\")  myfile:flush()  myfile:close()  do  fileHandle = io.input(fileName)  value = io.read(\"*a\")  print(value)  end  fileHandle:close()  print(errorqueue.next())  Writes data to a USB flash drive.  Also see  fileVar:write()  io.open()  io.write()  "},{"id":42,"title":"fileVar:read()","url":"14787.htm","text":"This function reads data from a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  data1 = fileVar:read()\t  data1 = fileVar:read(format1)  data1, data2 = fileVar:read(\"format1\", \"format2\")  data1, ..., datan = fileVar:read(\"format1\", ..., \"formatn\")  data1  First data read from the file  data2  Second data read from the file  datan  Last data read from the file  fileVar  The descriptor of the file to be read  format1  A string or number indicating the first type of data to be read  format2  A string or number indicating the second type of data to be read  formatn  A string or number indicating the last type of data to be read  ...  One or more entries (or values) separated by commas  Details  The format parameters may be any of the following:  \"*n\": Returns a number.  \"*a\": Returns the whole file, starting at the current position (returns an empty string if the current file position is at the end of the file).  \"*l\": Returns the next line, skipping the end of line; returns nil if the current file position is at the end of file.  n: Returns a string with up to n characters; returns an empty string if n is zero; returns nil if the current file position is at the end of file.  If no format parameters are provided, the function performs as if the function is passed the value \"*l\".  Any number of format parameters may be passed to this command, each corresponding to a returned data value.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  print(\"fileVar:read\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  myfile, myfile_err, myfile_errnum = io.open(fileName, \"r\")  contents = myfile:read(\"*a\")  print(contents)  end  myfile:close()  os.remove(fileName)  Reads data from the input file.  Also see  fileVar:write()  io.input()  io.open()  "},{"id":43,"title":"fileVar:seek()","url":"14788.htm","text":"This function sets and gets the present position of a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  position, errorMsg = fileVar:seek()  position, errorMsg = fileVar:seek(\"whence\")  position, errorMsg = fileVar:seek(\"whence\", offset)  position  The new file position, measured in bytes from the beginning of the file  errorMsg  A string containing the error message  fileVar  The file descriptor variable  whence  A string indicating the base against which offset is applied; the default is&nbsp;\"cur\"  offset  The intended new position, measured in bytes from a base indicated by whence (default is 0)  Details  The whence parameters may be any of the following:  \"set\": Beginning of file  \"cur\": Current position  \"end\": End of file  If an error is encountered, it is logged to the error queue, and the command returns nil and the error&nbsp;string.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** fileVar:seek\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  myfile, myfile_err, myfile_errnum = io.open(fileName, \"r\")  position = myfile:seek(\"end\", -1)  print(position)  end  myfile:close()  os.remove(fileName)  Get the present position of a file.  Also see  io.open()  None  "},{"id":44,"title":"fileVar:write()","url":"14789.htm","text":"This function writes data to a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  fileVar:write(data)  fileVar:write(data1, data2)  fileVar:write(data1, ..., datan)  fileVar  The file descriptor variable  data  Write all data to the file  data1  The first data to write to the file  data2  The second data to write to the file  datan  The last data to write to the file  ...  One or more entries (or values) separated by commas  Details  This function may buffer data until a flush (fileVar:flush() or io.flush()) or close (fileVar:close() or io.close()) operation is performed.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** fileVar:write\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  do  myfile:write(\"Line 1\")  end  myfile:close()  os.remove(fileName)  Write data to a file.  Also see  fileVar:close()  fileVar:flush()  io.close()  io.flush()  io.open()  "},{"id":45,"title":"firmware.update()","url":"106526.htm","text":"This function updates the instrument with a firmware image.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  firmware.update()  Details  This command updates the firmware and reboots the instrument.  Before issuing this command, the firmware image must be downloaded to the instrument using the flash or endflash keywords. To download the image:  Send the flash keyword.  Send each line of the firmware image .x file each as a separate message.  Send the endflash keyword.  Example  firmware.update()  Updates the instrument firmware and then reboots the instrument.  Also see  None  "},{"id":46,"title":"format.asciiprecision","url":"116244.htm","text":"This attribute sets the precision (number of digits) for all numbers returned in the ASCII format.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Instrument reset<br>Recall setup  Not saved  6  Usage  precision = format.asciiprecision  format.asciiprecision = precision  precision  A number representing the number of digits to be printed for numbers printed with the print(), printbuffer(), and printnumber() functions; must be a number between 1 and 16  Details  This attribute specifies the precision (number of digits) for numeric data printed with the print(), printbuffer(), and printnumber() functions. The format.asciiprecision attribute is only used with the ASCII format. The precision value must be a number from 0 to 16.  Note that the precision is the number of significant digits printed. There is always one digit to the left of the decimal point; be sure to include this digit when setting the precision.  Example  format.asciiprecision = 10  x = 2.54  printnumber(x)  format.asciiprecision = 3  printnumber(x)  Output:  2.54000000000e+00  2.54e+00  Also see  format.byteorder  format.data  print()  printbuffer()  printnumber()  "},{"id":47,"title":"format.byteorder","url":"116245.htm","text":"This attribute sets the binary byte order for the data that is printed using the printnumber() and printbuffer() functions.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Not saved  1(format.LITTLEENDIAN)  Usage  order = format.byteorder  format.byteorder = order  order  Byte order value as follows:  Most significant byte first: 0, format.NORMAL, format.NETWORK, or format.BIGENDIAN  Least significant byte first: 1, format.SWAPPED or format.LITTLEENDIAN  Details  This attribute selects the byte order in which data is written when you are printing data values with the printnumber() and printbuffer() functions. The byte order attribute is only used with the format.SREAL, format.REAL, format.REAL32, and format.REAL64 data formats.  format.NORMAL, format.BIGENDIAN, and format.NETWORK select the same byte order. format.SWAPPED and format.LITTLEENDIAN select the same byte order. Selecting which to use is a matter of preference.  Select the format.SWAPPED or format.LITTLEENDIAN byte order when sending data to a computer with a Microsoft Windows operating system.  Example  x = 1.23  format.data = format.REAL32  format.byteorder = format.LITTLEENDIAN  printnumber(x)  format.byteorder = format.BIGENDIAN  printnumber(x)  The output depends on the terminal program you use, but it looks something like:  #0¤p??  #0??p¤  Also see  format.asciiprecision  format.data  printbuffer()  printnumber()  "},{"id":48,"title":"format.data","url":"116246.htm","text":"This attribute sets the data format for data that is printed using the printnumber() and printbuffer() functions.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Instrument reset<br>Recall setup  Not saved  1 (format.ASCII)  Usage  value = format.data  format.data = value  value  The format to use for data, set to one of the following values:  ASCII format: 1 or format.ASCII  Single&#8209;precision IEEE Std 754 binary format: 2, format.SREAL, or format.REAL32  Double&#8209;precision IEEE Std 754 binary format: 3, format.REAL, format.REAL64, or format.DREAL  Details  The precision of numeric values can be controlled with the format.asciiprecision attribute. The byte order of format.SREAL, format.REAL, format.REAL32, and format.REAL64 can be selected with the format.byteorder attribute.  REAL32 and SREAL select the same single precision format. REAL and REAL64 select the same double&#8209;precision format. They are alternative identifiers. Selecting which to use is a matter of preference.  The IEEE Std 754 binary formats use four bytes for single&#8209;precision values and eight bytes for double&#8209;precision values.  When data is written with any of the binary formats, the response message starts with #0 and ends with a new line. When data is written with the ASCII format, elements are separated with a comma and space.  @Binary formats are not intended to be interpreted by humans.  Example  format.asciiprecision = 10  x = 3.14159265  format.data = format.ASCII  printnumber(x)  format.data = format.REAL64  printnumber(x)  Output a number represented by x in ASCII using a precision of 10, then output the same number in binary using double&#8209;precision format.  Output:  3.141592650e+00  #0ñÔÈSû!   @  Also see  format.asciiprecision  format.byteorder  printbuffer()  printnumber()  "},{"id":49,"title":"fs.chdir()","url":"14808.htm","text":"This function sets the current working directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  workingDirectory = fs.chdir(\"path\")  workingDirectory  Returned value containing the working path  path  A string indicating the new working directory path  Details  The new working directory path may be absolute or relative to the current working directory.  An error is logged to the error queue if the given path does not exist.  Example  if fs.is_dir(\"/usb1/temp\") == true then  &nbsp; fs.chdir(\"/usb1/temp\")  &nbsp; testPath = fs.cwd()  &nbsp; print(testPath)  else  &nbsp; testPath = fs.cwd()  &nbsp; print(testPath)  end  Insert a USB flash drive into the front panel of the instrument.  Verify that /usb1/temp is a directory and change it to be the current working directory.  Set the variable for the current working directory to be testPath.  The return should be:  /usb1/temp  If /usb1/temp is not a directory, set the variable for the current working directory to be testPath.  The return is:  /usb1  Also see  None  "},{"id":50,"title":"fs.cwd()","url":"116247.htm","text":"This function returns the absolute path of the current working directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  path = fs.cwd()  path  The absolute path of the current working directory  Example  if fs.is_dir(\"/usb1/temp\") == true then  &nbsp; fs.chdir(\"/usb1/temp\")  &nbsp; testPath = fs.cwd()  &nbsp; print(testPath)  else  &nbsp; testPath = fs.cwd()  &nbsp; print(testPath)  end  Insert a USB flash drive into the front panel of the instrument.  Verify that /usb1/temp is a directory and change it to be the current working directory.  Set the variable for the current working directory to be testPath.  The return should be:  /usb1/temp  If /usb1/temp is not a directory, set the variable for the current working directory to be testPath.  The return is:  /usb1  Also see  None  "},{"id":51,"title":"fs.is_dir()","url":"14811.htm","text":"This function tests whether or not the specified path refers to a directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  status = fs.is_dir(\"path\")  status  Whether or not the given path is a directory: true or false  path  The path of the file system entry to test  Details  The file system path may be absolute or relative to the current working system path.  Example 1  print(\"Is directory: \", fs.is_dir(\"/usb1/\"))  Because /usb1/ is always the root directory of an inserted flash drive, you can use this command to verify that USB flash drive is inserted.  Example 2  if fs.is_dir(\"/usb1/temp\") == false then  &nbsp;&nbsp;&nbsp; fs.mkdir(\"/usb1/temp\")  end  Insert a USB flash drive into the front panel of the instrument.  Check to see if the temp directory exists.  If it does not exist, create a directory named temp.  Also see  fs.is_file()  "},{"id":52,"title":"fs.is_file()","url":"14824.htm","text":"Tests whether the specified path refers to a file (as opposed to a directory).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  status = fs.is_file(\"path\")  status  true if the given path is a file; otherwise, false  path  The path of the file system entry to test  Details  The file system path may be absolute or relative to the current working system path.  Example  rootDirectory = \"/usb1/\"  print(\"Is file: \", fs.is_file(rootDirectory))  Insert a USB flash drive into the front panel of the instrument.  Set rootDirectory to be the USB port.  Check to see if rootDirectory is a file. Because rootDirectory was set up as a directory, the return is false.  Also see  fs.is_dir()  "},{"id":53,"title":"fs.mkdir()","url":"14812.htm","text":"This function creates a directory at the specified path.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  path = fs.mkdir(\"newPath\")  path  The returned path of the new directory  newPath  Location (path) of where to create the new directory  Details  The directory path may be absolute or relative to the current working directory.  An error is logged to the error queue if the parent folder of the new directory does not exist, or if a file system entry already exists at the given path.  Example  if fs.is_dir(\"/usb1/temp\") == false then  &nbsp;&nbsp;&nbsp; fs.mkdir(\"/usb1/temp\")  end  Insert a USB flash drive into the front panel of the instrument.  Check to see if the temp directory exists.  If it does not exist, create a directory named temp.  Also see  fs.rmdir()  "},{"id":54,"title":"fs.readdir()","url":"116248.htm","text":"This function returns a list of the file system entries in the directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  files = fs.readdir(\"path\")  files  A table containing the names of all the file system entries in the specified directory  path  The directory path  Details  The directory path may be absolute or relative to the current working directory.  This command is nonrecursive. For example, entries in subfolders are not returned.  An error is logged to the error queue if the given path does not exist or does not represent a directory.  Example  rootDirectory = \"/usb1/\"  entries = fs.readdir(rootDirectory)  count = table.getn(entries)  print(\"Found a total of \"..count..\" files and directories\")  for i = 1, count do     print(entries[i])  end  Insert a USB flash drive into the front panel of the instrument.  Set rootDirectory to be the USB port.  Set entries as the variable for the file system entries in rootDirectory.  Return the number of files and directories in the directory.  Also see  None  "},{"id":55,"title":"fs.rmdir()","url":"14815.htm","text":"This function removes a directory from the file system.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  fs.rmdir(\"path\")  path  The path of the directory to remove  Details  This path may be absolute or relative to the current working directory.  An error is logged to the error queue if the given path does not exist or does not represent a directory. An error is also logged if the directory is not empty.  Example  rootDirectory = \"/usb1/\"  tempDirectoryName = \"temp\"  if fs.is_dir(rootDirectory..tempDirectoryName) == false then  &nbsp;&nbsp;&nbsp; fs.mkdir(rootDirectory..tempDirectoryName)  end  fs.rmdir(rootDirectory..tempDirectoryName)  Insert a USB flash drive into the front panel of the instrument.  Set rootDirectory to be the USB port.  Set tempDirectoryName to be equivalent to temp.  Check to see if tempDirectoryName exists.  If it does not exist, create a directory named temp.  Remove the directory.  Also see  fs.mkdir()  "},{"id":56,"title":"gettimezone()","url":"117388.htm","text":"This function retrieves the local time zone.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  timeZone = gettimezone()  timeZone  The local time zone of the instrument  Details  See settimezone() for additional details about the time zone format and a description of the fields.  timeZone can be in either of the following formats:  If one parameter was used with settimezone(), the format used is:<br>GMThh:mm:ss  If four parameters were used with settimezone(), the format used is:<br>GMThh:mm:ssGMThh:mm:ss,Mmm.w.dw/hh:mm:ss,Mmm.w.dw/hh:mm:ss  Example  timezone = gettimezone()  Reads the value of the local time zone.  Also see  settimezone()  "},{"id":57,"title":"io.close()","url":"116249.htm","text":"This function closes a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes (see Details)  Usage  io.close()  io.close(file)  file  The descriptor of the file to close  Details  If a file is not specified, the default output file closes.  Only io.close(), used without specifying a parameter, can be accessed from a remote node.  Example  testFile, testError = io.open(\"testfile.txt\", \"w\")  if nil == testError then     testFile:write(\"This is my test file\")     io.close(testFile)  end  Opens file testfile.txt for writing. If no errors were found while opening, writes \"This is my test file\" and closes the file.  Also see  io.open()  "},{"id":58,"title":"io.flush()","url":"14870.htm","text":"This function saves buffered data to a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  io.flush()  Details  You must use the io.flush() or io.close() functions to write data to the file system.  @Data is not automatically written to a file when you use the io.write() function. The io.write() function buffers data; it may not be written to the USB flash drive immediately. Use the io.flush() function to immediately write buffered data to the drive.  This function only flushes the default output file.  Using this command removes the need to close a file after writing to it and allows it to be left open to write more data. Data may be lost if the file is not closed or flushed before an application ends. To prevent the loss of data if there is going to be a time delay before more data is written (and when you want to keep the file open and not close it), flush the file after writing to it.  Also see  fileVar:flush()  fileVar:write()  io.write()  "},{"id":59,"title":"io.input()","url":"66560.htm","text":"This function assigns a previously opened file, or opens a new file, as the default input file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes (see Details)  Usage  fileVar = io.input()  fileVar = io.input(\"newfile\")  fileVar  The descriptor of the input file or an error message (if the function fails)  newfile  A string representing the path of a file to open as the default input file, or the file descriptor of an open file to use as the default input file  Details  The newfile path may be absolute or relative to the current working directory.  When using this function from a remote TSP-LinkTM node, this command does not accept a file descriptor and does not return a value.  If the function fails, an error message is returned.  Also see  io.open()  io.output()  "},{"id":60,"title":"io.open()","url":"14872.htm","text":"This function opens a file for later reference.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  fileVar, errorMsg = io.open(\"path\")  fileVar, errorMsg = io.open(\"path\", \"mode\")  fileVar  The descriptor of the opened file  errorMsg  Indicates whether an error was encountered while processing the function  path  The path of the file to open  mode  A string representing the intended access mode (\"r\" = read, \"w\"&nbsp;=&nbsp;write, and \"a\" = append)  Details  The path to the file to open may be absolute or relative to the current working directory. If you successfully open the file, errorMsg is nil and fileVar has the descriptor used to access the file.  If an error is encountered, the command returns nil for fileVar and an error string.  Example  testFile, testError = io.open(\"testfile.txt\", \"w\")  if testError == nil then     testFile:write(\"This is my test file\")     io.close(testFile)  end  Opens file testfile.txt for writing. If no errors were found while opening, writes \"This is my test file\" and closes the file.  Also see  io.close()  "},{"id":61,"title":"io.output()","url":"14873.htm","text":"This function assigns a previously opened file or opens a new file as the default output file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes (see Details)  Usage  fileVar = io.output()  fileVar = io.output(\"newfile\")  fileVar  The descriptor of the output file or an error message (if the function fails)  newfile  A file descriptor to assign (or the path of a file to open) as the default output&nbsp;file  Details  The path of the file to open may be absolute or relative to the current working directory.  When accessed from a remote node using the TSP-Link network, this command does not accept a file descriptor parameter and does not return a value.  If the function fails, an error message is returned.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** io.output\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  fileHandle = io.output(fileName)  print(fileHandle)  end  io.close(fileHandle)  print(fileHandle)  os.remove(fileName)  Assign the file to be the default output file.  Also see  io.input()  io.open()  "},{"id":62,"title":"io.read()","url":"14874.htm","text":"This function reads data from the default input file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data1 = io.read()  data1 = io.read(\"format1\")  data1, data2 = io.read(\"format1\", \"format2\")  data1, ..., dataN = io.read(\"format1\", ..., \"formatN\")  data1  The data read from the file  data2  The data read from the file  dataN  The data read from the file; the number of return values matches the number of format values given  format1  A string or number indicating the type of data to be read  format2  A string or number indicating the type of data to be read  formatN  A string or number indicating the type of data to be read  ...  One or more entries (or values) separated by commas  Details  The format parameters may be any of the following:  Format parameter  Description  \"*n\"  Returns a number  \"*a\"  Returns the whole file, starting at the present position; returns an empty string if it is at the end of file  \"*l\"  Default setting; returns the next line, skipping the end of line; returns nil if the present file position is at the end of file  N  Returns a string with up to N characters; returns an empty string if N is zero (0); returns nil if the present file position is at the end of file  Any number of format parameters may be passed to this command, each corresponding to a returned data value.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  -- io.read  print(\"\\n*** io.read\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\\n\")  myfile:flush()  myfile:close()  do  fileHandle = io.input(fileName)  value = io.read(\"*a\")  print(value)  end  fileHandle:close()  print(errorqueue.next())  Read data from the default input file.  Also see  None  "},{"id":63,"title":"io.type()","url":"14875.htm","text":"This function checks whether or not a given object is a file handle.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  type = io.type(obj)  type  Indicates whether the object is an open file handle  obj  Object to check  Details  Returns the string \"file\" if the object is an open file handle. If it is not an open file handle, nil is returned.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** io.type\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  fileHandle = io.output(fileName)  state = io.type(fileHandle)  print(state)  end  io.close(fileHandle)  local state = io.type(fileHandle)  print(state)  os.remove(fileName)  Check whether or not fileName is a file handle.  Also see  io.open()  "},{"id":64,"title":"io.write()","url":"14877.htm","text":"This function writes data to the default output file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  io.write()  io.write(data1)  io.write(data1, data2)  io.write(data1, ..., dataN)  data1  The data to be written  data2  The data to be written  dataN  The data to be written  ...  One or more values separated by commas  Details  All data parameters must be either strings or numbers.  @Data is not immediately written to a file when you use the io.write() function. The io.write() function buffers data; it may not be written to the USB flash drive immediately. Use the io.flush() function to immediately write buffered data to the drive.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** io.write\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  fileHandle = io.output(fileName)  io.write(\"Line 2\")  end  io.close(fileHandle)  os.remove(fileName)  Writes data to the default output file.  Also see  io.flush()  "},{"id":65,"title":"lan.applysettings()","url":"14890.htm","text":"This function re-initializes the LAN interface with new settings.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.applysettings()  Details  Disconnects all existing LAN connections to the instrument and re-initializes the LAN with the present configuration&nbsp;settings.  This function initiates a background operation. LAN configuration can be a lengthy operation. Although the function returns immediately, the LAN initialization continues to run in the background.  Even though the LAN configuration settings may not have changed since the LAN was last connected, new settings may take effect due to the dynamic nature of dynamic host configuration protocol (DHCP) or dynamic link local addressing (DLLA) configuration.  Re-initialization takes effect even if the configuration has not changed since the last time the instrument connected to the&nbsp;LAN.  Example  lan.applysettings()  Re-initialize the LAN interface with new settings.  Also see  None  "},{"id":66,"title":"lan.autoconnect","url":"116901.htm","text":"This attribute is used to enable or disable link monitoring.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  1 (lan.ENABLE)  Usage  state = lan.autoconnect  lan.autoconnect = state  state  LAN link monitoring state:  Enables automatic link reconnection and monitoring: 1 or lan.ENABLE  Disables automatic link reconnection and monitoring: 0 or lan.DISABLE  Details  This attribute sets the LAN link monitoring and automatic connection state.  When this is set to lan.ENABLE, all connections are closed if the link to the LAN is lost for more than the time specified by lan.linktimeout.  Set this attribute to lan.ENABLE to automatically reset the LAN connection after the LAN link is established.  Example  lan.autoconnect = lan.ENABLE  Enable LAN link monitoring.  Also see  lan.linktimeout  lan.restoredefaults()  "},{"id":67,"title":"lan.config.dns.address[N]","url":"116250.htm","text":"This command configures the DNS server IP addresses.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"0.0.0.0\"  Usage  dnsAddress = lan.config.dns.address[N]  lan.config.dns.address[N] = \"dnsAddress\"  dnsAddress  DNS server IP address  N  Entry index: 1 or 2  Details  This attribute is an array of Domain Name System (DNS) server addresses. These addresses take priority for DNS lookups and are consulted before any server addresses that are obtained using DHCP. This allows local DNS servers to be specified that take priority over DHCP&#8209;configured global DNS servers.  You can specify up to two addresses. The address specified by 1 is consulted first for DNS lookups. dnsAddress must be a string specifying the IP address of the DNS server in dotted decimal notation.  Unused entries are returned as 0.0.0.0 when read. To disable an entry, set its value to 0.0.0.0 or the empty string&nbsp;\"\".  Although only two addresses may be manually specified here, the instrument uses up to three DNS server addresses. If two are specified here, only one that is given by a DHCP server is used. If no entries are specified here, up to three addresses that are given by a DHCP server are used.  Example  dnsaddress = \"164.109.48.173\"  lan.config.dns.address[1] = dnsaddress  Set the DNS address 1 to 164.109.48.173.  Also see  lan.config.dns.domain  lan.config.dns.dynamic  lan.config.dns.hostname  lan.config.dns.verify  lan.restoredefaults()  "},{"id":68,"title":"lan.config.dns.domain","url":"116251.htm","text":"This attribute configures the dynamic DNS domain.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"\"  Usage  domain = lan.config.dns.domain  lan.config.dns.domain = \"domain\"  domain  Dynamic DNS registration domain; a string of 255 characters or less  Details  This attribute holds the domain to request during dynamic DNS registration. Dynamic DNS registration works with DHCP to register the domain specified in this attribute with the DNS server.  The length of the fully qualified host name (combined length of the domain and host name with separator characters) must be less than or equal to 255 characters. Although up to 255 characters are allowed, you must make sure the combined length is also no more than 255 characters.  Example  print(lan.config.dns.domain)  Outputs the present dynamic DNS domain. For example, if the domain is Matrix, the response is:  Matrix  Also see  lan.config.dns.dynamic  lan.config.dns.hostname  lan.config.dns.verify  lan.restoredefaults()  "},{"id":69,"title":"lan.config.dns.dynamic","url":"116252.htm","text":"Enables or disables the dynamic DNS registration.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  1 (lan.ENABLE)  Usage  state = lan.config.dns.dynamic  lan.config.dns.dynamic = state  state  The dynamic DNS registration state; it may be one of the following values:  Enabled: 1 or lan.ENABLE  Disabled: 0 or lan.DISABLE  Details  Dynamic DNS registration works with DHCP to register the host name with the DNS server. The host name is specified in the lan.config.dns.hostname&nbsp;attribute.  Example  print(lan.config.dns.dynamic)  Outputs the dynamic registration state.  If dynamic DNS registration is enabled, the response is:  1.0000000e+00  Also see  lan.config.dns.hostname  lan.restoredefaults()  "},{"id":70,"title":"lan.config.dns.hostname","url":"116253.htm","text":"This attribute defines the dynamic DNS host name.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  Instrument specific (see Details)  Usage  hostName = lan.config.dns.hostname  lan.config.dns.hostname = \"hostName\"  hostName  The host name to use for dynamic DNS registration; the host name must be a string of  63 characters or less  start with a letter  end with a letter or digit  contain only letters, digits, and hyphens  Details  This attribute holds the host name to request during dynamic DNS registration. Dynamic DNS registration works with DHCP to register the host name specified in this attribute with the DNS&nbsp;server.  The factory default value for hostName is \"xxxxxx-#######\"), where xxxxx is the instrument model number and ####### is the instrument serial number. Note that a hyphen separates the characters of hostName.  The length of the fully qualified host name (combined length of the domain and host name with separator characters) must be less than or equal to 255 characters. Although up to 63 characters can be entered here, you must make sure the combined length is no more than 255 characters.  Setting this attribute to an empty string (in other words, setting this attribute to a string of length zero or a string that consists entirely of whitespace characters) reverts the host name to the factory default value.  Example  print(lan.config.dns.hostname)  Outputs the present dynamic DNS host name. For example:  MP5103-5555555  Also see  lan.config.dns.domain  lan.config.dns.dynamic  lan.restoredefaults()  "},{"id":71,"title":"lan.config.dns.verify","url":"116254.htm","text":"This attribute defines the DNS host name verification state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  1 (lan.ENABLE)  Usage  state = lan.config.dns.verify  lan.config.dns.verify = state  state  DNS hostname verification state:  DNS host name verification enabled: 1 or lan.ENABLE  DNS host name verification disabled: 0 or lan.DISABLE  Details  When this is enabled, the instrument performs DNS lookups to verify that the DNS host name matches the value specified by lan.config.dns.hostname.  Example  print(lan.config.dns.verify)  Outputs the present DNS host name verification state.  If it is enabled, the output is:  1.0000000e+00  Also see  lan.config.dns.hostname  lan.restoredefaults()  "},{"id":72,"title":"lan.config.gateway","url":"116255.htm","text":"This attribute contains the LAN default gateway address.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"0.0.0.0\"  Usage  gatewayAddress = lan.config.gateway  lan.config.gateway = \"gatewayAddress\"  gatewayAddress  LAN default gateway address; must be a string specifying the default IP address of the gateway in dotted decimal notation  Details  This attribute specifies the default gateway IP address to use when manual or DLLA configuration methods are used to configure the LAN. If DHCP is enabled, this setting is ignored.  This attribute does not indicate the actual setting that is presently in effect. Use the lan.status.gateway attribute to determine the present operating state of the&nbsp;LAN.  The IP address must be formatted in four groups of numbers, each separated by a&nbsp;decimal.  Example  print(lan.config.gateway)  Outputs the gateway address. For example, you might see the output:  192.168.0.1  Also see  lan.restoredefaults()  lan.status.gateway  "},{"id":73,"title":"lan.config.hislip.enable","url":"117275.htm","text":"This command is used to enable or disable the mainframe HiSLIP port.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults<br>lan.enable (see Details)  Nonvolatile memory  true (enabled)  Usage  state = lan.config.hislip.enable  lan.config.hislip.enable = state  state  HiSLIP port communications state:  Enable HiSLIP communications: localnode.ENABLE  Disable HiSLIP communications: localnode.DISABLE  Details  When set to localnode.ENABLE, this command enables communications through the HiSLIP port. When this command is set to localnode.DISABLE, all HiSLIP communications are disabled.  This command is only available if lan.enable is set to localnode.ENABLE.  Example 1  lan.config.hislip.enable = localnode.ENABLE  Enables HiSLIP port communications.  Also see  lan.enable  "},{"id":74,"title":"lan.config.ipaddress","url":"116256.htm","text":"This command specifies the LAN IP address.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"192.168.0.2\"  Usage  ipAddress = lan.config.ipaddress  lan.config.ipaddress = \"ipAddress\"  ipAddress  LAN IP address; must be a string specifying the IP address in dotted decimal notation  Details  This command specifies the LAN IP address to use when the LAN is configured using the manual configuration method. This setting is ignored when DLLA or DHCP is used.   This attribute does not indicate the actual setting that is presently in effect. Use the lan.status.ipaddress attribute to determine the present operating state of the LAN.  Example  lan.config.ipaddress = \"192.168.0.5\"  Sets the LAN IP address to 192.168.0.5.  Also see  lan.config.method  lan.restoredefaults()  lan.status.ipaddress  "},{"id":75,"title":"lan.config.method","url":"116257.htm","text":"This attribute contains the LAN settings configuration method.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  0 (lan.AUTO)  Usage  method = lan.config.method  lan.config.method = method  method  The method for configuring LAN settings; it can be one of the following values:  Selects automatic sequencing of configuration methods: 0 or lan.AUTO  Use only manually specified configuration settings: 1 or lan.MANUAL  Details  This attribute controls how the LAN IP address, subnet mask, default gateway address, and DNS server addresses are&nbsp;determined.  When method is lan.AUTO, the instrument first attempts to configure the LAN settings using dynamic host configuration protocol (DHCP). If DHCP fails, it tries dynamic link local addressing (DLLA). If DLLA fails, it uses the manually specified&nbsp;settings.  When method is lan.MANUAL, only the manually specified settings are used. Neither DHCP nor DLLA are&nbsp;attempted.  Example  print(lan.config.method)  Outputs the present method.  For example:  1.0000000e+00  Also see  lan.restoredefaults()  "},{"id":76,"title":"lan.config.subnetmask","url":"116258.htm","text":"This attribute contains the LAN subnet mask.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"255.255.255.0\"  Usage  mask = lan.config.subnetmask  lan.config.subnetmask = \"mask\"  mask  String that specifies the LAN subnet mask value in dotted decimal notation  Details  This attribute specifies the LAN subnet mask that is used when the manual configuration method is used to configure the LAN. This setting is ignored when DLLA or DHCP is used.  This attribute does not indicate the actual setting presently in effect. Use the lan.status.subnetmask attribute to determine the present operating state of the LAN.  Example  lan.config.subnetmask = \"255.255.255.0\"  Sets the LAN subnet mask to 255.255.255.0.  Also see  lan.restoredefaults()  lan.status.subnetmask  "},{"id":77,"title":"lan.enable","url":"116900.htm","text":"This attribute controls whether or not any communications using the LAN connector are enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  localnode.ENABLE  Usage  state = lan.enable  lan.enable = state  state  LAN connector communications state:  Enable communications through the LAN connector: localnode.ENABLE  Disable communications through the LAN connector: localnode.DISABLE  Details  This is the master LAN control setting. When this is true (enabled), you may individually control DST, HiSLIP, raw socket, and telnet access to the instrument. However, when this is false (disabled), all LAN communications are disabled and this overrides the individual LAN enabled settings.  To disable only certain LAN communications with the instrument, enable this attribute and set the specific LAN communications attribute to false for DST, HiSLIP, raw sockets, or telnet.  Example 1  lan.enable = localnode.ENABLE  Enables LAN communications through the LAN connector on the mainframe.  Also see  lan.status.port.dst  lan.status.port.hislip  lan.status.port.rawsocket  lan.status.port.telnet  "},{"id":78,"title":"lan.identify","url":"117382.htm","text":"This attribute controls the LXI LAN identify state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  localnode.OFF  Usage  identify = lan.identify  lan.identify = identify  identify  LXI identify setting:  The LAN indicator is in identify mode: localnode.ON  The LAN indicator is in normal mode: localnode.OFF  Details  When the LXI LAN identify attribute is set to ON, the LAN indicator on the front panel will flash to indicate which instrument is in the identify mode. When the attribute is set to OFF, the LAN indicator will indicate the LAN connection state as normal (illuminated and not flashing).  Example  lan.identify = localnode.ON  Flashes the LAN indicator on the front panel of the mainframe.  Also see  None  "},{"id":79,"title":"lan.linktimeout","url":"116902.htm","text":"This attribute contains the LAN link timeout period.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  20 (20 s)  Usage  timeout = lan.linktimeout   lan.linktimeout = timeout  timeout  The LAN link monitor time-out period (in seconds)  Details  You must enable the command lan.autoconnect before you can use this attribute.  The timeout value represents the amount of time that passes before the instrument disconnects from the LAN due to the loss of the LAN link integrity.  The LAN interface does not disconnect if the connection to the LAN is reestablished before the timeout value expires.  If the LAN link integrity is not restored before the timeout value expires, the instrument begins to monitor for a new connection.  Example  print(lan.linktimeout)  Outputs the present LAN link timeout setting.  Also see  lan.autoconnect  lan.restoredefaults()  "},{"id":80,"title":"lan.nagle","url":"116905.htm","text":"This attribute controls the state of the LAN Nagle algorithm.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  0 (lan.DISABLE)  Usage  state = lan.nagle  lan.nagle = state  state  The state of the Nagle algorithm:  Enable the LAN Nagle algorithm for TCP&nbsp;connections: 1 or lan.ENABLE  Disable the Nagle algorithm for TCP&nbsp;connections: 0 or lan.DISABLE  Details  The LAN Nagle algorithm increases efficiency by combining small packets before transmission. This attribute enables or disables the use of the LAN Nagle algorithm on transmission control protocol (TCP) connections.  Also see  lan.restoredefaults()  "},{"id":81,"title":"lan.reset()","url":"116906.htm","text":"This function resets the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.reset()  Details  This function resets the LAN interface. It performs the commands lan.restoredefaults() and lan.applysettings().  Also see  lan.applysettings()  lan.restoredefaults()  "},{"id":82,"title":"lan.restoredefaults()","url":"116261.htm","text":"This function resets LAN settings to default values.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.restoredefaults()  Details  The settings that are restored are shown in the following table.  Settings that are restored to default  Attribute  Default setting  lan.autoconnect  lan.ENABLE  lan.config.dns.address[N]  \"0.0.0.0\"  lan.config.dns.domain  \"\"  lan.config.dns.dynamic  lan.ENABLE  lan.config.dns.hostname  \"[model number]-[instrument serial number]\"  lan.config.dns.verify  lan.ENABLE  lan.config.gateway  \"0.0.0.0\"  lan.config.hislip.enable  localnode.ENABLE  lan.config.ipaddress  \"192.168.0.2\"  lan.config.method  lan.AUTO  lan.config.subnetmask  \"255.255.255.0\"  lan.linktimeout  20 (seconds)  lan.nagle  lan.DISABLE  This command is run when lan.reset() is sent.  Example  lan.restoredefaults()  Restores the LAN defaults.  Also see  lan.reset()  "},{"id":83,"title":"lan.status.dns.address[N]","url":"116908.htm","text":"This attribute contains the DNS server IP addresses.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  dnsAddress = lan.status.dns.address[N]  dnsAddress  DNS server IP address  N  Entry index: 1, 2, or 3  Details  This attribute is an array of Domain Name System (DNS) server addresses. The instrument can use up to three&nbsp;addresses.  Unused or disabled entries are returned as \"0.0.0.0\" when read. The dnsAddress returned is a string specifying the IP address of the DNS server in dotted decimal notation.  The value of lan.status.dns.address[1] is referenced first for all DNS lookups. The values of lan.status.dns.address[2] and lan.status.dns.address[3] are referenced second and third, respectively.  Example  print(lan.status.dns.address[1])  Outputs DNS server address 1, for&nbsp;example:  164.109.48.173  Also see  lan.config.dns.address[N]  lan.status.dns.name  "},{"id":84,"title":"lan.status.dns.name","url":"116262.htm","text":"This attribute contains the present DNS fully qualified host name.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  hostName = lan.status.dns.name  hostName  Fully qualified DNS host name that can be used to connect to the instrument  Details  A fully qualified domain name (FQDN) specifies its exact location in the tree hierarchy of the Domain Name System (DNS).  A FQDN is the complete domain name for a specific computer or host on the LAN. The FQDN consists of two parts: The host name and the domain name.  If the DNS host name for an instrument is not found, this attribute stores the IP address in dotted decimal notation.  Example  print(lan.status.dns.name)  Outputs the dynamic DNS host name.  Also see  lan.config.dns.domain  lan.config.dns.hostname  "},{"id":85,"title":"lan.status.gateway","url":"116263.htm","text":"This attribute contains the gateway address presently in use by the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  gatewayAddress = lan.status.gateway  gatewayAddress  LAN gateway address presently in use  Details  The value of gatewayAddress is a string that indicates the IP address of the gateway in dotted decimal notation.  Example  print(lan.status.gateway)  Outputs the gateway address, such as:  192.168.0.1  Also see  lan.config.gateway  "},{"id":86,"title":"lan.status.ipaddress","url":"116264.htm","text":"This attribute contains the LAN IP address presently in use by the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  ipAddress = lan.status.ipaddress  ipAddress  LAN IP address specified in dotted decimal notation  Details  The IP address is a character string that represents the IP address assigned to the instrument.  Example  print(lan.status.ipaddress)  Outputs the LAN IP address currently in use, such as:  192.168.0.2  Also see  lan.config.ipaddress  "},{"id":87,"title":"lan.status.macaddress","url":"117407.htm","text":"This attribute contains the LAN MAC address.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  macAddress = lan.status.macaddress  macAddress  The instrument MAC address  Details  The MAC address is a character string representing the MAC address of the instrument in hexadecimal notation. The string includes colons that separate the address octets (see&nbsp;Example).  Example  print(lan.status.macaddress)  Outputs the MAC address of the instrument, for example:  08:00:11:00:00:57  Also see  None  "},{"id":88,"title":"lan.status.port.dst","url":"117408.htm","text":"This attribute contains the LAN dead socket termination (DST) port number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  port = lan.status.port.dst  port  DST port number, 5030  Details  This attribute holds the TCP port number used to reset all other LAN socket connections.  To reset all LAN connections, open a connection to the DST port number.  Example  print(lan.status.port.dst)  Outputs the LAN DST port number, such&nbsp;as:  5.0300000e+03  Also see  None  "},{"id":89,"title":"lan.status.port.hislip","url":"116909.htm","text":"This attribute contains the HiSLIP connection port number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  port = lan.status.port.hislip  port  HiSLIP port number, 4880  Details  This attribute stores the TCP port number used to connect to the instrument over a HiSLIP interface.  Example  print(lan.status.port.hislip)  Outputs the HiSLIP number, such as:  4.88000e+03  Also see  None  "},{"id":90,"title":"lan.status.port.rawsocket","url":"117409.htm","text":"This attribute contains the LAN raw socket connection port number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  port = lan.status.port.rawsocket  port  Raw socket port number, 5025  Details  The TCP port number is used to connect the instrument and to control the instrument over a raw socket communications interface.  Example  print(lan.status.port.rawsocket)  Outputs the LAN raw socket port number, such&nbsp;as:  5.02500e+03  Also see  None  "},{"id":91,"title":"lan.status.port.telnet","url":"117410.htm","text":"This attribute contains the LAN telnet connection port number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  port = lan.status.port.telnet  port  Telnet port number, 23  Details  This attribute holds the TCP port number used to connect to the instrument to control it over a telnet interface.  Example  print(lan.status.port.telnet)  Get the LAN telnet connection port number.  Output:  2.3000000e+01  Also see  None  "},{"id":92,"title":"lan.status.speed","url":"117411.htm","text":"This attribute contains the LAN speed.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  speed = lan.status.speed  speed  LAN speed in Mbps, 10 or 100  Details  This attribute indicates the transmission speed presently in use by the LAN interface.  Example  print(lan.status.speed)  Outputs the transmission speed of the instrument presently in use, such as:  1.0000000e+02  Also see  None  "},{"id":93,"title":"lan.status.subnetmask","url":"116265.htm","text":"This attribute contains the LAN subnet mask that is presently in use by the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  mask = lan.status.subnetmask  mask  A string specifying the subnet mask in dotted decimal notation  Details  Use this attribute to determine the present operating state of the LAN. This attribute returns the present LAN subnet mask value if the LAN is manually configured or when DLLA or DHCP is used.  Example  print(lan.status.subnetmask)  Outputs the subnet mask of the instrument that is presently in use, such as:  255.255.255.0  Also see  lan.config.subnetmask  "},{"id":94,"title":"localnode.license","url":"117420.htm","text":"This attribute stores the license of the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R\\)  Yes  Not applicable  Not applicable  Not applicable  Usage  license = localnode.license  license  License of the instrument  Details  This attribute stores the license of the instrument.  Example  print(localnode.license)  Returns the license of the instrument.  Also see  localnode.model  localnode.version  "},{"id":95,"title":"localnode.linefreq","url":"106527.htm","text":"This attribute contains the power line frequency detected at power-on.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Nonvolatile memory  60 (60 Hz)  Usage  frequency = localnode.linefreq  frequency  An integer representing the detected power line frequency of the instrument  Details  This attribute holds the value of the power line frequency.  Some modules achieve optimum noise rejection when performing measurements at integer NPLC apertures. The instrument automatically detects the power line frequency at startup and all modules will use this value when calculating apertures in terms of NPLC.  Example  frequency = localnode.linefreq  Reads the power line frequency  Also see  None  "},{"id":96,"title":"localnode.manufacturer","url":"106528.htm","text":"This attribute stores the manufacturer of the instrument  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  manufacturer = localnode.manufacturer  manufacturer  This will always be Tektronix  Details  This attribute stores the manufacturer of the instrument.  Example  print(localnode.model)  Outputs the manufacturer.  Also see  None  "},{"id":97,"title":"localnode.model","url":"106529.htm","text":"This attribute stores the model number of the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  model = localnode.model  model  The model number of the instrument  Details  This attribute stores the model number of the instrument.  Example  print(localnode.model)  Outputs the model number of the local node.  For example, MP5103  Also see  localnode.serialno  "},{"id":98,"title":"localnode.prompts","url":"106530.htm","text":"This attribute determines if the instrument generates prompts in response to command messages.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Power cycle  Not saved  localnode.DISABLE  Usage  prompting = localnode.prompts  localnode.prompts = prompting  prompting  Prompting mode  Generate prompts: localnode.ENABLE  Do not generate prompts: localnode.DISABLE  Details  When the prompting mode is enabled, the instrument generates prompts when the instrument isready to take another command. Because the prompt is not generated until the previous command completes, enabling prompts provides handshaking with the instrument to prevent buffer overruns.  When prompting is enabled, the instrument might generate the following prompts:  TSP>. The standard prompt, which indicates that the previous command completed normally.  TSP?. The prompt that is issued if there are unread entries in the error queue when the prompt is issued. Like the TSP> prompt, it indicates that processing of the command is complete. It does not mean the previous command generated an error, only that there were still errors in the queue when the command processing was complete.  >>>>. The continuation prompt, which occurs when downloading scripts. When downloading scripts, many command messages must be sent as a group. The continuation prompt indicates that the instrument is expecting more messages as part of the present command.  Commands do not generate prompts. The instrument generates prompts in response to command completion.  Prompts are enabled or disabled only for the remote interface that is active when you send the command. For example, if you enable prompts when the LAN connection is active, they are not enabled for a subsequent USB connection.  Example  localnode.ENABLE  Generate prompts.  Also see  localnode.prompts4882  localnote.showerrors  "},{"id":99,"title":"localnode.prompts4882","url":"106531.htm","text":"This attribute enables or disables the generation of prompts for IEEE Std 488.2 common commands.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Power cycle  Not saved  localnode.DISABLE  Usage  prompting = localnode.prompts4882  localnode.prompts4882 = prompting  prompting  Prompting mode  Generate prompts: localnode.ENABLE  Do not generate prompts: localnode.DISABLE  Details  When this attribute is enabled, the IEEE Std 488.2 common commands generate prompts if prompting is enabled with the localnode.prompts attribute. If localnode.prompts4882 is enabled, limit the number of *trg commands sent to a running script to 50 regardless of the setting of the localnode.prompts attribute.  When this attribute is disabled, IEEE Std 488.2 common commands do not generate prompts. When using the *trg command with a script that executes trigger.wait() repeatedly, disable prompting to avoid problems associated with the command interface input queue filling.  Example  localnode.prompts4882 = ENABLE  Enables IEEE Std 288.2 common command prompting.  Also see  localnode.prompts  "},{"id":100,"title":"localnode.serialno","url":"106532.htm","text":"This attribute stores the serial number of the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  serialno = localnode.serialno  serialno  The serial number of the instrument  Details  This attribute stores the serial number of the instrument.  Example  display.settext(localnode.serialno)  Displays the serial number of the instrument  Also see  localnode.model  localnode.version  "},{"id":101,"title":"localnode.showerrors","url":"106533.htm","text":"This attribute sets whether or not the instrument automatically sends generated errors.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Power cycle  Not saved  localnode.DISABLE  Usage  errorMode = localnode.showerrors  localnode.showerrors = errorModee  errorMode  Show error setting:  Send errors: localnode.ENABLE  Do not send errors: localnode.DISABLE  Details  If this attribute is set to 1, the instrument automatically sends any generated errors stored in the error queue, and then clears the queue. Errors are processed after executing a command message (just before issuing a prompt if prompts are enabled).  If this attribute is set to 0, errors are left in the error queue and must be explicitly read or cleared.  When using this command from a remote node, replace localnode with the node reference, for example, node[5].showerrors.  Example  localnode.showerrors = 1  Enables sending of generated errors.  Also see  localnode.prompts  localnote.prompts4882  "},{"id":102,"title":"localnode.version","url":"106534.htm","text":"This attribute stores the firmware revision level.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  version = localnode.version  version  The firmware revision number of the instrument  Details  This attribute stores the firmware revision level of the instrument.  Example  print(localnode.revision)  Outputs the revision level of the instrument  Also see  localnode.manufacturer  localnode.model  localnode.serialno  "},{"id":103,"title":"makegetter()","url":"116266.htm","text":"This function creates a function to get the value of an attribute.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  getter = makegetter(table, \"attributeName\")  getter  The return value  table  Read&#8209;only table where the attribute is located  attributeName  A string representing the name of the attribute  Details  This function is useful for aliasing attributes to improve execution speed. Calling the function created with makegetter() executes more quickly than accessing the attribute directly.  Creating a getter function is only useful if it is going to be called several times. Otherwise, the overhead of creating the getter function outweighs the overhead of accessing the attribute directly.  Example  getlevel = makegetter(source, \"levelv\")  v = getlevel()  Creates a getter function called getlevel.  When getlevel() is called, it returns the value of source.levelv.   Also see  makesetter()  "},{"id":104,"title":"makesetter()","url":"116267.htm","text":"This function creates a function that, when called, sets the value of an attribute.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  setter = makesetter(table, \"attributeName\")  setter  Function that sets the value of the attribute  table  Read-only table where the attribute is located  attributeName  The string name of the attribute  Details  This function is useful for aliasing attributes to improve execution speed. Calling the setter function execute more quickly than accessing the attribute directly.  Creating a setter function is only useful if it is going to be called several times. If you are not calling the setter function several times, it is more efficient to access the attribute directly.   Example  setlevel = makesetter(source, \"levelv\")for v = 1, 10 do     setlevel(v)  end  Creates a setter function called setlevel.  Using setlevel() in the loop sets the value of source.levelv, performing a source sweep.  Also see  makegetter()  "},{"id":105,"title":"node[N].execute()","url":"116268.htm","text":"This function starts test scripts from a remote node.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes (see Details)  Usage  node[N].execute(\"scriptCode\")  N  The node number of this instrument  scriptCode  A string containing the source code  Details  Only the remote master node can use the execute command to run a script on this node. This function does not run test scripts on the master node; only on this node when initiated by the master node.  This function may only be called when the group number of the node is different than the node of the master.  This function does not wait for the script to finish execution.  This command should only be used from a remote master when controlling this instrument over a TSP-LinkTM.  Example 1  node[2].execute(sourcecode)  Runs script code on node 2. The code is in a string variable called sourcecode.  Example 2  node[3].execute(\"x = 5\")  Runs script code in string constant (\"x&nbsp;=&nbsp;5\") to set x equal to 5 on node 3.  Example 3  node[32].execute(TestDut.source)  Runs the test script stored in the variable TestDut (previously stored on the master node) on node 32.  Also see  ****TSP advanced features  tsplink.group  "},{"id":106,"title":"node[N].getglobal()","url":"116269.htm","text":"This function returns the value of a global variable.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  value = node[N].getglobal(\"name\")  value  The value of the variable  N  The node number of this instrument: 1 to 64  name  The global variable name  Details  This function retrieves the value of a global variable from the runtime environment of this node.  Do not use this command to retrieve the value of a global variable from the local node. Instead, access the global variable directly. This command should only be used from a remote master when controlling this instrument over a TSP-Link network.  Example  print(node[5].getglobal(\"test_val\"))  Retrieves and outputs the value of the global variable named test_val from node 5.  Also see  node[N].setglobal()  "},{"id":107,"title":"node[N].setglobal()","url":"116270.htm","text":"This function sets the value of a global variable.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  node[N].setglobal(\"name\", value)  N  The node number of this instrument: 1 to 64  name  The global variable name to set  value  The value to assign to the variable  Details  From a remote node, use this function to assign the given value to a global variable.  Do not use this command to create or set the value of a global variable from the local node (set the global variable directly instead). This command should only be used from a remote master when controlling this instrument over a TSP-Link network.  Example  node[3].setglobal(\"x\", 5)  Sets the global variable x on node 3 to the value of 5.  Also see  node[N].getglobal()  "},{"id":108,"title":"os.clock()","url":"106535.htm","text":"This function returns the number of seconds the instrument has been powered-on.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  seconds = os.clock()  seconds  The number of seconds that have elapsed since the instrument was powered-on  Details  This function returns the total elapsed time since the instrument was powered-on.  Example  t = os.clock()  Returns the elapsed time since the instrument was powered-on.  Also see  os.time()  "},{"id":109,"title":"os.remove()","url":"116271.htm","text":"This function deletes the file or directory with a given name.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  success, msg = os.remove(\"filename\")  success  A success indicator: true or nil  msg  A message value: nil or an error message  filename  A string representing the name of the file or directory to delete  Details  Directories must be empty before using the os.remove() function to delete them.  If this function fails, it returns nil (for success) and an error message string (for msg).  Example  os.remove(\"testFile\")  Deletes the file named testFile.  Also see  os.rename()  "},{"id":110,"title":"os.rename()","url":"116272.htm","text":"This function renames an existing file or directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  success, msg = os.rename(\"oldname\", \"newname\")  success  A success indicator: true or nil  msg  A message value: nil or an error message  oldname  String representing the name of the file or directory to rename  newname  String representing the new name of the file or directory  Details  If this function fails, it returns nil (for success) and an error message string (for msg).  Example  os.rename(\"testFile\", \"exampleFile\")  Changes the name of the existing file testFile to the name exampleFile.  Also see  os.remove()  "},{"id":111,"title":"os.time()","url":"106536.htm","text":"This function generates a time value in UTC time.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  utcSeconds, utcFractional = os.time()  utcSeconds, utcFractional = os.time(timespec)  utcSeconds  Time value in UTC time, which is the number of seconds since midnight January 1, 1970 UTC  utcFractional  When using the first form, this value will hold the fractional seconds; when using the second form, this value will always be 0  timespec  The date and time (year, month, day, hour, and minute)  Details  When used without parameters, this function returns current time as the number of seconds since midnight January 1, 1970. The utcSeconds value will be the elapsed seconds and utcFractional will be the fractional seconds. Both values have the units of seconds. utcSeconds will be an integer and utcFractional will be a value between 0 and 1 but always less than 1.  When using the second form, timespec is a table using the fields listed below.  year  The year (1970 or later)  month  The month (1 to 12)  day  The day (1 to 31)  hour  The hour (0 to 23)  min  The minute (0 to 59)  sec  The second (0 to 59)  If the time (hour, minute, second) fields are not provided, noon on that day will be used. The time specified is given in the local timezone.  Example  print(os.date('%Y-%m-%d %H:%M:%S' , os.time()))  Displays the year, month, day, hour, minute, and second.  Also see  os.clock()  settime()  settimezone()  "},{"id":112,"title":"print()","url":"116273.htm","text":"This function generates a response message.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  print(value1)  print(value1, value2)  print(value1, ..., valueN)  value1  The first argument to output  value2  The second argument to output  valueN  The last argument to output  ...  One or more values separated with commas  Details  TSP-enabled instruments do not have inherent query commands. Like other scripting environments, the print() command and other related print() commands generate output. The print() command creates one response message.  The output from multiple arguments is separated with a tab character.  Numbers are printed using the format.asciiprecision attribute. If you want use Lua formatting, print the return value from the tostring() function.  Example 1  x = 10  print(x)  Example of an output response message:  10  Your output might be different, depending on the ASCII precision setting.  Example 2  x = true  print(tostring(x))  Example of an output response message:  true  Also see  format.asciiprecision  "},{"id":113,"title":"printbuffer()","url":"116274.htm","text":"This function prints data from tables or reading buffer subtables.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  printbuffer(startIndex, endIndex, bufferVar)  printbuffer(startIndex, endIndex, bufferVar, bufferVar2)  printbuffer(startIndex, endIndex, bufferVar, ..., bufferVarN)  startIndex  Beginning index of the buffer to print; this must be more than one and less than endIndex  endIndex  Ending index of the buffer to print; this must be more than startIndex and less than the index of the last entry in the tables  bufferVar  First table or reading buffer subtable to print  bufferVar2  Second table or reading buffer subtable to print  bufferVarN  The last table or reading buffer subtable to print  ...  One or more tables or reading buffer subtables separated with commas  Details  If startIndex ≤ 1, 1 is used as startIndex. If n < endIndex, n is used as endIndex.  When any given reading buffers are used in overlapped commands that have not yet completed (at least to the specified index), this function outputs data as it becomes available.  When there are outstanding overlapped commands to acquire data, n refers to the index that the last entry in the table has after all the measurements have completed.  If you pass a reading buffer instead of a reading buffer subtable, the default subtable for that reading buffer is used.  This command generates a single response message that contains all data. The response message is stored in the output queue.  The format.data attribute controls the format of the response message.  Example  format.data = format.ASCII  format.asciiprecision = 6  printbuffer(1, rb1.n, rb1)  This assumes that rb1 is a valid reading buffer in the runtime environment. The use of rb1.n  (bufferVar.n) indicates that the instrument should output all readings in the reading buffer. In this example, rb1.n equals 10.  Example of output data (rb1.readings):  4.07205e-05, 4.10966e-05, 4.06867e-05, 4.08865e-05, 4.08220e-05, 4.08988e-05, 4.08250e-05, 4.09741e-05, 4.07174e-05, 4.07881e-05  Also see  format.asciiprecision  format.byteorder  format.data  printnumber()  "},{"id":114,"title":"printnumber()","url":"116275.htm","text":"This function prints numbers using the configured format.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  printnumber(value1)  printnumber(value1, value2)  printnumber(value1, ..., valueN)  value1  First value to print in the configured format  value2  Second value to print in the configured format  valueN  Last value to print in the configured format  ...  One or more values separated with commas  Details  There are multiple ways to use this function, depending on how many numbers are to be printed.  This function prints the given numbers using the data format specified by format.data and format.asciiprecision.  Example  format.asciiprecision = 10  x = 2.54  printnumber(x)  format.asciiprecision = 3  printnumber(x, 2.54321, 3.1)  Configure the ASCII precision to 10 and set x to 2.54.  Read the value of x based on these settings.  Change the ASCII precision to 3.  View how the change affects the output of x and some numbers.  Output:  2.54000000000e+00  2.54e+00, 2.54e+00, 3.10e+00  Also see  format.asciiprecision  format.byteorder  format.data  print()  printbuffer()  "},{"id":115,"title":"script.delete()","url":"116842.htm","text":"This function deletes a script from nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  script.delete(\"scriptName\")  scriptName  The string that represents the name of the script  Example  script.delete(\"test8\")  Deletes a user script named test8 from nonvolatile memory.  Also see  ****Delete user scripts from the instrument  scriptVar.save()  "},{"id":116,"title":"script.factory.catalog()","url":"116843.htm","text":"This function returns an iterator that can be used in a for loop to iterate over all the factory scripts.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  for name in script.factory.catalog() do body end  name  String representing the name of the script  body  Code that implements the body of the for loop to process the names in the&nbsp;catalog  Details  Accessing this catalog of scripts allows you to process the factory scripts. The entries are enumerated in no particular order.  Each time the body of the function executes, name takes on the name of one of the factory scripts. The for loop repeats until all scripts have been iterated.  Example  for name in script.factory.catalog() do     print(name)  end  Retrieve the catalog listing for factory scripts.  Also see  None  "},{"id":117,"title":"script.load()","url":"116845.htm","text":"This function creates a script from a specified file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar = script.load(\"file\")  scriptVar = script.load(\"file\", \"name\")  scriptVar  The created script; this is nil if an error is encountered  file  The path and file name of the script file to load  name  The name of the script to be created  Details  The file path may be absolute or relative to the current working directory. The root folder of the USB flash drive has the absolute path \"/usb1/\". Both the forward slash (/) and backslash (\\) are supported as directory separators.  The file to be loaded must start with the loadscript or loadandrunscript keywords, contain the body of the script, and end with the endscript keyword.  Script naming:  If the name parameter is an empty string, or name is absent (or nil) and the script name cannot be extracted from the file, scriptVar is the only handle to the created script.  If name is given (and not nil), any script name embedded in the file is ignored.  If name conflicts with the name of an existing script in the script.user.scripts table, the existing script&#8217;s nameattribute is set to an empty string before it is replaced in the script.user.scripts table by the new script.  If name is absent or nil, the command attempts to extract the name of the script from the file. Any conflict between the extracted name and that of an existing script in the scripts table generates an error. If the script name cannot be extracted, the created script's name attribute is initialized to the empty string and must be set to a valid nonempty string before saving the script to nonvolatile memory.  Example  myTest8 = <br>   script.load(\"/usb1/filename.tsp\", \"myTest8\")  Loads the script myTest8 from the USB flash drive.  Also see  script.new()  "},{"id":118,"title":"script.new()","url":"116846.htm","text":"This function creates a script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar = script.new(\"code\")  scriptVar = script.new(\"code\", \"name\")  scriptVar  The name of the variable that references the script  code  A string containing the body of the script  name  The name of the script  Details  The name parameter is the name that is added to the script.user.scripts table. If name is not provided, an empty string is used, and the script is unnamed. If the name already exists in script.user.scripts, the name attribute of the existing script is set to an empty string before it is replaced by the new script.  The name parameter is used for the instrument front&#8209;panel display. If this parameter is not defined, the script is not available from the front panel.  You must save the new script into nonvolatile memory to retain it when the instrument is turned off.  Example 1  myTest8 = script.new(     \"display.clear() display.settext('Hello&nbsp;from&nbsp;myTest8')\", \"myTest8\")  myTest8()  Creates a new script referenced by the variable myTest8 with the name myTest8.  Runs the script. The instrument displays Hello from myTest8.  Example 2  autoexec = script.new(     \"display.clear() display.settext('Hello&nbsp;from&nbsp;autoexec')\", 'autoexec')  Creates a new autoexec script that clears the display when the instrument is turned on and displays Hello from autoexec.  Also see  ***Create a script using the script.new() command  ***Global variables and the script.user.scripts table  ***Named scripts  script.newautorun()  scriptVar.save()  "},{"id":119,"title":"script.restore()","url":"116848.htm","text":"This function restores a script that was removed from the runtime environment.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  script.restore(name)  name  The name of the script to be restored  Details  This command copies the script from nonvolatile memory into the runtime environment. It also creates a global variable with the same name as the name of the script.  Example  script.restore(\"test9\")  Restores a script named test9 from nonvolatile memory.  Also see  script.delete()  "},{"id":120,"title":"script.user.catalog()","url":"116849.htm","text":"This function returns an iterator that can be used in a for loop to iterate over all the scripts stored in nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  for name in script.user.catalog() do body end  name  String representing the name of the script  body  Code that implements the body of the for loop to process the names in the&nbsp;catalog  Details  This function accesses the catalog of scripts stored in nonvolatile memory, which allows you to process all scripts in nonvolatile memory. The entries are enumerated in no particular order.  Each time the body of the function executes, name takes on the name of one of the scripts stored in nonvolatile memory. The for loop repeats until all scripts have been iterated.  Example  for name in script.user.catalog() do     print(name)  end  Retrieve the catalog listing for user scripts.  Also see  None  "},{"id":121,"title":"scriptVar.autorun","url":"116850.htm","text":"This attribute controls the autorun state of a script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Not applicable  See Details  See Details  Usage  scriptVar.autorun = \"state\"  state = scriptVar.autorun  scriptVar  The name of the variable that references the script  state  String that indicates whether or not the script runs automatically when powered on:  Script runs automatically: yes  Script does not run automatically: no  Details  Autorun scripts run automatically when the instrument is turned on. You can set any number of scripts to autorun.  The run order for autorun scripts is arbitrary, so make sure the run order is not important.  The default value for scriptVar.autorun depends on how the script was loaded. The default is no if the script was loaded with loadscript or script.new(). It is yes for scripts loaded with loadandrunscript or script.newautorun().  @Make sure to save the script in nonvolatile memory after setting the autorun attribute so that the instrument retains the setting.  Example  test5.autorun = \"yes\"  test5.save()  Assume a script named test5 is in the runtime environment.  The next time the instrument is turned on, test5 script automatically loads and runs.  Also see  None  "},{"id":122,"title":"scriptVar.list()","url":"116851.htm","text":"This function generates a script listing.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar.list()  scriptVar  The name of the variable that references the script  Details  This function generates output in the form of a sequence of response messages (one message for each line of the script). It also generates output of the script control messages (loadscript or loadandrunscript and endscript).  Example  test7 = script.new(\"display.clear() display.settext('Hello&nbsp;from&nbsp;my&nbsp;test')\",    \"test7\")  test7()  test7.save()  test7.list()  Creates a script named test7 that displays text on the front panel and lists the script with the following output:  loadscript test7  display.clear() display.settext(\"Hello from my test\")  endscript  Also see  ***Retrieve source code one line at a time  "},{"id":123,"title":"scriptVar.name","url":"116852.htm","text":"This attribute contains the name of a script in the runtime environment.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Not applicable  Not applicable  Not applicable  Usage  scriptVar.name = \"scriptName\"  scriptName = scriptVar.name  scriptVar  Name of the variable that references the script  scriptName  A string that represents the name of the script  Details  When setting the script name, this attribute renames the script that the variable scriptVar references.  This attribute must be either a valid Lua identifier or the empty string. Changing the name of a script changes the index that is used to access the script in the script.user.scripts table. Setting the attribute to an empty string removes the script from the table completely and the script becomes an unnamed script.  As long as there are variables referencing an unnamed script, the script can be accessed through those variables. When all variables that reference an unnamed script are removed, the script is removed from the runtime environment.  If the new name is the same as a name that is already used for another script, the name of the other script is set to an empty string, and that script becomes unnamed.   @Changing the name of a script does not change the name of any variables that reference that script. The variables still reference the script, but the names of the script and variables may not match.  Example  test7 = script.new(\"display.clear() display.settext('Hello&nbsp;from&nbsp;my&nbsp;test')\", \"\")  test7()  print(test7.name)  test7.name = \"test7\"  print(test7.name)<br>  test7.save()  This example calls the script.new() function to create a script with no name, runs the script, names the script test7, and then saves the script in nonvolatile memory.  Also see  ***Rename a script  script.new()  scriptVar.save()  "},{"id":124,"title":"scriptVar.run()","url":"116853.htm","text":"This function runs a script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar.run()  scriptVar()  scriptVar  The name of the variable that references the script  Details  The scriptVar.run() function runs the script referenced by scriptVar. You can also run the script by using scriptVar().  To run a factory script, use script.factory.scripts.scriptName(), replacing scriptName with the name of the factory script.  Example  test8.run()  Runs the script referenced by the variable test8.  Also see  None  "},{"id":125,"title":"scriptVar.save()","url":"116854.htm","text":"This function saves the script to nonvolatile memory or to a USB flash drive.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar.save()  scriptVar.save(\"filename\")  scriptVar  The name of variable that references the script  filename  A string that contains the file name to use when saving the script to a USB&nbsp;flash&nbsp;drive  Details  The scriptVar.save() function saves a script to nonvolatile memory or a USB flash drive. The root folder of the USB flash drive has the absolute path /usb1/.  If no filename is specified (the file name parameter is an empty string), the script is saved to internal nonvolatile memory. If a filename is given, the script is saved to the USB flash drive.  You can add the file extension, but it is not required. The only allowed extension is .tsp (see Example&nbsp;2).  Example 1  test8.save()  Saves the script referenced by the variable test8 to nonvolatile memory.  Example 2  test8.save(\"/usb1/myScript.tsp\")  Saves the script referenced by the variable test8 to a file named myScript.tsp on your USB flash drive.  Also see  Working with scripts  Save a user script  "},{"id":126,"title":"scriptVar.source","url":"116855.htm","text":"This attribute contains the source code of a script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)<br>(see Details)  No  Not applicable  Not saved  Not applicable  Usage  code = scriptVar.source  scriptVar.source = nil  scriptVar  The name of the variable that references the script that contains the source code  code  A string that contains the body of the script  Details  The loadscript or loadandrunscript and endscript keywords are not included in the source&nbsp;code.   The body of the script is a single string with lines separated by the newline character.  The instrument automatically stores the source for all scripts that are loaded on the instrument. To free up memory or to obfuscate the code, assign nil to the source attribute of the script. Although this attribute is writable, it can only be set to the nil value.  Example  test7 = script.new(\"display.clear() display.settext('Hello&nbsp;from&nbsp;my&nbsp;test')\", \"\")  print(test7.source)  This example creates a script called test7 that displays a message on the front panel and retrieves the source code.  Output:  display.clear() display.settext('Hello from my test')  Also see  scriptVar.list()  "},{"id":127,"title":"settime()","url":"106537.htm","text":"This function sets the present time and the real time clock.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  settime(seconds)  settime(seconds, fractional)  seconds  The time in seconds since January 1, 1970, UTC  fractional  The number of fractional seconds  Details  This function sets the date and time of the instrument based on the time parameter (specified in UTC time). UTC time is specified as the number of seconds since Jan 1, 1970, UTC. You can use UTC time from a local time specification, or you can use UTC time from another source (for example, your computer).  Example  systemTime = os.time({year = 2025,  month = 7,  day = 31,  hour = 14,  min = 25})  settime(systemTime)  Sets the mainframe system date to July 31, 2025 at 2:25 pm.  Also see  os.clock()  os.time()  "},{"id":128,"title":"settimezone()","url":"116276.htm","text":"This function sets the local time zone.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  settimezone(offset)  settimezone(\"offset\", \"dstOffset\", \"dstStart\", \"dstEnd\")  offset  String representing offset from UTC  dstOffset  String representing the daylight savings offset from UTC  dstStart  String representing when daylight savings time starts  dstEnd  String representing when daylight savings time ends  Details  You only need to set the time zone if you use the os.time() and os.date() functions.   If only one parameter is given, the same time offset is used throughout the year. If four parameters are given, time is adjusted twice during the year for daylight savings time.  offset and dstOffset are strings of the form \"[+|-]hh[:mm[:ss]]\" that indicate how much time must be added to the local time to get UTC time:  hh is a number between 0 and 23 that represents hours  mm is a number between 0 and 59 that represents minutes  ss is a number between 0 and 59 that represents seconds  The minute, second, +, and − fields are optional.  For example, to set the UTC-5 time zone, you specify the string \"5\", because UTC-5 is 5 hours behind UTC and you must add 5 hours to the local time to determine UTC time. To specify the time zone UTC4, you specify \"-4\", because UTC4 is 4 hours ahead of UTC and 4 hours must be subtracted from the local time to determine UTC.  dstStart and dstEnd are strings of the form \"MM.w.dw/hh[:mm[:ss]]\" that indicate when daylight savings time begins and ends respectively:  MM is a number between 1 and 12 that represents the month  w is a number between 1 and 5 that represents the week in the month  dw is a number between 0 and 6 that represents the day of the week (where 0 is Sunday)  The rest of the fields represent the time of day that the change takes effect:  hh represents hours  mm represents minutes  ss represents seconds  The minutes and seconds fields are optional.  The week of the month and day of the week fields are not specific dates.  Example  settimezone(\"8\", \"1\", \"3.3.0/02\", \"11.2.0/02\")<br>settimezone(offset)  Sets offset to equal +8 hours, +1&nbsp;hour for DST, starts on Mar 14 at 2:00&nbsp;am, ends on Nov 7 at 2:00 am.  Sets local time zone to offset.  Also see  gettimezone()  os.time()  "},{"id":129,"title":"slot.autorestart","url":"116133.htm","text":"This attribute controls whether or not the instrument automatically restarts modules that have been powered-down.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  localnode.DISABLE  Usage  autorestart = slot.autorestart  slot.autorestart = autorestart  autorestart  Automatic restart setting:  Automatically power-on and restart modules: localnode.ENABLE  Do not automatically power-on and restart modules: localnode.DISABLE  Details  This attribute controls whether modules that were powered down due to an abnormal condition (such as excessive power supply temperature) will restart when the condition is resolved.  Example  slot.autorestart = localnode.ENABLE  Enables automatic restart of modules that have been powered down due an abnormal condition.  Also see  slot.autostart  slot.start()  slot.stop()  "},{"id":130,"title":"slot.autostart","url":"115527.htm","text":"This attribute controls whether or not the instrument automatically starts modules that have been inserted.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  localnode.ENABLE  Usage  autostart = slot.autostart  slot.autostart = autostart  autostart  Automatic start setting:  Automatically power on and start modules: localnode.ENABLE  Do not automatically power on and start modules: localnode.DISABLE  Details  The instrument will automatically power up and start modules that are inserted when the mainframe is powered-on as well as modules that are inserted when the instrument is running if this attribute is enabled. The instrument will never automatically power up a module that was stopped by the user.  Example  slot.autostart = localnode.ENABLE  Enables automatic start of modules that have been inserted  Also see  slot.autorestart  slot.start  slot.stop  "},{"id":131,"title":"slot.start()","url":"109732.htm","text":"This function powers-on a module in a specified slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot.start(slot)  slot  Module slot number  Details  This function will power-on the module in the specified slot. This command will not wait for the module to finish starting. Use waitcomplete() to wait for the module to finish starting.  Example  slot.start(1)  Powers-on the module installed in slot 1 of the mainframe.  Also see  slot.autorestart  slot.autostart  slot.stop()  "},{"id":132,"title":"slot.stop()","url":"109733.htm","text":"This function powers-down a module in a specified slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot.stop(slot)  slot  Module slot number  Details  This function will power-down the module in the specified slot. This command can be used to prepare a module for safe removal while keeping the mainframe powered-on.   This command will not wait for the module to finish powering-down. Use waitcomplete() to wait for the module to finish powering-down.  Example  slot.stop(1)  Powers-down the module installed in slot 1.  Also see  slot.autorestart  slot.autostart  slot.start()  "},{"id":133,"title":"status.condition","url":"116003.htm","text":"This attribute stores the status byte condition register.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not saved  Not applicable  Usage  statusByte = status.condition  statusByte  The status byte; a zero (0) indicates no bits set; other values indicate various bit&nbsp;settings  Details  This attribute is used to read the status byte, which is returned as a numeric value. The binary equivalent of the value of this attribute indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B7. For example, if a value of 1.29000e+02 (which is 129) is read as the value of this register, the binary equivalent is 1000&nbsp;0001. This value indicates that bit B0 and bit B7 are set.  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  *  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  The returned value can indicate one or more status events occurred. When an enabled status event occurs, a summary bit is set in this register to indicate the event&nbsp;occurrence.  The individual bits of this register are described in the following table.  Bit  Value and description  B0  Not used.  B1  status.SYSTEM_SUMMARY_BIT  status.SSB  Set summary bit indicates that an enabled system event has occurred.  Bit B1 decimal value: 2  B2  status.ERROR_AVAILABLE  status.EAV  Set summary bit indicates that an error or status message is present in the Error Queue.   Bit B2 decimal value: 4  B3  Not used.  B4  status.MESSAGE_AVAILABLE  status.MAV  Set summary bit indicates that a response message is present in the Output Queue.   Bit B4 decimal value: 16  B5  status.EVENT_SUMMARY_BIT  status.ESB  Set summary bit indicates that an enabled standard event has occurred.   Bit B5 decimal value: 32  B6  status.MASTER_SUMMARY_STATUS  status.MSS  Request Service (RQS) or Master Summary Status (MSS). Depending on how it is used, bit B6 of the status byte register is either the Request for Service (RQS) bit or the Master Summary Status (MSS) bit:  When using the USB serial poll sequence of the MP5103 to obtain the status byte (serial poll byte), B6 is the RQS bit. The set bit indicates that the Request Service (RQS) bit of the status byte (serial poll byte) is set and a service request (SRQ) has occurred.  When using the status.condition register command or the *STB? common command to read the status byte, B6 is the MSS bit. Set bit indicates that an enabled summary bit of the status byte register is set.  Bit B6 decimal value: 64  B7  status.OPERATION_SUMMARY_BIT  status.OSB  Set summary bit indicates that an enabled operation event has occurred.  Bit B7 decimal value: 128  In addition to the above constants, when more than one bit of the register is set, statusByte equals the sum of their decimal weights. For example, if 129 is returned, bits B0 and B7 are set (1 + 128).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Example  statusByte = status.condition  print(statusByte)  Returns statusByte.  Sample output:  1.29000e+02  Converting this output (129) to its binary equivalent yields 1000 0001   Therefore, this output indicates that the set bits of the status byte condition register are presently B0 (MSS) and B7 (OSB).  Also see  ***Status model overview  ****Status byte and service request (SRQ)  "},{"id":134,"title":"status.operation.*","url":"116279.htm","text":"These attributes manage the Operation Status Register set of the status model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  31,769 (all bits set)  Usage  operationRegister = status.operation.condition  operationRegister = status.operation.enable  operationRegister = status.operation.event  operationRegister = status.operation.ntr  operationRegister = status.operation.ptr  status.operation.enable = operationRegister  status.operation.ntr = operationRegister  status.operation.ptr = operationRegister  operationRegister  The status of the operation status register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate specific bit settings  Details  These attributes read or write the Operation Status Register.  Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, if a value of 2.04800e+04 (which is 20,480) is read as the value of the condition register, the binary equivalent is 0101&nbsp;0000&nbsp;0000&nbsp;0000. This value indicates that bit B14 (PROGRAM_RUNNING) and bit B12 (USER) are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  1  0  1  0  0  0  0  0  0  0  0  0  0  0  0  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0 to B5  Not used  B6  status.operation.SSTAT  Set bit indicates that the summary bit from the status.operation.slot.status register is&nbsp;set..  Bit B6 decimal value: 64  B7  status.operation.INT  Set bit indicates that the interlock is engaged.  Bit B7 decimal value: 128  B8  status.operation.HWD  Set bit indicates that the summary bit of the status.operation.slot.presence register is&nbsp;set.  Bit B8 decimal value: 256  B9  status.operation.SLOT  Set bit indicates that the summary bit of the status.operation.slot.summary register is&nbsp;set.  Bit B9 decimal value: 512  B10  status.operation.TRGOVR  Set bit indicates that the summary bit from the status.operation.trigger_overrun register is set.  Bit B10 decimal value: 1,024  B11  status.operation.REM  Set bit indicates that the summary bit of the status.operation.remote register is set.   Bit B11 decimal value: 2,048  B12  status.operation.USER  Set bit indicates that the summary bit from the status.operation.user register is set.  Bit B12 decimal value: 4,096  B13  status.operation.INST  Set bit indicates that the summary bit from the status.operation.instrument register is&nbsp;set.  Bit B13 decimal value: 8,192  B14  status.operation.PROG  Set bit indicates that a command or program is running, as indicated by the summary bit from the status.operation.program register.  Bit B14 decimal value: 16,384  B15  Not used  As an example, to set bit B12 of the Operation Status Enable Register, set status.operation.enable = status.operation.USER.  In addition to the above constants, operationRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal weights. For example, to set bits B12 and B14, set operationRegister to 20,480 (the sum of 4,096 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  operationRegister = status.operation.USER + status.operation.PROG  status.operation.enable = operationRegister  Uses constants to set the USER and PROG bits of the Operation Status Enable Register.  Example 2  -- decimal 20480 = binary 0101 0000 0000 0000  operationRegister = 20480  status.operation.enable = operationRegister  Uses a decimal value to set the USER and PROG bits of the Operation Status Enable Register.  Also see  Operation Status Registers  "},{"id":135,"title":"status.operation.instrument.*","url":"115991.htm","text":"This attribute contains the operation status instrument summary register set.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  28,672 (all bits set)  Usage  operationRegister = status.operation.instrument.condition  operationRegister = status.operation.instrument.enable  operationRegister = status.operation.instrument.event  operationRegister = status.operation.instrument.ntr  operationRegister = status.operation.instrument.ptr  status.operation.instrument.enable = operationRegister  status.operation.instrument.ntr = operationRegister  status.operation.instrument.ptr = operationRegister   operationRegister  The status of the operation event register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the operation status instrument summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, if a value of 2.04800e+04 (which is 20,480) is read as the value of the condition register, the binary equivalent is 0101&nbsp;0000&nbsp;0000&nbsp;0000. This value indicates that bit B1 and bit B10 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  1  0  1  0  0  0  0  0  0  0  0  0  0  0  0  * Least significant bit<br>** Most significant bit<br>  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0 to B11  Not used  Not applicable.  B12  status.operation.instrument.DIGIO  Set bit indicates one or more enabled bits for the operation status digital I/O summary register is set.  Bit B12 decimal value: 4,096  B13  status.operation.instrument.TSPLINK  Set bit indicates one or more enabled bits for the operation status TSP-Link summary register is set.  Bit B13 decimal value: 8,192  B14  status.operation.instrument.LAN  Set bit indicates one or more enabled bits for the operation status LAN summary register is set.  Bit B14 decimal value: 16,384  B15  Not used  Not applicable.  As an example, to set bit B12 of the operation status instrument summary enable register, set status.operation.instrument.enable = status.operation.instrument.DIGIO.  In addition to the above constants, operationRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal weights. For example, to set bits B12 and B14, set operationRegister to 20,480 (which is the sum of 4,096 + 16,384).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example  -- 4096 = binary 0001 0000 0000 0000  operationRegister = 4096  status.operation.instrument.enable = operationRegister  Sets bit B12 of the operation status instrument summary enable register using a decimal value.  Also see  Operation Status Registers  status.operation  Condition register sets of:  • status.operation.instrument.digio.*  • status.operation.instrument.lan.*  "},{"id":136,"title":"status.operation.instrument.digio.*","url":"115992.htm","text":"This attribute contains the operation status digital I/O summary register set.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  1024 (all bits set)  Usage  operationRegister = status.operation.instrument.digio.condition  operationRegister = status.operation.instrument.digio.enable  operationRegister = status.operation.instrument.digio.event  operationRegister = status.operation.instrument.digio.ntr  operationRegister = status.operation.instrument.digio.ptr  status.operation.instrument.digio.enable = operationRegister  status.operation.instrument.digio.ntr = operationRegister  status.operation.instrument.digio.ptr = operationRegister   operationRegister  The status of the operation status digital I/O summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); the only valid value other than 0 is 1024  Details  These attributes are used to read or write to the operation status digital I/O summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0 to B9  Not used  B10  status.operation.instrument.digio.TRGOVR  Set bit indicates an enabled bit in the Operation Status Digital I/O Overrun Register is&nbsp;set.  Bit B10 decimal value: 1,024  Binary value: 0100 0000 0000  B11 to B15  Not used  In addition to the above constant, operationRegister can be set to the decimal value of the bit to set.  Example 1  status.operation.instrument.digio.enable = status.operation.instrument.digio.TRGOVR  Uses a constant to set the TRGOVR bit of the operation status digital I/O summary enable register.  Example 2  status.operation.instrument.digio.enable = 1024  Uses the decimal value to set the TRGOVR bit of the operation status digital I/O summary enable register.  Also see  Operation Status Registers  status.operation.instrument.digio.trigger_overrun.*  "},{"id":137,"title":"status.operation.instrument.digio.trigger_overrun.*","url":"115994.htm","text":"This attribute contains the operation status digital I/O overrun register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,766 (All bits set)  Usage  operationRegister = status.operation.instrument.digio.trigger_overrun.condition  operationRegister = status.operation.instrument.digio.trigger_overrun.enable  operationRegister = status.operation.instrument.digio.trigger_overrun.event  operationRegister = status.operation.instrument.digio.trigger_overrun.ntr  operationRegister = status.operation.instrument.digio.trigger_overrun.ptr  status.operation.instrument.digio.trigger_overrun.enable = operationRegister  status.operation.instrument.digio.trigger_overrun.ntr = operationRegister  status.operation.instrument.digio.trigger_overrun.ptr = operationRegister  operationRegister  The status of the operation status digio I/O overrun register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the operation status digital I/O overrun registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.For example, if a value of 1.02600e+03 (which is 1026) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0100&nbsp;0000&nbsp;0010. This value indicates that bit B1 and bit B10 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  0  * Least significant bit<br>** Most significant bit  A set bit indicates that the specified digital I/O line generated an action overrun when it was triggered to generate an output trigger.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.operation.instrument.digio.trigger_overrun.EXTENSION_BIT<br>status.operation.instrument.digio.trigger_overrun.EXT  1  B1  status.operation.instrument.digio.trigger_overrun.LINE1  2  B2  status.operation.instrument.digio.trigger_overrun.LINE2  4  B3  status.operation.instrument.digio.trigger_overrun.LINE3  8  B4  status.operation.instrument.digio.trigger_overrun.LINE4  16  B5  status.operation.instrument.digio.trigger_overrun.LINE5  32  B6  status.operation.instrument.digio.trigger_overrun.LINE6  64  B7  status.operation.instrument.digio.trigger_overrun.LINE7  128  B8  status.operation.instrument.digio.trigger_overrun.LINE8  256  B9  status.operation.instrument.digio.trigger_overrun.LINE9  512  B10  status.operation.instrument.digio.trigger_overrun.LINE10  1,024  B11  status.operation.instrument.digio.trigger_overrun.LINE11  2,048  B12  status.operation.instrument.digio.trigger_overrun.LINE12  4,096  B13  status.operation.instrument.digio.trigger_overrun.LINE13  8,192  B14  status.operation.instrument.digio.trigger_overrun.LINE14  16,384  B15  Not used  Not applicable  As an example, to set bit B1 of the operation status digital I/O overrun enable register, set status.operation.instrument.digio.trigger_overrun.enable = status.operation.instrument.digio.trigger_overrun.LINE1.  In addition to the above constants, operationRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal values. For example, to set bits B1 and B10, set operationRegister to 1,026 (which is the sum of 2 + 1,024).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  operationRegister = status.operation.instrument.digio.trigger_overrun.LINE1 +     status.operation.instrument.digio.trigger_overrun.LINE10  status.operation.instrument.digio.trigger_overrun.enable = operationRegister  Uses constants to set bit B1 and bit B10 of the operation status digital I/O overrun enable register.  Example 2  operationRegister = 1026  status.operation.instrument.digio.trigger_overrun.enable = operationRegister  Uses the decimal value to set bit B1 and bit B10 of the operation status digital I/O overrun enable register.  Also see  ***Operation Status Registers  status.operation.instrument.digio.*  status.operation.instrument.digio.trigger_overrun2.*  status.operation.trigger_overrun.*  "},{"id":138,"title":"status.operation.instrument.digio.trigger_overrun2.*","url":"115986.htm","text":"This attribute contains the operation status digital I/O overrun register set for lines 15 through 18.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  30 (all bits set)  Usage  operationRegister = status.operation.instrument.digio.trigger_overrun2.condition  operationRegister = status.operation.instrument.digio.trigger_overrun2.enable  operationRegister = status.operation.instrument.digio.trigger_overrun2.event  operationRegister = status.operation.instrument.digio.trigger_overrun2.ntr  operationRegister = status.operation.instrument.digio.trigger_overrun2.ptr  status.operation.instrument.digio.trigger_overrun2.enable = operationRegister  status.operation.instrument.digio.trigger_overrun2.ntr = operationRegister  status.operation.instrument.digio.trigger_overrun.ptr = operationRegister  operationRegister  The status of the operation status digio I/O overrun 2 register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the operation status digital I/O overrun 2 registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B4. For example, if a value of 10 is read as the value of the condition register, the binary equivalent is 1010. This value indicates that bit B1 and bit B4 are set.  B4  B3  B2  B1  B0  >  >  >  >  *  1  0  0  1  0  * Least significant bit  A set bit indicates that the specified digital I/O line generated an action overrun when it was triggered to generate an output trigger.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  Not used  Not applicable  B1  status.operation.instrument.digio.trigger_overrun2.LINE15  2  B2  status.operation.instrument.digio.trigger_overrun2.LINE16  4  B3  status.operation.instrument.digio.trigger_overrun2.LINE17  8  B4  status.operation.instrument.digio.trigger_overrun2.LINE18  16  B5 to B15  Not used  Not applicable  As an example, to set bit B1 of the operation status digital I/O overrun enable register 2, set status.operation.instrument.digio.trigger_overrun2.enable = status.operation.instrument.digio.trigger_overrun2.LINE15.  In addition to the above constants, operationRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal values. For example, to set bits B1 and B4, set operationRegister to 18 (which is the sum of 2 + 16).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  operationRegister = status.operation.instrument.digio.trigger_overrun2.LINE15 +     status.operation.instrument.digio.trigger_overrun2.LINE17  status.operation.instrument.digio.trigger_overrun2.enable = operationRegister  Uses constants to set bit B1 and bit B3 of the operation status digital I/O overrun enable register 2.  Example 2  operationRegister = 18  status.operation.instrument.digio.trigger_overrun.enable = operationRegister  Uses the decimal value to set bit B1 and bit B4 of the operation status digital I/O overrun enable register.  Also see  Operation Status Registers  status.operation.instrument.digio.*  "},{"id":139,"title":"status.operation.instrument.lan.*","url":"115997.htm","text":"This attribute contains the operation status LAN summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  3 (all bits set)  Usage  operationRegister = status.operation.instrument.lan.condition  operationRegister = status.operation.instrument.lan.enable  operationRegister = status.operation.instrument.lan.event  operationRegister = status.operation.instrument.lan.ntr  operationRegister = status.operation.instrument.lan.ptr  status.operation.instrument.lan.enable = operationRegister  status.operation.instrument.lan.ntr = operationRegister  status.operation.instrument.lan.ptr = operationRegister   operationRegister  The status of the operation status LAN summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Details  These attributes are used to read or write to the operation status LAN summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, if a value of .00300e+03 (which is 3) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;0000&nbsp;0011. This value indicates that bit B0 and bit B1 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  * Least significant bit<br>** Most significant bit<br>  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  status.operation.instrument.lan.CON  Set bit indicates that the LAN cable is connected and a link has been detected.  Bit B0 decimal value: 1  B1  status.operation.instrument.lan.CONF  Set bit indicates the LAN is performing its configuration sequence.  Bit B1 decimal value: 2  B2 to B15  Not used  As an example, to set bit B0 of the operation status LAN summary enable register, set status.operation.instrument.lan.enable = status.operation.instrument.lan.CON.  In addition to the above constants, operationRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal weights. For example, to set bits B0 and B1, set operationRegister to&nbsp;3.   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  operationRegister = status.operation.instrument.lan.CON +     status.operation.instrument.lan.CONF  status.operation.instrument.lan.enable = operationRegister  Use constants to set bit B0 and bit B1 of the operation status LAN summary enable register.  Example 2  operationRegister = 3  status.operation.instrument.lan.enable = operationRegister  Use the decimal value to set bit B0 and bit B1 of the operation status LAN summary enable register.  Also see  Operation Status Registers  "},{"id":140,"title":"status.operation.program.*","url":"115984.htm","text":"This attribute contains the operation status program status register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  2 (bit set)  Usage  operationRegister = status.operation.program.condition  operationRegister = status.operation.program.enable  operationRegister = status.operation.program.event  operationRegister = status.operation.program.ntr  operationRegister = status.operation.program.ptr  status.operation.program.enable = operationRegister  status.operation.program.ntr = operationRegister  status.operation.program.ptr = operationRegister   operationRegister  The status of the program status register; a zero (0) indicates no bits set (also send 0 to clear all bits)  Details  These attributes are used to read or write to the program status summary register. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  Not used  B1  status.operation.program.PROG  Set bit indicates there is a program running  Bit B1 decimal value: 2  Binary value: 0000 0000 0000 0010  B2 to B15  Reserved  As an example, to set bit B1 of the operation status program status register, set status.operation.program = status.operation.program.PROG.  In addition to the above constants, operationRegister can be set to the decimal value of the bit to set.  Example 1  status.operation.program = status.operation.program.PROG  Uses a constant to set the PROG bit, B1, of the operation status program status register.  Example 2  status.operation.program = 2  Uses the decimal value to set bit B1 of the operation status program status register.  Also see  Operation Status Registers  status.operation.*  "},{"id":141,"title":"status.operation.remote.*","url":"115998.htm","text":"This attribute contains the operation status remote summary register set.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  2050 (all bits set)  Usage  operationRegister = status.operation.remote.condition  operationRegister = status.operation.remote.enable  operationRegister = status.operation.remote.event  operationRegister = status.operation.remote.ntr  operationRegister = status.operation.remote.ptr  status.operation.remote.enable = operationRegister  status.operation.remote.ntr = operationRegister  status.operation.remote.ptr = operationRegister   operationRegister  The status of the operation status remote summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the operation status remote summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  Not used  B1  status.operation.remote.CAV  Set bit indicates there is a command available in the execution queue.  Bit B1 decimal value: 2  Binary value: 0000 0000 0000 0010  B2 to B10  Not used  B11  status.operation.remote.PRMPT  Set bit indicates command prompts are enabled.  Bit B11 decimal value: 2,048  Binary value: 0000 0100 0000 0000  B12 to B15  Not used  As an example, to set bit B1 of the operation status remote summary enable register, set status.operation.remote.enable = status.operation.remote.CAV.  In addition to the above constants, operationRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal values. For example, to set bits B1 and B11, set operationRegister to 2,050 (which is the sum of 2 + 2,048).   Example 1  status.operation.remote.enable = status.operation.remote.CAV  Uses a constant to set the CAV bit, B1, of the operation status remote summary enable register.  Example 2  status.operation.remote.enable = 2050  Uses the decimal value to set bits B1 and B11 of the operation status remote summary enable register.  Also see  Operation Status Registers  status.operation.*  "},{"id":142,"title":"status.operation.slot.presence.*","url":"115982.htm","text":"This attribute contains the operation status hardware presence register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  14 (all bits set)  Usage  operationRegister = status.operation.slot.presence.condition  operationRegister = status.operation.slot.presence.enable  operationRegister = status.operation.slot.presence.event  operationRegister = status.operation.slot.presence.ntr  operationRegister = status.operation.slot.presence.ptr  status.operation.slot.presence.enable = operationRegister  status.operation.slot.presence.ntr = operationRegister  status.operation.slot.presence.ptr = operationRegister   operationRegister  The status of the operation status hardware presence register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the operation status hardware presence summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  Not used  B1  status.operation.slot.presence.SLOT1  Set bit indicates there is a module in slot 1  Bit B1 decimal value: 2  Binary value: 0000 0000 0000 0010  B2  status.operation.slot.presence.SLOT2  Set bit indicates there is a module in slot 2  Bit B2 decimal value: 4  Binary value: Binary value: 0000 0000 0000 0100  B3  status.operation.slot.presence.SLOT3  Set bit indicates there is a module in slot 3  Bit B3 decimal value: 8  Binary value: Binary value: 0000 0000 1000   B4 to B15  Not used  As an example, to set bit B1 of the operation status hardware presence summary register, set status.operation.slot.presence = status.operation.slot.presence.SLOT1.  In addition to the above constants, operationRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal values. For example, to set bits B1 and B3, set operationRegister to 10 (which is the sum of 2 + 8).  Example 1  status.operation.slot.presence = status.operation.slot.presence.SLOT1  Uses a constant to set the SLOT1 bit, B1, of the operation status hardware presence register.  Example 2  status.operation.slot.presence = 2  Uses the decimal value to set bit B1 of the operation status hardware presence register.  Also see  Operation Status Registers  status.operation  "},{"id":143,"title":"status.operation.slot.status.*","url":"115985.htm","text":"This attribute contains the operation status slot status register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  14 (all bits set)  Usage  operationRegister = status.operation.slot.status.condition  operationRegister = status.operation.slot.status.enable  operationRegister = status.operation.slot.status.event  operationRegister = status.operation.slot.status.ntr  operationRegister = status.operation.slot.status.ptr  status.operation.slot.status.enable = operationRegister  status.operation.slot.status.ntr = operationRegister  status.operation.slot.status.ptr = operationRegister   operationRegister  The status of the operation status slot.status register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the operation status slot status summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  Not used  B1  status.operation.slot.status.SLOT1  Set bit indicates the measurement, questionable, or operation bit on slot 1 is set.  Bit B1 decimal value: 2  Binary value: 0000 0000 0000 0010  B2  status.operation.slot.status.SLOT2  Set bit indicates the measurement, questionable, or operation bit on slot 2 is set.  Bit B2 decimal value: 4  Binary value: Binary value: 0000 0000 0000 0100  B3  status.operation.slot.status.SLOT3  Set bit indicates the measurement, questionable, or operation bit on slot 3 is set.  Bit B3 decimal value: 8  Binary value: Binary value: 0000 0000 1000   B4 to B15  Not used  As an example, to set bit B1 of the operation status slot status summary register, set status.operation.slot.status.enable = status.operation.slot.status.SLOT1.  In addition to the above constants, operationRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal values. For example, to set bits B1 and B3, set operationRegister to 10 (which is the sum of&nbsp;2&nbsp;+&nbsp;8).  Example 1  status.operation.slot.status = status.operation.slot.status.SLOT1  Uses a constant to set the SLOT1 bit, B1, of the operation status slot status register.  Example 2  status.operation.slot.status.enable = 2  Uses the decimal value to set bit B1 of the operation status slot status register.  Also see  Operation Status Registers  status.operation  "},{"id":144,"title":"status.operation.slot.summary.*","url":"115983.htm","text":"This attribute contains the operation status slot summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  14 (all bits set)  Usage  operationRegister = status.operation.slot.summary.condition  operationRegister = status.operation.slot.summary.enable  operationRegister = status.operation.slot.summary.event  operationRegister = status.operation.slot.summary.ntr  operationRegister = status.operation.slot.summary.ptr  status.operation.slot.summary.enable = operationRegister  status.operation.slot.summary.ntr = operationRegister  status.operation.slot.summary.ptr = operationRegister   operationRegister  The status of the operation status slot summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Details  These attributes are used to read or write to the Slot Summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.  These bits are from the Slot Status Register of the device in the slot and indicates if the measurement, questionable, or operation bit on the respective module is set  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  Not used  B1  status.operation.slot.summary.SLOT1  Set bit indicates that the operation summary of slot 1 is set  Bit B1 decimal value: 2  Binary value: 0000 0000 0000 0010  B2  status.operation.slot.presence.SLOT2  Set bit indicates that the operation summary of slot 2 is set  Bit B2 decimal value: 4  Binary value: Binary value: 0000 0000 0000 0100  B3  status.operation.slot.presence.SLOT3  Set bit indicates that the operation summary of slot 3 is set  Bit B3 decimal value: 8  Binary value: Binary value: 0000 0000 1000   B4 to B15  Not used  As an example, to set bit B1 of the operation status slot summary register, set status.operation.slot.summary = status.operation.slot.summary.SLOT1.  In addition to the above constants, operationRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal values. For example, to set bits B1 and B3, set operationRegister to 10 (which is the sum of&nbsp;2&nbsp;+&nbsp;8).  Example 1  status.operation.slot.summary = status.operation.slot.summary.SLOT1  Uses a constant to set the SLOT1 bit, B1, of the operation status slot summary register.  Example 2  status.operation.slot.summary = 2  Uses the decimal value to set bit B1 of the operation status slot summary register.  Also see  Operation Status Registers  status.operation  "},{"id":145,"title":"status.operation.trigger_overrun.*","url":"115999.htm","text":"This attribute contains the operation status trigger overrun summary register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  28,672 (all bits set)  Usage  operationRegister = status.operation.trigger_overrun.condition  operationRegister = status.operation.trigger_overrun.enable  operationRegister = status.operation.trigger_overrun.event  operationRegister = status.operation.trigger_overrun.ntr  operationRegister = status.operation.trigger_overrun.ptr  status.operation.trigger_overrun.enable = operationRegister  status.operation.trigger_overrun.ntr = operationRegister  status.operation.trigger_overrun.ptr = operationRegister   operationRegister  The status of the operation status trigger overrun summary register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate bit settings  Details  These attributes are used to read or write to the operation status trigger overrun summary registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, if a value of 20.480e+03 (which is 20,480) is read as the value of the condition register, the binary equivalent is 0101 0000 0000 0000. This value indicates that bit B12 and bit B14 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  1  0  1  0  0  0  0  0  0  0  0  0  0  0  0  * Least significant bit<br>** Most significant bit  The bits in this register summarize events in other registers. A set bit in this summary register indicates that an enabled event in one of the summarized registers is set.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0 to B11  Not used  Not applicable.  B12  status.operation.trigger_overrun.DIGIO  Set bit indicates one of the enabled bits in the operation status digital I/O overrun event register is&nbsp;set.  Bit B12 decimal value: 4,096  B13  status.operation.trigger_overrun.TSPLINK  Set bit indicates one of the enabled bits in the operation status TSP-Link overrun event register is&nbsp;set.  Bit B13 decimal value: 8,192  B14  Not used  Not applicable.  B15  Not used  Not applicable.  As an example, to set bit B12 of the operation status trigger overrun summary enable register, set status.operation.trigger_overrun.enable = status.operation.trigger_overrun.DIGIO.  In addition to the above constants, operationRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal weights. For example, to set bits B12 and B13, set operationRegister to 12,288 (the sum of 4096 + 8,192).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example  operationRegister = status.operation.trigger_overrun.DIGIO + status.operation.trigger_overrun.TSPLINK  status.operation.trigger_overrun.enable = operationRegister  Uses constants to set bit B12 and bit B13 of the operation status trigger overrun summary enable register.  Also see  Operation Status Registers  status.operation  "},{"id":146,"title":"status.operation.user.*","url":"15852.htm","text":"These attributes manage the operation status user register set of the status model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (RW)  Yes  Status reset  Not saved  0  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (all bits set)  Usage  operationRegister = status.operation.user.condition  operationRegister = status.operation.user.enable  operationRegister = status.operation.user.event  operationRegister = status.operation.user.ntr  operationRegister = status.operation.user.ptr  status.operation.user.condition = operationRegister  status.operation.user.enable = operationRegister  status.operation.user.ntr = operationRegister  status.operation.user.ptr = operationRegister  operationRegister  The status of the operation status user register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the operation status user registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bits B0 and B7 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.operation.user.BIT0  1  B1  status.operation.user.BIT1  2  B2  status.operation.user.BIT2  4  B3  status.operation.user.BIT3  8  B4  status.operation.user.BIT4  16  B5  status.operation.user.BIT5  32  B6  status.operation.user.BIT6  64  B7  status.operation.user.BIT7  128  B8  status.operation.user.BIT8  256  B9  status.operation.user.BIT9  512  B10  status.operation.user.BIT10  1,024  B11  status.operation.user.BIT11  2,048  B12  status.operation.user.BIT12  4,096  B13  status.operation.user.BIT13  8,192  B14  status.operation.user.BIT14  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the operation status user enable register, set status.operation.user.enable = status.operation.user.BIT0.  In addition to the above constants, operationRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal values. For example, to set bits B11 and B14, set operationRegister to 18,432 (which is the sum of 2,048&nbsp;+&nbsp;16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  operationRegister = status.operation.user.BIT11 + status.operation.user.BIT14  status.operation.user.enable = operationRegister  Uses constants to set bits B11 and B14 of the operation status user enable register.  Example 2  -- 18432 = binary 0100 1000 0000 0000  operationRegister = 18432  status.operation.enable = operationRegister  Uses the decimal value to set bits B11 and B14 of the operation status user enable register.  Also see  status.operation.*  "},{"id":147,"title":"status.system.*","url":"15863.htm","text":"These attributes manage the TSP-LinkTM system summary register of the status model for nodes 1 through 14.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (all bits set)  Usage  enableRegister = status.system.condition  enableRegister = status.system.enable  enableRegister = status.system.event  enableRegister = status.system.ntr  enableRegister = status.system.ptr  status.system.enable = enableRegister  status.system.ntr = enableRegister  status.system.ptr = enableRegister  enableRegister  The status of the system summary register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.system.EXTENSION_BIT  status.system.EXT  1  B1  status.system.NODE1  2  B2  status.system.NODE2  4  B3  status.system.NODE3  8  B4  status.system.NODE4  16  B5  status.system.NODE5  32  B6  status.system.NODE6  64  B7  status.system.NODE7  128  B8  status.system.NODE8  256  B9  status.system.NODE9  512  B10  status.system.NODE10  1,024  B11  status.system.NODE11  2,048  B12  status.system.NODE12  4,096  B13  status.system.NODE13  8,192  B14  status.system.NODE14  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the system summary status enable register, set status.system.enable = status.system.enable.EXT.  In addition to the above constants, enableRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal values. For example, to set bits B11 and B14, set enableRegister to 18,432 (which is the sum of 2,048 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system.NODE11 + status.system.NODE14  status.system.enable = enableRegister  Uses constants to set bits B11 and B14 of the system summary enable register.  Example 2  -- decimal 18432 = binary 0100 1000 0000 0000  enableRegister = 18432  status.system.enable = enableRegister  Uses the decimal value to set bits B11 and B14 of the system summary enable register.  Also see  status.system2.*  System summary and standard event registers   "},{"id":148,"title":"status.system2.*","url":"116281.htm","text":"These attributes manage the TSP-LinkTM system summary register of the status model for nodes 15 through 28.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (all bits set)  Usage  enableRegister = status.system2.condition  enableRegister = status.system2.enable  enableRegister = status.system2.event  enableRegister = status.system2.ntr  enableRegister = status.system2.ptr  status.system2.enable = enableRegister  status.system2.ntr = enableRegister  status.system2.ptr = enableRegister  enableRegister  The status of the system summary 2 register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.system2.EXTENSION_BIT  status.system2.EXT  1  B1  status.system2.NODE15  2  B2  status.system2.NODE16  4  B3  status.system2.NODE17  8  B4  status.system2.NODE18  16  B5  status.system2.NODE19  32  B6  status.system2.NODE20  64  B7  status.system2.NODE21  128  B8  status.system2.NODE22  256  B9  status.system2.NODE23  512  B10  status.system2.NODE24  1,024  B11  status.system2.NODE25  2,048  B12  status.system2.NODE26  4,096  B13  status.system2.NODE27  8,192  B14  status.system2.NODE28  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the system summary 2 enable register, set status.system2.enable = status.system2.EXT.  In addition to the above constants, enableRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal values. For example, to set bits B11 and B14, set enableRegister to 18,432 (which is the sum of 2,048 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system2.NODE25 + status.system2.NODE28  status.system2.enable = enableRegister   Uses constants to set bits B11 and B14 of the system summary 2 enable register.  Example 2  -- decimal 18432 = binary 0100 1000 0000 0000  enableRegister = 18432  status.system2.enable = enableRegister  Uses the decimal value to set bits B11 and B14 of the system summary 2 enable register.  Also see  status.system.*  status.system3.*  "},{"id":149,"title":"status.system3.*","url":"116282.htm","text":"These attributes manage the TSP-LinkTM system summary register of the status model for nodes 29 through 42.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (all bits set)  Usage  enableRegister = status.system3.condition  enableRegister = status.system3.enable  enableRegister = status.system3.event  enableRegister = status.system3.ntr  enableRegister = status.system3.ptr  status.system3.enable = enableRegister  status.system3.ntr = enableRegister  status.system3.ptr = enableRegister  enableRegister  The status of the system summary 3 register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.system3.EXTENSION_BIT  status.system3.EXT  1  B1  status.system3.NODE29  2  B2  status.system3.NODE30  4  B3  status.system3.NODE31  8  B4  status.system3.NODE32  16  B5  status.system3.NODE33  32  B6  status.system3.NODE34  64  B7  status.system3.NODE35  128  B8  status.system3.NODE36  256  B9  status.system3.NODE37  512  B10  status.system3.NODE38  1,024  B11  status.system3.NODE39  2,048  B12  status.system3.NODE40  4,096  B13  status.system3.NODE41  8,192  B14  status.system3.NODE42  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the system summary 3 enable register, set status.system3.enable = status.system3.EXT.  In addition to the above constants, enableRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal values. For example, to set bits B11 and B14, set enableRegister to 18,432 (which is the sum of 2,048 + 16,384).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system3.NODE39 + status.system3.NODE42  status.system3.enable = enableRegister  Uses constants to set bits B11 and B14 of the system summary 3 enable register.  Example 2  -- decimal 18432 = binary 0100 1000 0000 0000  enableRegister = 18432  status.system3.enable = enableRegister  Uses the decimal value to set bits B11 and B14 of the system summary 3 enable register.  Also see  status.system2.*  status.system4.*  "},{"id":150,"title":"status.system4.*","url":"116283.htm","text":"These attributes manage the TSP-LinkTM system summary register of the status model for nodes 43 through 56.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (all bits set)  Usage  enableRegister = status.system4.condition  enableRegister = status.system4.enable  enableRegister = status.system4.event  enableRegister = status.system4.ntr  enableRegister = status.system4.ptr  status.system4.enable = enableRegister  status.system4.ntr = enableRegister  status.system4.ptr = enableRegister  enableRegister  The status of the system summary 4 register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.system4.EXTENSION_BIT  status.system4.EXT  1  B1  status.system4.NODE43  2  B2  status.system4.NODE44  4  B3  status.system4.NODE45  8  B4  status.system4.NODE46  16  B5  status.system4.NODE47  32  B6  status.system4.NODE48  64  B7  status.system4.NODE49  128  B8  status.system4.NODE50  256  B9  status.system4.NODE51  512  B10  status.system4.NODE52  1,024  B11  status.system4.NODE53  2,048  B12  status.system4.NODE54  4,096  B13  status.system4.NODE55  8,192  B14  status.system4.NODE56  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the system summary 4 enable register, set status.system4.enable = status.system4.enable.EXT.  In addition to the above constants, enableRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal values. For example, to set bits B11 and B14, set enableRegister to 18,432 (which is the sum of 2,048 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system4.NODE53 + status.system4.NODE56  status.system2.enable = enableRegister   Uses constants to set bit B11 and bit B14 of the system summary 4 enable register.  Example 2  -- decimal 18432 = binary 0100 1000 0000 0000  enableRegister = 18432  status.system4.enable = enableRegister  Uses a decimal value to set bit B11 and bit B14 of the system summary 4 enable register.  Also see  status.system3.*  status.system5.*  "},{"id":151,"title":"status.system5.*","url":"116284.htm","text":"These attributes manage the TSP-LinkTM system summary register of the status model for nodes 57 through 64.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  &#8212;  &#8212;  &#8212;  &#8212;  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  510 (all bits set)  Usage  enableRegister = status.system5.condition  enableRegister = status.system5.enable  enableRegister = status.system5.event  enableRegister = status.system5.ntr  enableRegister = status.system5.ptr  status.system5.enable = enableRegister  status.system5.ntr = enableRegister  status.system5.ptr = enableRegister  enableRegister  The status of the system summary 5 register; a zero (0) indicates no bits set; other values indicate bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value, but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.30000e+02 (which is 130) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0010. This value indicates that bit B1 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  Not used  Not applicable  B1  status.system5.NODE57  2  B2  status.system5.NODE58  4  B3  status.system5.NODE59  8  B4  status.system5.NODE60  16  B5  status.system5.NODE61  32  B6  status.system5.NODE62  64  B7  status.system5.NODE63  128  B8  status.system5.NODE64  256  B9 to B15  Not used  Not applicable  As an example, to set bit B1 of the system summary 5 enable register, set status.system5.enable = status.system5.NODE57.  In addition to the above constants, enableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal weights. For example, to set bits B1 and B4, set enableRegister to 18 (which is the sum of 2 + 16).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system5.NODE57 + status.system5.NODE60  status.system2.enable = enableRegister   Uses constants to set bits B1 and B4 of the system summary 5 enable register.  Example 2  -- decimal 18 = binary 0000 0000 0001 0010  enableRegister = 18  status.system5.enable = enableRegister  Uses the decimal value to set bits B1 and B4 of the system summary 5 enable register.  Also see  status.system4.*  "},{"id":152,"title":"timer.cleartime()","url":"116611.htm","text":"This function resets the timer to zero (0) seconds.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  time = timer.cleartime()  time  The elapsed time in seconds (1&nbsp;µs resolution)  Example  timer.cleartime()  -- (intervening code)  time = timer.readtime()  print(time)  Resets the timer and then measures the time since the reset.  Output:  1.469077e+01  The above output indicates that timer.readtime() was executed 14.69077 seconds after timer.cleartime().  Also see  timer.readtime()  "},{"id":153,"title":"timer.readtime()","url":"116612.htm","text":"This function measures the elapsed time since the timer was last reset.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  time = timer.readtime()  time  The elapsed time in seconds (1&nbsp;µs resolution)  Example  timer.cleartime()  -- (intervening code)  time = timer.readtime()  print(time)  Resets the timer and then measures the time since the reset.  Output:  1.469077e+01  The above output indicates that timer.readtime() was executed 14.69077 seconds after timer.cleartime().  Also see  timer.cleartime()  "},{"id":154,"title":"trigger.clear()","url":"116286.htm","text":"This function clears the command interface trigger event detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  trigger.clear()  Details  The trigger event detector indicates if a trigger event has been detected since the last trigger.wait() call. trigger.clear() clears the trigger event detector and discards the history of command interface trigger events.  Also see  trigger.wait()  "},{"id":155,"title":"trigger.detector[N].clear()","url":"116547.htm","text":"This command clears the trigger event detector and the overrun indicator.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  trigger.detector[N].clear()  N  The detector number: 1 to 8  Details  The event detector of a trigger enters the detected state when an event is detected. It is cleared when trigger.detector[N].clear() is called.  This command clears the event detector of the specified index, discards the history of the detector, and clears the trigger.detector[N].overrun attribute.  Example  trigger.detector[2].clear()  Clears the events on detector 2.  Also see  trigger.detector[N].overrun  "},{"id":156,"title":"trigger.detector[N].overrun","url":"116548.htm","text":"This attribute indicates if an event was ignored because of the event detector state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset  Not applicable  Not applicable  Usage  overrun = trigger.detector[N].overrun  overrun  Trigger overrun state: true or false  N  The detector number: 1 to 8  Details  This attribute indicates if an event was ignored because the event detector was already in the detected state when an event occurred.  Example  print(trigger.detector[1].overrun)  If an event was ignored, the output is true. If an event was not ignored, the output is false.  Also see  trigger.detector[N].clear()  "},{"id":157,"title":"trigger.detector[N].stimulus","url":"116549.htm","text":"This attribute specifies which event triggers the detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Power cycle  Not saved  trigger.EVENT_NONE  Usage  eventID = trigger.detector[N].stimulus  group.attribute = value  eventID  The event that triggers the detector  N  The detector number: 1 to 8  Details  The eventID parameter can be the trigger event of any trigger event on the mainframe or any installed modules.  Example  digio.trigger[1].mode = digio.MODE_TRIGGER_OUT   trigger.detector[1].stimulus=digio.trigger[1].EVENT_ID  digio.trigger[1].assert()  Generates a event on the detector when trigger happens on line 1.  Also see  trigger.detector[N].wait()  "},{"id":158,"title":"trigger.detector[N].wait","url":"116550.htm","text":"This command waits for an event to be detected by the detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = trigger.detector[N].wait(timeout)  triggered  Trigger detection indicator  N  The detector number: 1 to 8  timeout  The maximum amount of time (in seconds) to wait for the trigger  Details  If one or more trigger events were detected since the last time trigger.detector[N].wait() or trigger.detector[N].clear() was called, this function immediately returns true. Otherwise, it will wait for up to the number of sections specified in timeout for the event to occur. It will return true if the event occurs before the timeout value and false if the event does not occur before.  After waiting for a trigger event with this function, the event detector is automatically reset and rearmed. This is true regardless of the number of events detected.  Example  digio.trigger[1].mode = digio.MODE_TRIGGER_OUT   trigger.detector[1].stimulus=digio.trigger[1].EVENT_ID  digio.trigger[1].assert()  print(trigger.detector[1].wait(3))  Generates an event on trigger detector 1 when a digital I/O trigger occurs on line 1.  Waits 3 s while checking if an event occurred on trigger detector 1.  Also see  trigger.detector[N].clear()  trigger.detector[N].stimulus  "},{"id":159,"title":"trigger.EVENT_ID","url":"116287.htm","text":"This constant contains the command interface trigger event number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = trigger.EVENT_ID  eventID  The event ID for the command interface triggers  Details  You can set the stimulus of any trigger object to the value of this constant to have the trigger object respond to command interface trigger events.  Example  trigger.timer[1].stimulus = trigger.EVENT_ID  Sets the trigger stimulus of trigger timer 1 to the command interface trigger event.  Also see  None  "},{"id":160,"title":"trigger.EVENT_NONE","url":"116546.htm","text":"This trigger event ID is never generated. It is used to disconnect stimulus inputs.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = trigger.EVENT_NONE  eventID  The trigger event ID  Details  This event ID is never generated. It can be used to disconnect a stimulus event that was set to another trigger event to disconnect it from all events.  Example  trigger.detector[1].stimulus=trigger.EVENT_NONE  No trigger event on detector 1.  Also see  None  "},{"id":161,"title":"trigger.generator[N].assert()","url":"116288.htm","text":"This function generates a trigger event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  trigger.generator[N].assert()  N  The generator number: 1 to 8  Details  Use this function to directly trigger events from the command interface or a script. For example, you can trigger a sweep while the instrument is under script control.  Example  trigger.generator[2].assert()  Generates a trigger event on generator 2.  Also see  trigger.generator[N].EVENT_ID  "},{"id":162,"title":"trigger.generator[N].EVENT_ID","url":"116289.htm","text":"This constant identifies the trigger event generated by the trigger event generator.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = trigger.generator[N].EVENT_ID  eventID  The trigger event number  N  The generator number: 1 to 8  Details  This constant is an identification number that identifies events generated by this generator.  To have another trigger object respond to trigger events generated by this generator, set the other object's stimulus attribute to the value of this constant.  Example  digio.trigger[5].stimulus = trigger.generator[2].EVENT_ID  Uses a trigger event on generator 2 to be the stimulus for digital I/O trigger line 5.  Also see  trigger.generator[N].assert()  "},{"id":163,"title":"trigger.timer[N].clear()","url":"117238.htm","text":"This function clears the timer event detector and overrun indicator for the specified trigger timer number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  trigger.timer[N].clear()  N  Trigger timer number: 1 to 8  Details  This command sets the timer event detector to the undetected state and resets the overrun indicator.  Example  trigger.timer[1].clear()  Clears trigger timer 1.  Also see  trigger.timer[N].count  "},{"id":164,"title":"trigger.timer[N].count","url":"117239.htm","text":"This attribute sets the number of events to generate each time the timer generates a trigger event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>trigger.timer[N].reset  Not saved  1  Usage  count = trigger.timer[N].count  trigger.timer[N].count = count  count  Number of times to repeat the trigger: 0 to 1,048,575  N  Trigger timer number: 1 to 8  Details  If the count is set to a number greater than 1, the timer automatically starts the next trigger timer delay at the expiration of the previous delay.  Set the count to zero (0) to cause the timer to generate trigger events indefinitely.  If you use the trigger timer with a trigger model, make sure the count value is the same or more than any count values expected in the trigger model.  Example  print(trigger.timer[1].count)  Read trigger count for timer number 1.  Also see  trigger.timer[N].clear()  trigger.timer[N].delay  trigger.timer[N].reset()  "},{"id":165,"title":"trigger.timer[N].delay","url":"117240.htm","text":"This attribute sets and reads the timer delay.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>trigger.timer[N].reset  Not saved  10e-6 (10 µs)  Usage  interval = trigger.timer[N].delay  trigger.timer[N].delay = interval  interval  Delay interval in seconds: 0.5 µs to 400 s  N  Trigger timer number: 1 to 8  Once the timer is enabled, each time the timer is triggered, it uses this delay period.   Assigning a value to this attribute is equivalent to:   trigger.timer[N].delaylist = {interval}  This creates a delay list of one value.   Reading this attribute returns the delay interval that is used the next time the timer is triggered.   Example  trigger.timer[1].delay = 50e-6  Set the trigger timer 1 to delay for 50 µs.  Also see  trigger.timer[N].reset()  "},{"id":166,"title":"trigger.timer[N].EVENT_ID","url":"117242.htm","text":"This constant specifies the trigger timer event number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = trigger.timer[N].EVENT_ID  eventID  The trigger event number  N  Trigger trimer number: 1 to 8  Details  This constant is an identification number that identifies events generated by this timer.  Set the stimulus of any trigger object to the value of this constant to have the trigger object respond to events from this timer.  Example  trigger.timer[1].stimulus = digio.trigger[2].EVENT_ID  Sets the trigger stimulus of trigger timer 1 to the digio trigger 2 event.  Also see  None  "},{"id":167,"title":"trigger.timer[N].overrun","url":"117244.htm","text":"This attribute indicates if an event was ignored because of the event detector state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>trigger.timer[N].clear<br>trigger.timer[N].reset  Not applicable  false  Usage  overrun = trigger.timer[N].overrun  overrun  Trigger overrun state: true or false  N  Trigger timer number: 1 to 8  Details  This command indicates if an event was ignored because the event detector was already in the detected state when the event occurred.  This is an indication of the state of the event detector built into the timer itself. It does not indicate if an overrun occurred in any other part of the trigger model or in any other construct that is monitoring the delay completion event. It also is not an indication of a delay overrun.  Delay overrun indications are provided in the status model.  Example  print(trigger.timer[1].overrun)  If an event was ignored, the output is true.  If the event was not ignored, the output is false.  Also see  trigger.timer[N].reset()  "},{"id":168,"title":"trigger.timer[N].passthrough","url":"117246.htm","text":"This attribute enables or disables the timer trigger pass&#8209;through mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>trigger.timer[N].reset  Not saved  false (disabled)  Usage  passthrough = trigger.timer[N].passthrough  trigger.timer[N].passthrough = passthrough  passthrough  The state of pass-through mode; set to one of the following values:  Enabled: true  Disabled: false  N  Trigger timer number: 1 to 8  Details  When pass-through mode is enabled, triggers are passed through immediately and initiate the delay. When disabled, a trigger only initiates a delay.  Example  trigger.timer[1].passthrough = true  Enables pass&#8209;through mode on trigger timer 1.  Also see  trigger.timer[N].reset()  "},{"id":169,"title":"trigger.timer[N].reset","url":"117249.htm","text":"This function resets some of the trigger timer settings to their factory defaults.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  trigger.timer[N].reset()  N  Trigger timer number: 1 to 8  Details  The trigger.timer[N].reset() function resets the following attributes to their factory defaults:  trigger.timer[N].count  trigger.timer[N].delay  trigger.timer[N].passthrough  trigger.timer[N].stimulus  It also clears trigger.timer[N].overrun.  Example  trigger.timer[1].reset()  Resets the attributes associated with timer 1 to factory default values.  Also see  trigger.timer[N].count  trigger.timer[N].delay  trigger.timer[N].overrun  trigger.timer[N].passthrough  trigger.timer[N].stimulus  "},{"id":170,"title":"trigger.timer[N].stimulus","url":"117251.htm","text":"This attribute specifies which event starts the timer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>trigger.timer[N].reset  Not saved  0  Usage  eventID = trigger.timer[N].stimulus  trigger.timer[N].stimulus = eventID  eventID  The event that triggers the timer delay  N  Trigger timer number: 1 to 8  Details  The event IDs that can be used for this command include mainframe-specific event IDs as well as event IDs for any installed modules capable of generating a trigger event. See ***Trigger event IDs*** to find the event IDs for your mainframe and specific modules.  Example  print(trigger.timer[1].stimulus)  Prints the event that starts a trigger 1 timer action.  Also see  trigger.timer[N].reset  "},{"id":171,"title":"trigger.timer[N].wait()","url":"117252.htm","text":"This function waits for a trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = trigger.timer[N].wait(timeout)  triggered  Trigger detection indication  N  Trigger timer number: 1 to 8  timeout  Maximum amount of time in seconds to wait for the trigger  Details  If one or more trigger events were detected since the last time trigger.timer[N].wait() or trigger.timer[N].clear() was called, this function returns immediately.  After waiting for a trigger with this function, the event detector is automatically reset and rearmed. This is true regardless of the number of events detected.  Example  triggered = trigger.timer[3].wait(10)  print(triggered)  Waits up to 10 s for a trigger on timer 3.  If false is returned, no trigger was detected during the 10&nbsp;s timeout.  If true is returned, a trigger was detected.  Also see  trigger.timer[N].clear()  "},{"id":172,"title":"trigger.wait()","url":"116291.htm","text":"This function waits for a command interface trigger event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = trigger.wait(timeout)  triggered  A trigger was detected during the timeout period: true  No triggers were detected during the timeout period: false  timeout  Maximum amount of time in seconds to wait for the trigger  Details  This function waits up to timeout seconds for a trigger on the active command interface. A command interface trigger occurs when:  A USBTMC TRIGGER message is received (USB only)  A VXI-11 device_trigger method is invoked (VXI-11 only)  A *TRG message is received  If one or more of these trigger events were previously detected, this function returns immediately.  After waiting for a trigger with this function, the event detector is automatically reset and rearmed. This is true regardless of the number of events detected.  Example  triggered = trigger.wait(10)  print(triggered)  Waits up to 10 seconds for a trigger.  If false is returned, no trigger was detected during the 10&#8209;second timeout.  If true is returned, a trigger was detected.  Also see  trigger.clear()  "},{"id":173,"title":"tsplink.group","url":"116292.htm","text":"This attribute contains the group number of a TSP&#8209;Link node.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Power cycle  Not applicable  0  Usage  groupNumber = tsplink.group  tsplink.group = groupNumber  groupNumber  The group number of the TSP-Link node: 0 to 64  Details  To remove the node from all groups, set the attribute value to 0.  When the node is turned off, the group number for that node changes to 0.  The master node can be assigned to any group. You can also include other nodes in the group that includes the master. Any nodes that are set to 0 are automatically included in the group that contains the master node, regardless of the group that is assigned to the master node.  Example  tsplink.group = 3  Assign the instrument to TSP-Link group number 3.  Also see  ***Using groups to manage nodes on a TSP-Link system  "},{"id":174,"title":"tsplink.master","url":"116293.htm","text":"This attribute reads the node number assigned to the master node.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  masterNodeNumber = tsplink.master  masterNodeNumber  The node number of the master node  Details  After doing a TSP-Link reset (tsplink.reset()), use this attribute to access the node number of the master in a set of instruments connected over TSP-Link.  Example  LinkMaster = tsplink.master  Store the TSP-Link master node number in a variable called LinkMaster.  Also see  tsplink.reset()  "},{"id":175,"title":"tsplink.node","url":"116294.htm","text":"This attribute defines the node number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  1  Usage  nodeNumber = tsplink.node  tsplink.node = nodeNumber  nodeNumber  The node number of the instrument or enclosure: 1 to 64  Details  This command sets the TSP&#8209;Link node number and saves the value in nonvolatile&nbsp;memory.  Changes to the node number do not take effect until tsplink.reset() from an earlier TSP&#8209;Link instrument is executed on any node in the system.  Each node connected to the TSP-Link system must be assigned a different node number.  Example  tsplink.node = 3  Sets the TSP&#8209;Link node for this instrument to number&nbsp;3.  Also see  tsplink.reset()  tsplink.state  "},{"id":176,"title":"tsplink.readbit()","url":"116295.htm","text":"This function reads the state of a TSP-Link synchronization line.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data = tsplink.readbit(N)  data  The state of the synchronization line  Low: 0  High: 1  N  The trigger line: 1 to 3  Example  data = tsplink.readbit(3)  print(data)  Assume line 3 is set high and is then read.  Output:  1.000000e+00  Also see  tsplink.readport()  tsplink.writebit()  "},{"id":177,"title":"tsplink.readport()","url":"116296.htm","text":"This function reads the TSP-Link trigger lines as a digital I/O port.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data = tsplink.readport()  data  Numeric value that indicates which lines are set  Details  The binary equivalent of the returned value indicates the input pattern on the I/O port. The least significant bit of the binary number corresponds to line 1 and the value of bit 3 corresponds to line 3. For example, a returned value of 2 has a binary equivalent of 010. This indicates that line 2 is high (1), and that the other two lines are low (0).  Example  data = tsplink.readport()  print(data)  Reads state of all three TSP-Link lines.  Assuming line 2 is set high, the output is:  2.000000e+00  (binary 010)  The format of the output may vary depending on the ASCII precision setting.  Also see  tsplink.readbit()  tsplink.writebit()  "},{"id":178,"title":"tsplink.reset()","url":"116297.htm","text":"This function initializes (resets) all nodes (instruments) in the TSP&#8209;Link system.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  nodesFound = tsplink.reset()  nodesFound = tsplink.reset(expectedNodes)  nodesFound  The number of nodes actually found on the system  expectedNodes  The number of nodes expected on the system: 1 to 64  Details  This function erases all information regarding other nodes connected on the TSP-Link system and regenerates the system configuration. This function must be called at least once before any remote nodes can be accessed. If the node number for any instrument is changed, the TSP-Link must be reset again.  If expectedNodes is not given, this function generates an error if no other nodes are found on the TSP&#8209;Link network.  If nodesFound is less than expectedNodes, an error is generated. Note that the node on which the command is running is counted as a node. For example, giving an expected node count of 1 does not generate any errors, even if there are no other nodes on the TSP-Link network.  Also returns the number of nodes found.  Example  nodesFound = tsplink.reset(2)  print(\"Nodes found = \" .. nodesFound)  Perform a TSP-Link reset and indicate how many nodes are found.  Sample output if two nodes are found:<br>Nodes found = 2  Sample output if fewer nodes are found and if localnode.showerrors = 1:<br>1219, TSP-Link found fewer nodes than expected<br>Nodes found = 1  Also see  localnode.showerrors  tsplink.node  tsplink.state  "},{"id":179,"title":"tsplink.state","url":"116298.htm","text":"This attribute describes the TSP-Link online state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Not applicable  Not applicable  Usage  state = tsplink.state  state  TSP-Link state: online or offline  Details  When the instrument power is first turned on, the state is offline. After tsplink.initialize() or tsplink.reset() is successful, the state is online.  Example  state = tsplink.state  print(state)  Read the state of the TSP&#8209;Link system. If it is online, the output is:  online  Also see  tsplink.node  tsplink.reset()  "},{"id":180,"title":"tsplink.trigger[N].assert()","url":"116299.htm","text":"This function simulates the occurrence of the trigger and generates the corresponding event ID.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.trigger[N].assert()  N  The trigger line: 1 to 3  Details  The set pulse width determines how long the trigger is asserted.  Example  tsplink.trigger[2].assert()  Asserts trigger on trigger line 2.  Also see  tsplink.trigger[N].clear()  tsplink.trigger[N].mode  tsplink.trigger[N].overrun  tsplink.trigger[N].pulsewidth  tsplink.trigger[N].release()  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":181,"title":"tsplink.trigger[N].clear()","url":"116300.htm","text":"This function clears the event detector for a LAN trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.trigger[N].clear()  N  The trigger line: 1 to 3  Details  The trigger event detector enters the detected state when an event is detected. tsplink.trigger[N].clear() clears a trigger event detector, discards the history of the trigger line, and clears the tsplink.trigger[N].overrun attribute.  Example  tsplink.trigger[2].clear()  Clears trigger event on synchronization line 2.  Also see  tsplink.trigger[N].mode  tsplink.trigger[N].overrun  tsplink.trigger[N].release()  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":182,"title":"tsplink.trigger[N].EVENT_ID","url":"116301.htm","text":"This constant identifies the number that is used for the trigger event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = tsplink.trigger[N].EVENT_ID  eventID  The trigger event number  N  The trigger line: 1 to 3  Details  This number is used by the TSP-Link trigger line when it detects an input trigger.  Set the stimulus of any trigger object to the value of this constant to have the trigger object respond to trigger events from this line.  Example  trigger.timer[1].stimulus = tsplink.trigger[2].EVENT_ID  Sets the trigger stimulus of trigger timer 1 to the TSP-Link trigger 2 event.  Also see  None  "},{"id":183,"title":"tsplink.trigger[N].mode","url":"116302.htm","text":"This attribute defines the trigger operation and detection mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>tsplink.trigger[N].reset  Not saved  0 (tsplink.TRIG_BYPASS)  Usage  mode = tsplink.trigger[N].mode  tsplink.trigger[N].mode = mode  mode  The trigger mode  N  The trigger line: 1 to 3  Details  This attribute controls the mode in which the trigger event detector and the output trigger generator operate on the given trigger&nbsp;line.  The setting for the mode parameter can be one of the values shown in the following table.  Mode  Number value  Description  tsplink.TRIG_BYPASS  0  Allows direct control of the line as a digital I/O line.  tsplink.TRIG_FALLING  1  Detects falling&#8209;edge triggers as input. Asserts a TTL-low pulse for output.  tsplink.TRIG_RISING  2  If the programmed state of the line is high, the tsplink.TRIG_RISING mode behaves similarly to tsplink.TRIG_RISINGA.  If the programmed state of the line is low, the tsplink.TRIG_RISING mode behaves similarly to tsplink.TRIG_RISINGM.  Use tsplink.TRIG_RISINGA if the line is in the high output state.  Use tsplink.TRIG_RISINGM if the line is in the low output state.  tsplink.TRIG_EITHER  3  Detects rising&#8209; or falling&#8209;edge triggers as input. Asserts a TTL&#8209;low pulse for output.  tsplink.TRIG_SYNCHRONOUSA  4  Detects the falling&#8209;edge input triggers and automatically latches and drives the trigger line low.  tsplink.TRIG_SYNCHRONOUS  5  Detects the falling&#8209;edge input triggers and automatically latches and drives the trigger line low. Asserts a TTL-low pulse as an output trigger.  tsplink.TRIG_SYNCHRONOUSM  6  Detects rising&#8209;edge triggers as an input. Asserts a TTL&#8209;low pulse for output.  tsplink.TRIG_RISINGA  7  Detects rising&#8209;edge triggers as input. Asserts a TTL&#8209;low pulse for output.  tsplink.TRIG_RISINGM  8  Edge detection as an input is not available. Generates a TTL&#8209;high pulse as an output trigger.  When programmed to any mode except tsplink.TRIG_BYPASS, the output state of the I/O line is controlled by the trigger logic and the user-specified output state of the line is&nbsp;ignored.  When the trigger mode is set to tsplink.TRIG_RISING, the user&#8209;specified output state of the line is examined. If the output state selected when the mode is changed is high, the actual mode that is used is tsplink.TRIG_RISINGA. If the output state selected when the mode is changed is low, the actual mode that is used is tsplink.TRIG_RISINGM.  The mode parameter stores the trigger mode as a numeric value when the attribute is read.  To control the line state, use the tsplink.TRIG_BYPASS mode with the tsplink.writebit() and the tsplink.writeport() commands.  Example  tsplink.trigger[3].mode = tsplink.TRIG_RISINGM  Sets the trigger mode for synchronization line 3 to tsplink.TRIG_RISINGM.  Also see  digio.writebit()  digio.writeport()  tsplink.trigger[N].assert()  tsplink.trigger[N].clear()  tsplink.trigger[N].overrun  tsplink.trigger[N].release()  tsplink.trigger[N].reset()  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":184,"title":"tsplink.trigger[N].overrun","url":"116303.htm","text":"This attribute indicates if the event detector ignored an event while in the detected state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>tsplink.trigger[N].clear<br>tsplink.trigger[N].reset  Not applicable  Not applicable  Usage  overrun = tsplink.trigger[N].overrun  overrun  Trigger overrun state  N  The trigger line: 1 to 3  Details  This command indicates whether an event has been ignored because the event detector was already in the detected state when the event occurred.  This is an indication of the state of the event detector built into the synchronization line itself.  It does not indicate if an overrun occurred in any other part of the trigger model, or in any other construct that is monitoring the event. It also is not an indication of an output trigger overrun.  Example  print(tsplink.trigger[1].overrun)  If an event was ignored, displays true; if an event was not ignored, displays false.  Also see  tsplink.trigger[N].assert()  tsplink.trigger[N].clear()  tsplink.trigger[N].mode  tsplink.trigger[N].release()  tsplink.trigger[N].reset()  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":185,"title":"tsplink.trigger[N].pulsewidth","url":"116304.htm","text":"This attribute sets the length of time that the trigger line is asserted for output triggers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>tsplink.trigger[N].reset  Not saved  10e-6 (10 µs)  Usage  width = tsplink.trigger[N].pulsewidth  tsplink.trigger[N].pulsewidth = width  width  The pulse width, up to 400 s  N  The trigger line: 1 to 3  Details  Setting the pulse width to 0 (seconds) asserts the trigger indefinitely.  Example  tsplink.trigger[3].pulsewidth = 20e-6  Sets pulse width for trigger line&nbsp;3 to 20&nbsp;μs.  Also see  tsplink.trigger[N].release()  "},{"id":186,"title":"tsplink.trigger[N].release()","url":"116305.htm","text":"This function releases a latched trigger on the given TSP-Link trigger line.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.trigger[N].release()  N  The trigger line: 1 to 3  Details  Releases a trigger that was asserted with an indefinite pulse width. It also releases a trigger that was latched in response to receiving a synchronous mode trigger.  Example  tsplink.trigger[3].release()  Releases trigger line 3.  Also see  tsplink.trigger[N].assert()  tsplink.trigger[N].clear()  tsplink.trigger[N].mode  tsplink.trigger[N].overrun  tsplink.trigger[N].pulsewidth  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":187,"title":"tsplink.trigger[N].reset()","url":"116308.htm","text":"This function resets some of the TSP-Link trigger attributes to their factory defaults.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.trigger[N].reset()  N  The trigger line: 1 to 3  Details  The tsplink.trigger[N].reset() function resets the following attributes to their factory defaults:  tsplink.trigger[N].mode  tsplink.trigger[N].stimulus  tsplink.trigger[N].pulsewidth  This also clears tsplink.trigger[N].overrun.  Example  tsplink.trigger[3].reset()  Resets TSP-Link trigger line&nbsp;3 attributes to factory default values.  Also see  tsplink.trigger[N].mode  tsplink.trigger[N].overrun  tsplink.trigger[N].pulsewidth  tsplink.trigger[N].stimulus  "},{"id":188,"title":"tsplink.trigger[N].stimulus","url":"116309.htm","text":"This attribute specifies the event that causes the synchronization line to assert a trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument setup<br>Recall setup<br>tsplink.trigger[N].reset  Nonvolatile memory  1  Usage  eventID = tsplink.trigger[N].stimulus  tsplink.trigger[N].stimulus = eventID  eventID  The event identifier for the triggering event  N  The trigger line: 1 to 3  Details  To disable automatic trigger assertion on the synchronization line, set this attribute to zero (0).  Do not use this attribute when triggering under script control. Use tsplink.trigger[N].assert() instead.  The event IDs that can be used for this command include mainframe-specific event IDs as well as event IDs for any installed modules capable of generating a trigger event. See ***Trigger event IDs*** to find the event IDs for your mainframe and specific modules.  "},{"id":189,"title":"tsplink.trigger[N].wait()","url":"116317.htm","text":"This function waits for a trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = tsplink.trigger[N].wait(timeout)  triggered  Trigger detection indication; set to one of the following values:  A trigger is detected during the timeout period: true  A trigger is not detected during the timeout period: false  N  The trigger line: 1 to 3  timeout  The timeout value in seconds  Details  This function waits up to the timeout value for an input trigger. If one or more trigger events were detected since the last time tsplink.trigger[N].wait() or tsplink.trigger[N].clear() was called, this function returns immediately.  After waiting for a trigger with this function, the event detector is automatically reset and rearmed. This is true regardless of the number of events detected.  Example  triggered = tsplink.trigger[3].wait(10)  print(triggered)  Waits up to 10 seconds for a trigger on TSP-Link line&nbsp;3.  If false is returned, no trigger was detected during the 10-second timeout.  If true is returned, a trigger was detected.  Also see  tsplink.trigger[N].clear()  "},{"id":190,"title":"tsplink.writebit()","url":"116318.htm","text":"This function sets a TSP-Link trigger line high or low.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.writebit(N, data)  N  The trigger line: 1 to 3  data  The value to write to the bit:  Low: 0  High: 1  Details  Use tsplink.writebit() and tsplink.writeport() to control the output state of the trigger line when trigger operation is set to tsplink.TRIG_BYPASS.  If the output line is write&#8209;protected by the tsplink.writeprotect attribute, this command is ignored.  The reset function does not affect the present states of the TSP-Link trigger lines.  Example  tsplink.writebit(3, 0)  Sets trigger line 3 low (0).  Also see  tsplink.readbit()  tsplink.readport()  tsplink.writeport()  tsplink.writeprotect  "},{"id":191,"title":"tsplink.writeport()","url":"116321.htm","text":"This function writes to all TSP&#8209;Link synchronization lines as a digital I/O port.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.writeport(data)  data  Value to write to the port: 0 to 7  Details  The binary representation of data indicates the output pattern that is written to the I/O port. For example, a data value of 2 has a binary equivalent of 010. Line 2 is set high (1) and the other two lines are set low (0).  Write&#8209;protected lines are not changed.  Use the tsplink.writebit() and tsplink.writeport() commands to control the output state of the synchronization line when trigger operation is set to tsplink.TRIG_BYPASS.  The reset() function does not affect the present states of the trigger lines.  Example  tsplink.writeport(3)  Sets the synchronization lines 1 and 2 high (binary 011).  Also see  tsplink.readbit()  tsplink.readport()  tsplink.writebit()  tsplink.writeprotect  "},{"id":192,"title":"tsplink.writeprotect","url":"116323.htm","text":"This attribute contains the write&#8209;protect mask that protects bits from changes by the tsplink.writebit() and tsplink.writeport() functions.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Not saved  0  Usage  mask = tsplink.writeprotect  tsplink.writeprotect = mask  mask  An integer that specifies the value of the bit pattern for write&#8209;protect; set bits to 1 to write&#8209;protect the corresponding TSP-Link trigger line  Details  The binary equivalent of mask indicates the mask to be set for the TSP-Link trigger line. For example, a mask value of 5 has a binary equivalent of 101. This mask write&#8209;protects TSP-Link trigger lines 1 and 3.  Example  tsplink.writeprotect = 5  Write&#8209;protects TSP-Link trigger lines 1 and 3.  Also see  ***Controlling digital I/O lines  tsplink.readbit()  tsplink.readport()  tsplink.writebit()  tsplink.writeport()  "},{"id":193,"title":"tspnet.clear()","url":"116324.htm","text":"This function clears any pending output data from the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.clear(connectionID)  connectionID  The connection ID returned from tspnet.connect()  Details  This function clears any pending output data from the device. No data is returned to the caller and no data is processed.  Example  tspnet.write(testdevice, \"print([[hello]])\")  print(tspnet.readavailable(testdevice))  tspnet.clear(testdevice)  print(tspnet.readavailable(testdevice))  Write data to a device, then print how much is available.  Output:  6.0000000e+00  Clear data and print how much data is available again.  Output:  0.0000000e+00  Also see  tspnet.connect()  tspnet.readavailable()  tspnet.write()  "},{"id":194,"title":"tspnet.connect()","url":"116325.htm","text":"This function establishes a network connection with another LAN instrument or device through the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  connectionID = tspnet.connect(\"ipAddress\")  connectionID = tspnet.connect(\"ipAddress\", portNumber, \"initString\")  connectionID  The connection ID to be used as a handle in all other tspnet function calls  ipAddress  A string that contains the IP address to which to connect; accepts IP address or host name when trying to connect  portNumber  Port number (default 5025)  initString  Initialization string to send to ipAddress  Details  This command connects a device to another device through the LAN interface. If the portNumber is 23, the interface uses the telnet protocol and sets appropriate termination characters to communicate with the device.  If a portNumber and initString are provided, it is assumed that the remote device is not TSP&#8209;enabled. The Series MP5000 does not perform any extra processing, prompt handling, error handling, or sending of commands. In addition, the tspnet.tsp.* commands cannot be used on devices that are not TSP&#8209;enabled.  If neither a portNumber nor an initString is provided, the remote device is assumed to be a Keithley TSP&#8209;enabled device. Depending on the state of the tspnet.tsp.abortonconnect attribute, the Series MP5000 sends an abort command to the remote device on connection.   The Series MP5000 also enables TSP prompts on the remote device and error management. The Series MP5000 places remote errors from the TSP&#8209;enabled device in its own error queue and prefaces these errors with Remote Error, followed by an error description.   Do not manually change either the prompt functionality (localnode.prompts) or show errors by changing localnode.showerrors on the remote TSP-enabled device. If you do this, subsequent tspnet.tsp.* commands using the connection may fail.  You can simultaneously connect to a maximum of 32 remote devices.  Example 1  instrumentID = tspnet.connect(\"192.0.2.1\")  if instrumentID then     -- Use instrumentID as needed here     tspnet.disconnect(instrumentID)  end  Connect to a TSP-enabled device.  Example 2  instrumentID = tspnet.connect(\"192.0.2.1\", 1394, \"*rst\\r\\n\")  if instrumentID then     -- Use instrumentID as needed here     tspnet.disconnect(instrumentID)  end  Connect to a device that is not TSP&#8209;enabled.  Also see  localnode.prompts  localnode.showerrors  tspnet.disconnect()  "},{"id":195,"title":"tspnet.disconnect()","url":"116326.htm","text":"This function disconnects a specified TSP-Net session.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.disconnect(connectionID)  connectionID  The connection ID returned from tspnet.connect()  Details  This function disconnects the two devices by closing the connection. The connectionID is the session handle returned by tspnet.connect().  For TSP-enabled devices, this aborts any remotely running commands or scripts.  Example  testID = tspnet.connect(\"192.0.2.0\")  -- Use the connection  tspnet.disconnect(testID)  Create a TSP&#8209;Net session.  Close the session.  Also see  tspnet.connect()  "},{"id":196,"title":"tspnet.execute()","url":"116327.htm","text":"This function sends a command string to the remote device.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.execute(\"connectionID\", \"commandString\")  value1 = tspnet.execute(\"connectionID\", \"commandString\", formatString)  value1, value2 = tspnet.execute(\"connectionID\", \"commandString\", formatString)  value1, ..., valueN = tspnet.execute(\"connectionID\", \"commandString\", formatString)  connectionID  The connection ID returned from tspnet.connect()  commandString  The command to send to the remote device  value1  The first value decoded from the response message  value2  The second value decoded from the response message  valueN  The N&nbsp;th value decoded from the response message; there is one return value for each format specifier in the format string  ...  One or more values separated with commas  formatString  Format string for the output  Details  This command sends a command string to the remote instrument. A termination is added to the command string when it is sent to the remote instrument (tspnet.termination()). You can also specify a format string, which causes the command to wait for a response from the remote instrument. The mainframe decodes the response message according to the format specified in the format string and returns the message as return values from the function (see tspnet.read() for format specifiers).  When this command is sent to a TSP-enabled instrument, the mainframe suspends operation until a timeout error is generated or until the instrument responds. The TSP prompt from the remote instrument is read and discarded. The mainframe places any remotely generated errors into its error queue. When the optional format string is not specified, this command is equivalent to tspnet.write(), except that a termination is automatically added to the end of the command.  Example 1  tspnet.execute(instrumentID, \"runScript()\")  Command the remote device to run a script named runScript.  Example 2  tspnet.timeout = 5  id_instr = tspnet.connect(\"192.0.2.23\", 23, \"*rst\\r\\n\")  tspnet.termination(id_instr, tspnet.TERM_CRLF)  tspnet.execute(id_instr, \"*idn?\")  print(\"tspnet.execute returns:\", tspnet.read(id_instr))  Print the *idn? string from the remote device.  Also see  tspnet.connect()  tspnet.read()  tspnet.termination()  tspnet.write()  "},{"id":197,"title":"tspnet.idn()","url":"116328.htm","text":"This function retrieves the response of the remote device to *IDN?.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  idnString = tspnet.idn(connectionID)  idnString  The returned *IDN? string  connectionID  The connection ID returned from tspnet.connect()  Details  This function retrieves the response of the remote device to *IDN?.  Example  deviceID = tspnet.connect(\"192.0.2.1\")  print(tspnet.idn(deviceID))  tspnet.disconnect(deviceID)  Assume the instrument is at IP address 192.0.2.1.  The output that is produced when you connect to the instrument and read the identification string may appear&nbsp;as:  Tektronix,Model MP5103, 1398687, 1.0.0  Also see  tspnet.connect()  "},{"id":198,"title":"tspnet.read()","url":"116329.htm","text":"This function reads data from a remote device.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  value1 = tspnet.read(connectionID)  value1 = tspnet.read(connectionID, formatString)  value1, value2 = tspnet.read(connectionID, formatString)  value1, ..., valueN = tspnet.read(connectionID, formatString)  value1  The first value decoded from the response message  value2  The second value decoded from the response message  valueN  The N&nbsp;th value decoded from the response message; there is one return value for each format specifier in the format string  ...  One or more values separated with commas  connectionID  The connection ID returned from tspnet.connect()  formatString  Format string for the output, maximum of 10 specifiers  Details  This command reads available data from the remote instrument and returns responses for the specified number of arguments.  The format string can contain the following specifiers:  %[width]s  Read data until the specified length  %[max width]t  Read data until the specified length or until punctuation is found, whichever comes first  %[max width]n  Read data until a newline or carriage return  %d  Read a number (delimited by punctuation)  A maximum of 10 format specifiers can be used for a maximum of 10 return values.  If formatString is not provided, the command returns a string that contains the data until a new line is reached. If no data is available, the mainframe pauses operation until the requested data is available or until a timeout error is generated. Use tspnet.timeout to specify the timeout period.  When the mainframe reads from a TSP-enabled remote instrument, the mainframe removes Test Script Processor (TSPTM) prompts and places any errors it receives from the remote instrument into its own error queue. The mainframe prefaces errors from the remote device with \"Remote Error,\" followed by the error number and error description.  Example  tspnet.write(deviceID, \"*idn?\\r\\n\")  print(\"write/read returns:\", tspnet.read(deviceID))  Send the \"*idn?\\r\\n\" message to the instrument connected as deviceID.  Display the response that is read from deviceID (based on the *idn? message).  Also see  tspnet.connect()  tspnet.readavailable()  tspnet.timeout  tspnet.write()  "},{"id":199,"title":"tspnet.readavailable()","url":"116330.htm","text":"This function checks if output data is available from the remote device.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  bytesAvailable = tspnet.readavailable(connectionID)  bytesAvailable  The number of bytes available to be read from the connection  connectionID  The connection ID returned from tspnet.connect()  Details  No data is read from the instrument. This allows TSP scripts to continue to run without waiting on a remote command to finish.  Example  ID = tspnet.connect(\"192.0.2.1\")  tspnet.write(ID, \"*idn?\\r\\n\")  repeat bytes = tspnet.readavailable(ID) until bytes > 0  print(tspnet.read(ID))  tspnet.disconnect(ID)  Send commands that create data.  Wait for data to be available.  Also see  tspnet.connect()  tspnet.read()  "},{"id":200,"title":"tspnet.reset()","url":"116332.htm","text":"This function disconnects all TSP-Net sessions.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tspnet.reset()  Details  This command disconnects all remote instruments connected through TSP&#8209;Net. For TSP&#8209;enabled devices, this causes any commands or scripts running remotely to be terminated.  Also see  None  "},{"id":201,"title":"tspnet.termination()","url":"116333.htm","text":"This function This function sets the device line termination sequence.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  type = tspnet.termination(connectionID)  type = tspnet.termination(connectionID, termSequence)  type  An enumerated value indicating the termination type:  1 or tspnet.TERM_LF  4 or tspnet.TERM_CR  2 or tspnet.TERM_CRLF  3 or tspnet.TERM_LFCR  connectionID  The connection ID returned from tspnet.connect()  termSequence  The termination sequence  Details  This function sets and gets the termination character sequence that is used to indicate the end of a line for a TSP-Net connection.  Using the termSequence parameter sets the termination sequence. The present termination sequence is always returned.  For the termSequence parameter, use the same values as type. There are four possible combinations, all of which are made up of line feeds (LF or 0x10) and carriage returns (CR or 0x13). For TSP-enabled devices, the default is tspnet.TERM_LF. For devices that are not TSP&#8209;enabled, the default is tspnet.TERM_CRLF.  Example  deviceID = tspnet.connect(\"192.0.2.1\")  if deviceID then     tspnet.termination(deviceID, tspnet.TERM_LF)  end  Sets termination type for IP address 192.0.2.1 to TERM_LF.  Also see  tspnet.connect()  tspnet.disconnect()  "},{"id":202,"title":"tspnet.timeout","url":"116334.htm","text":"This attribute sets the timeout value for the tspnet.connect(), tspnet.execute(), and tspnet.read() commands.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Instrument reset<br>Recall setup  Not saved  20.0 (20 s)  Usage  value = tspnet.timeout  tspnet.timeout = value  value  The timeout duration in seconds: 0.001 to 30.0  Details  This attribute sets the amount of time the tspnet.connect(), tspnet.execute(), and tspnet.read() commands wait for a response.  The time is specified in seconds. The timeout may be specified to millisecond resolution but is only accurate to the nearest 10&nbsp;ms.  Example  tspnet.timeout = 2.0  Sets the timeout duration to 2 s.  Also see  tspnet.connect()  tspnet.execute()  tspnet.read()  "},{"id":203,"title":"tspnet.tsp.abort()","url":"116335.htm","text":"This function causes the TSP-enabled instrument to stop executing any of the commands that were sent to it.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.tsp.abort(connectionID)  connectionID  Integer value used as a handle for other tspnet commands  Details  This function is appropriate only for TSP-enabled instruments.  Sends an abort command to the remote instrument.  Example  tspnet.tsp.abort(testConnection)  Stops remote instrument execution on testConnection.  Also see  None  "},{"id":204,"title":"tspnet.tsp.abortonconnect","url":"116336.htm","text":"This attribute contains the setting for abort on connect to a TSP-enabled instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Instrument reset<br>Recall setup  Not saved  1 (enable)  Usage  tspnet.tsp.abortonconnect = value  value = tspnet.tsp.abortonconnect  value  Enable: 1  Disable: 0  Details  This setting determines if the instrument sends an abort message when it attempts to connect to a TSP&#8209;enabled instrument using the tspnet.connect() function.  When you send the abort command on an interface, it causes any other active interface on that instrument to close. If you do not send an abort command (or if tspnet.tsp.abortonconnect is set to 0) and another interface is active, connecting to a TSP&#8209;enabled remote instrument results in a connection. However, the instrument does not respond to subsequent reads or executes because control of the instrument is not obtained until an abort command has been sent.  Example  tspnet.tsp.abortonconnect = 0  Configure the instrument so that it does not send an abort command when connecting to a TSP&#8209;enabled&nbsp;instrument.  Also see  tspnet.connect()  "},{"id":205,"title":"tspnet.tsp.rbtablecopy()","url":"116337.htm","text":"This function copies a reading buffer synchronous table from a remote instrument to a TSP-enabled instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  table = tspnet.tsp.rbtablecopy(connectionID, \"name\")  table = tspnet.tsp.rbtablecopy(connectionID, \"name\", startIndex, endIndex)  table  A copy of the synchronous table or a string  connectionID  Integer value used as a handle for other tspnet commands  name  The full name of the reading buffer name and synchronous table to copy  startIndex  Integer start value  endIndex  Integer end value  Details  This function is only appropriate for TSP-enabled instruments.  This function reads the data from a reading buffer on a remote instrument and returns an array of numbers or a string representing the data. The startIndex and endIndex parameters specify the portion of the reading buffer to read. If no index is specified, the entire buffer is copied.   The function returns a table if the table is an array of numbers; otherwise, a comma&#8209;delimited string is returned.  This command is limited to transferring 50,000 readings at a time.  Example  t = tspnet.tsp.rbtablecopy(testConnection, \"testRemotebuffername.readings\", 1, 3)  print(t[1], t[2], t[3])  Copy the specified readings table for buffer items 1 through 3, then display the first three readings.  Example output:  4.56534e-01  4.52675e-01  4.57535e-01  Also see  None  "},{"id":206,"title":"tspnet.tsp.runscript()","url":"116338.htm","text":"This function loads and runs a script on a remote TSP-enabled instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tspnet.tsp.runscript(connectionID, \"script\")  tspnet.tsp.runscript(connectionID, \"name\", \"script\")  connectionID  Integer value used as an identifier for other tspnet commands  name  The name that is assigned to the script  script  The body of the script as a string  Details  This function is appropriate only for TSP-enabled instruments.  This function downloads a script to a remote instrument and runs it. It automatically adds the appropriate loadscript and endscript commands around the script, captures any errors, and reads back any prompts. No additional substitutions are done on the text.  The script is automatically loaded, compiled, and run.  Any output from previous commands is discarded.  This command does not wait for the script to complete.  If you do not want the script to do anything immediately, make sure the script only defines functions for later use. Use the tspnet.execute() function to execute those functions later.  If no name is specified, the script is loaded as the anonymous script.  Example  tspnet.tsp.runscript(myconnection, \"mytest\",  \"print([[start]]) for d = 1, 10 do print([[work]]) end print([[end]])\")  Load and run a script entitled mytest on the TSP&#8209;enabled instrument connected with myconnection.  Also see  tspnet.execute()  "},{"id":207,"title":"tspnet.write()","url":"116339.htm","text":"This function writes a string to the remote instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.write(connectionID, \"inputString\")  connectionID  The connection ID returned from tspnet.connect()  inputString  The string to be written  Details  The tspnet.write() function sends inputString to the remote instrument. It does not wait for command completion on the remote instrument.  The mainframe sends inputString to the remote instrument exactly as indicated. The inputString must contain any necessary new lines, termination, or other syntax elements needed to complete properly.  Because tspnet.write() does not process output from the remote instrument, do not send commands that generate too much output without processing the output. This command can stop executing if there is too much unprocessed output from previous commands.  Example  tspnet.write(myID, \"runscript()\\r\\n\")  Commands the remote instrument to execute a command or script named runscript() on a remote device identified in the system as myID.  Also see  tspnet.connect()  tspnet.read()  "},{"id":208,"title":"userstring.add()","url":"115799.htm","text":"This function adds a user-defined string to nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  userstring.add(\"name\", \"value\")  name  The name of the string; the key of the key-value pair  value  The string to associate with name; the value of the key-value pair  Details  This function associates the string value with the string name and stores this key-value pair in nonvolatile memory.  Use the userstring.get() function to retrieve the value associated with the specified name.  You can use the userstring functions to store custom, instrument-specific information in the instrument, such as department number, asset number, or manufacturing plant location.  Example  userstring.add(\"assetnumber\", \"236\")  userstring.add(\"product\", \"Widgets\")  userstring.add(\"contact\", \"John Doe\")  for name in userstring.catalog() do     print(name .. \" = \" ..        userstring.get(name))  end  Stores user-defined strings in nonvolatile memory and recalls them from the instrument using a for loop.  Example output:  assetnumber = 236  contact = John Doe  product = Widgets  Also see  userstring.delete()  userstring.get()  userstring.table()  "},{"id":209,"title":"userstring.delete()","url":"115804.htm","text":"This function deletes a user-defined string from nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  userstring.delete(\"name\")  name  The name (key) of the key-value pair of the user&#8209;defined string to delete  Details  This function deletes the string that is associated with name from nonvolatile memory.  Example  userstring.delete(\"assetnumber\")  userstring.delete(\"product\")  userstring.delete(\"contact\")  Deletes the user-defined strings associated with the assetnumber, product, and contact names.  Also see  userstring.add()  userstring.get()  userstring.table()  "},{"id":210,"title":"userstring.get()","url":"115802.htm","text":"This function retrieves a user-defined string from nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  value = userstring.get(\"name\")  value  The value of the user&#8209;defined string key-value pair  name  The name (key) of the user&#8209;defined string  Details  This function retrieves the string that is associated with name from nonvolatile memory.  Example  userstring.add(\"assetnumber\", \"236\")  value = userstring.get(\"assetnumber\")  print(value)  Create the user-defined string assetnumber, set to a value of 236.  Read the value associated with the user-defined string named assetnumber.  Store it in a variable called value, then print the variable value.  Output:  236  Also see  userstring.add()  userstring.delete()  userstring.table()  "},{"id":211,"title":"userstring.table()","url":"115796.htm","text":"This function creates an iterator for the user&#8209;defined string catalog.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  userstringtable = userstring.table()  for name in userstring.table() do body end  userstringtable  A table that holds copies of all user string pairs  name  The name of the string; the key of the key-value pair  body  Code to execute in the body of the for loop  Details  The catalog provides access for user&#8209;defined string pairs, allowing you to manipulate all the key-value pairs in nonvolatile memory. The entries are enumerated in no particular order.  Example 1  for name in userstring.table() do     userstring.delete(name)  end  Deletes all user&#8209;defined strings in nonvolatile memory.  Example 2  userstring.add(\"assetnumber\", \"236\")  userstring.add(\"product\", \"Widgets\")  userstring.add(\"contact\", \"John Doe\")  for name, value in pairs(userstring.table()) do     print(name .. \" = \" ..        \"value\")  end  Prints all userstring key&#8209;value pairs.  Output:  product = Widgets  assetnumber = 236  contact = John Doe  Notice the key-value pairs are not listed in the order they were added.  Also see  userstring.add()  userstring.delete()  userstring.get()  "},{"id":212,"title":"waitcomplete()","url":"116240.htm","text":"This function waits for all previously started overlapped commands to complete.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  waitcomplete()  waitcomplete(group)  group  Specifies which TSP-Link group on which to wait  Details  There are two types of instrument commands:  Overlapped commands: Commands that allow the execution of subsequent commands while instrument operations of the overlapped command are still in progress.  Sequential commands: Commands whose operations must finish before the next command is executed.  The waitcomplete() command suspends the execution of commands until the instrument operations of all previous overlapped commands are finished. This command is not needed for sequential commands.  A group number may only be specified when this node is the master node.  If no group is specified, the local group is used.  If zero (0) is specified for the group, this function waits for all nodes in the system.  Example  waitcomplete()  Waits for all nodes in the local group.  Also see  None  "}]}