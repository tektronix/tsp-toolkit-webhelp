<table class="relatedtopics aboveheading" cellpadding="0" cellspacing="0" border="0">
<tr valign="top">
<td width= "18">
<p class="bodytext"><a href="15930.htm" target="_self"><img id="f125" src="4200a_lc_previous_button.png" class="linkedpngtemplate4200a-nocaption" alt="Previous Icon" height="23" width="74" vspace="0" hspace="0" align="bottom" border="0"></a></p></td>
<td width= "18">
<p class="bodytext"><a href="16200.htm" target="_self"><img id="f124" src="4200a_lc_next_button.png" class="linkedpngtemplate4200a-nocaption" alt="Next Icon" height="23" width="74" vspace="0" hspace="0" align="bottom" border="0"></a></p></td>
</tr>
</table>

<h2 id="t17546" class="heading2-icl">channel.getstate()</h2>
<p class="bodyzero">This function returns the state indicators of the channels in the instrument.</p>
<table class="tableintopic" width="672" cellpadding="2" cellspacing="0" border="2" style="border-collapse:collapse; border:2px solid #D3D3D3">
<tr align="left" valign="top">
<td bgcolor="#191970" style="border:2px solid #D3D3D3;" width="86"><p class="tableheadingwhitetext">Type</p>
</td>
<td bgcolor="#191970" style="border:2px solid #D3D3D3;" width="120"><p class="tableheadingwhitetext">TSP-Link accessible</p>
</td>
<td bgcolor="#191970" style="border:2px solid #D3D3D3;" width="144"><p class="tableheadingwhitetext">Affected by</p>
</td>
<td bgcolor="#191970" style="border:2px solid #D3D3D3;" width="144"><p class="tableheadingwhitetext">Where saved</p>
</td>
<td bgcolor="#191970" style="border:2px solid #D3D3D3;" width="178"><p class="tableheadingwhitetext">Default value</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:2px solid #D3D3D3;" width="86"><p class="tablebodytextsmall">Function</p>
</td>
<td style="border:2px solid #D3D3D3;" width="120"><p class="tablebodytextsmall">Yes</p>
</td>
<td style="border:2px solid #D3D3D3;" width="144"><p class="tablebodytextsmall">Instrument reset<br>Channel reset<br>Recall setup</p>
</td>
<td style="border:2px solid #D3D3D3;" width="144"><p class="tablebodytextsmall">Not saved</p>
</td>
<td style="border:2px solid #D3D3D3;" width="178"><p class="tablebodytextsmall">0</p>
</td>
</tr>

</table>
<p class="iclsubheading">Usage</p>
<p class="iclcode"><span class="monospaceitalic">state</span> = channel.getstate(&quot;<span class="monospaceitalic">channelList</span>&quot;)</p>
<p class="iclcode"><span class="monospaceitalic">state</span> = channel.getstate(&quot;<span class="monospaceitalic">channelList</span>&quot;, <span class="monospaceitalic">indicatorMask</span>)</p>
<p class="iclspacing"></p>
<table class="tableintopic" width="600" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #C0C0C0">
<tr align="left" valign="top">
<td style="border:1px solid #C0C0C0;" width="139"><p class="tablebodytext"><span class="monospaceitalic">state</span></p>
</td>
<td style="border:1px solid #C0C0C0;" width="461"><p class="tablebodytext">Return string listing the comma-delimited states for the channels in <span class="monospaceitalic">channelList</span></p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #C0C0C0;" width="139"><p class="tablebodytext"><span class="monospaceitalic">channelList</span></p>
</td>
<td style="border:1px solid #C0C0C0;" width="461"><p class="tablebodytext">String specifying the channels to query, using normal channel list syntax</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #C0C0C0;" width="139"><p class="tablebodytext"><span class="monospaceitalic">indicatorMask</span></p>
</td>
<td style="border:1px solid #C0C0C0;" width="461"><p class="tablebodytext">Value to specify only certain indicators; if omitted, all indicators are returned</p>
</td>
</tr>

</table>
<p class="iclsubheading">Details</p>
<p class="iclbody">Each bit in the <span class="monospaceitalic">state</span> represents a different indicator. Therefore, multiple indicators can be present (the OR operation is performed bitwise). All state or state latch commands behave in this manner.</p>
<p class="iclbody">Different channel types support different state information (indicators). The optional state <span class="monospaceitalic">indicatorMask</span> can be used to return only certain indicators. If there is no<span class="monospaceitalic"> indicatorMask</span>, then all indicators are returned.</p>
<p class="iclbody">The following status indicators are defined:</p>
<ul class="listbullet2"><li class="listbullet2"><code class="monospace">channel.IND_CLOSED</code></li><li class="listbullet2"><code class="monospace">channel.IND_OVERLOAD</code></li><li class="listbullet2"><code class="monospace">channel.IND_MATCH</code></li><li class="listbullet2"><code class="monospace">channel.IND_OVERFLOW</code></li></ul><p class="iclbody">Indicators can be latched or unlatched, depending on other system settings. Latched indicators mean that the condition has occurred since the last reset command (or power cycle). Unlatched indicators mean that the condition occurred when the <code class="monospace">channel.getstate()</code> command was issued. The overflow and overload indicators default to a latched condition.</p>
<p class="iclbody">Although the <code class="monospace">channel.getstate()</code> command returns a string representing a number, this can be easily changed to a number and then compared to one of the provided Lua constants.</p>
<p class="iclbody">For switch channels, the only state information is an indicator of relay state <code class="monospace">(channel.IND_CLOSED</code>).</p>
<p class="iclbody">For digital I/O channels, the state information includes an indicator for the state of auto protection and whether the match value has been matched (<code class="monospace">channel.IND_OVERLOAD</code> and<code class="monospace"> channel.IND_MATCH</code>).</p>
<p class="iclbody">For totalizer channels, the state information includes an indicator for overflow and whether the match value has been matched (<code class="monospace">channel.IND_OVERFLOW</code> and<code class="monospace"> channel.IND_MATCH</code>).</p>
<p class="iclbody">For DAC channels, the state information includes an indicator for the state of auto protection<code class="monospace"> (channel.IND_OVERLOAD</code>).</p>
<p class="iclbody">For more specific information about the overflow and overload indicators, refer to the documentation for the specific card on which the specified channel resides.</p>
<p class="iclsubheading">Example 1</p>
<p class="iclspacing"></p>
<table class="tableintopic" width="600" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #C0C0C0">
<tr align="left" valign="top">
<td bgcolor="#E0E0E0" style="border:1px solid #C0C0C0;" width="600"><p class="codetable">channel.close(&quot;4005, 4007, 4017, 4003&quot;)  </p>
<p class="codetable">State = channel.getstate(&quot;4001:4020&quot;)</p>
<p class="codetable">print(State)</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #C0C0C0;" width="600"><p class="tablebodytext">Close channels 5, 7, 17, and 3 on slot 4.</p>
<p class="tablebodytext">Query the state of the first 20 channels on slot 4.</p>
<p class="tablebodytext">View the response assigned to State.</p>
<p class="tablebodytext">Output (assuming a Model 3720):</p>
<p class="codetable">0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0</p>
</td>
</tr>

</table>
<p class="iclsubheading">Example 2</p>
<p class="iclspacing"></p>
<table class="tableintopic" width="600" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #C0C0C0">
<tr align="left" valign="top">
<td bgcolor="#E0E0E0" style="border:1px solid #C0C0C0;" width="600"><p class="codetable">PathList = channel.pattern.getimage(&quot;Path&quot;)</p>
<p class="codetable">print(Path)</p>
<p class="codetable">print(channel.getstate(Path))</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #C0C0C0;" width="600"><p class="tablebodytext">See the state of channels and analog backplane relays in the channel pattern called<code class="monospace"> &quot;Path&quot;</code>.</p>
<p class="tablebodytext">Output:</p>
<p class="codetable">4003,4005,4007,4017,4911,4922</p>
<p class="codetable">1,1,1,1,1,1</p>
</td>
</tr>

</table>
<p class="iclsubheading">Example 3</p>
<p class="iclspacing"></p>
<table class="tableintopic" width="600" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #C0C0C0">
<tr align="left" valign="top">
<td bgcolor="#E0E0E0" style="border:1px solid #C0C0C0;" width="600"><p class="codetable">PathState = channel.getstate(&quot;Path&quot;)</p>
<p class="codetable">print(PathState)</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #C0C0C0;" width="600"><p class="tablebodytext">Another way to see the state of channels and analog backplane relays in channel pattern <code class="monospace">&quot;Path&quot;</code> in Example 2 without getting the channels and analog backplane relays first.</p>
<p class="tablebodytext">Output:</p>
<p class="codetable">1,1,1,1,1,1</p>
</td>
</tr>

</table>
<p class="iclsubheading">Example 4</p>
<p class="iclspacing"></p>
<table class="tableintopic" width="600" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #C0C0C0">
<tr align="left" valign="top">
<td bgcolor="#E0E0E0" style="border:1px solid #C0C0C0;" width="600"><p class="codetable">if bit.bitand(channel.IND_OVERLOAD,</p>
<p class="codetable">   tonumber(channel.getstate(&quot;4010&quot;))) == 1</p>
<p class="codetable">then</p>
<p class="codetable">   print(&quot;OVERLOAD&quot;)</p>
<p class="codetable">end</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #C0C0C0;" width="600"><p class="tablebodytext">Use the following command to check for an overload on a DAC channel.</p>
<p class="tablebodytext">In the previous example, <code class="monospace">channel.getstate()</code> returns a string that is converted to a number using the Lua<code class="monospace"> tonumber()</code> command.<code class="monospace"> channel.IND_OVERLOAD</code> equates to the number 2. Because the state is a bit-oriented value, a logical AND operation must be performed on the state and the overload constant to isolate it from other indicators.</p>
<p class="tablebodytext">The <code class="monospace">tonumber()</code> command only works with a single channel. When multiple channels are returned (for example, <code class="monospace">channel.getstate(&quot;slot4&quot;)</code>), this string must be parsed by the comma delimiter to find each value.</p>
</td>
</tr>

</table>
<p class="iclsubheading">Also see</p>
<p class="listcommand"><a id="h768" class="jump" title="channel.getclose()" href="17247.htm" target="_self">channel.getclose()</a></p>
<p class="listcommand"><a id="h7782" class="jump" title="channel.setmatch()" href="17541.htm" target="_self">channel.setmatch()</a></p>


