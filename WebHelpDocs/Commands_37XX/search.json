{"pages":[{"id":1,"title":"beeper.beep()","url":"18841.htm","text":"This function generates an audible tone.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  beeper.beep(duration, frequency)  duration  The amount of time to play the tone (0.001&nbsp;s to 100&nbsp;s)  frequency  The frequency of the tone in Hertz&nbsp;(Hz)  Details  You can use the beeper of the Series 3700A to provide an audible signal at a specified frequency and time duration. For example, you can use the beeper to signal the end of a lengthy sweep.  The beeper does not sound if it is disabled. It can be disabled or enabled with the beeper enable command, or through the front panel.  Example  beeper.enable = beeper.ON  beeper.beep(2, 2400)  Enables the beeper and generates a two&#8209;second, 2400&nbsp;Hz tone.  Also see  beeper.enable  "},{"id":2,"title":"beeper.enable","url":"14435.htm","text":"This command allows you to turn the beeper on or off.  Type  TSP-Link accessible  Affected by  Where saved  Default value  (RW)Attribute (RW)  Yes  Recall setup<br>Instrument reset  Saved setup<br>Create configuration script  1 (beeper.ON)  Usage  state = beeper.enable  beeper.enable = state  state  Disable the beeper: beeper.OFF or 0  Enable the beeper: beeper.ON or 1  Details  This command enables or disables the beeper. When enabled, a beep signals that a front&#8209;panel key has been pressed. Disabling the beeper also disables front&#8209;panel key clicks.  Example  beeper.enable = beeper.ON  beeper.beep(2, 2400)  Enables the beeper and generates a two&#8209;second, 2400&nbsp;Hz tone.  Also see  beeper.beep()  "},{"id":3,"title":"bit.bitand()","url":"14632.htm","text":"This function performs a bitwise logical AND operation on two numbers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.bitand(value1, value2)  result  Result of the logical AND operation  value1  Operand for the logical AND operation  value2  Operand for the logical AND operation  Details  Any fractional parts of value1 and value2 are truncated to form integers. The returned result is also an&nbsp;integer.  Example  testResult = bit.bitand(10, 9)  print(testResult)  Performs a logical AND operation on decimal 10 (binary 1010) with decimal 9 (binary 1001), which returns a value of decimal 8 (binary 1000).  Output:  8.00000e+00  Also see  Bit manipulation and logic operations  bit.bitor()  bit.bitxor()  "},{"id":4,"title":"bit.bitor()","url":"14634.htm","text":"This function performs a bitwise logical OR operation on two numbers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.bitor(value1, value2)  result  Result of the logical OR operation  value1  Operand for the logical OR operation  value2  Operand for the logical OR operation  Details  Any fractional parts of value1 and value2 are truncated to make them integers. The returned result is also an&nbsp;integer.  Example  testResult = bit.bitor(10, 9)  print(testResult)  Performs a bitwise logical OR operation on decimal 10 (binary 1010) with decimal 9 (binary 1001), which returns a value of decimal 11 (binary 1011).  Output:  1.10000e+01  Also see  Bit manipulation and logic operations  bit.bitand()  bit.bitxor()  "},{"id":5,"title":"bit.bitxor()","url":"14635.htm","text":"This function performs a bitwise logical XOR (exclusive OR) operation on two numbers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.bitxor(value1, value2)  result  Result of the logical XOR operation  value1  Operand for the logical XOR operation  value2  Operand for the logical XOR operation  Details  Any fractional parts of value1 and value2 are truncated to make them integers. The returned result is also an integer.  Example  testResult = bit.bitxor(10, 9)  print(testResult)  Performs a logical XOR operation on decimal 10 (binary 1010) with decimal 9 (binary 1001), which returns a value of decimal 3 (binary 0011).  Output:  3.00000e+00  Also see  Bit manipulation and logic operations  bit.bitand()  bit.bitor()  "},{"id":6,"title":"bit.clear()","url":"14636.htm","text":"This function clears a bit at a specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.clear(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to clear (1 to 32)  Details  Any fractional part of value is truncated to make it an integer. The returned result is also an integer.  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  Example  testResult = bit.clear(15, 2)  print(testResult)  The binary equivalent of decimal 15 is 1111. If you clear the bit at index position 2, the returned decimal value is 13 (binary&nbsp;1101).  Output:  1.30000e+01  Also see  Bit manipulation and logic operations  bit.get()  bit.set()  bit.test()  bit.toggle()  "},{"id":7,"title":"bit.get()","url":"14637.htm","text":"This function retrieves the weighted value of a bit at a specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.get(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to get (1 to 32)  Details  This function returns the value of the bit in value at index. This is the same as returning value with all other bits set to zero&nbsp;(0).  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  If the indexed bit for the number is set to zero (0), the result is zero (0).  Example  testResult = bit.get(10, 4)  print(testResult)  The binary equivalent of decimal 10 is 1010. If you get the bit at index position 4, the returned decimal value&nbsp;is 8.  Output:  8.00000e+00  Also see  Bit manipulation and logic operations  bit.clear()  bit.set()  bit.test()  bit.toggle()  "},{"id":8,"title":"bit.getfield()","url":"14638.htm","text":"This function returns a field of bits from the value starting at the specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.getfield(value, index, width)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to get (1 to 32)  width  The number of bits to include in the field (1 to 32)  Details  A field of bits is a contiguous group of bits. This function retrieves a field of bits from value starting at&nbsp;index.  The index position is the least significant bit of the retrieved field. The number of bits to return is specified by&nbsp;width.  The least significant bit of value is at index position 1; the most significant bit is at index&nbsp;position&nbsp;32.  Example  myResult = bit.getfield(13, 2, 3)  print(myResult)  The binary equivalent of decimal 13 is 1101.   The field at index position 2 and width 3 consists of the binary bits 110. The returned value is decimal 6 (binary 110).  Output:  6.00000e+00  Also see  Bit manipulation and logic operations  bit.get()  bit.set()  bit.setfield()  "},{"id":9,"title":"bit.set()","url":"14639.htm","text":"This function sets a bit at the specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.set(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to set (1 to 32)  Details  This function returns result, which is value with the indexed bit set. The index must be between&nbsp;1&nbsp;and 32.  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  Any fractional part of value is truncated to make it an integer.  Example  testResult = bit.set(8, 3)  print(testResult)  The binary equivalent of decimal 8 is 1000. If the bit at index position 3 is set to 1, the returned value is decimal 12 (binary&nbsp;1100).  Output:  1.20000e+01  Also see  Bit manipulation and logic operations  bit.clear()  bit.get()  bit.getfield()  bit.setfield()  bit.test()  bit.toggle()  "},{"id":10,"title":"bit.setfield()","url":"14640.htm","text":"This function overwrites a bit field at a specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.setfield(value, index, width, fieldValue)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position in value to set (1 to 32)  width  The number of bits to include in the field (1 to 32)  fieldValue  Value to write to the field  Details  This function returns result, which is value with a field of bits overwritten, starting at index. The index specifies the position of the least significant bit of value. The width bits starting at index are set to&nbsp;fieldValue.  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  Before setting the field of bits, any fractional parts of value and fieldValue are truncated to form integers.  If fieldValue is wider than width, the most significant bits of the fieldValue that exceed the width are truncated. For example, if width is 4 bits and the binary value for fieldValue is 11110 (5&nbsp;bits), the most significant bit of fieldValue is truncated and a binary value of 1110 is used.  Example  testResult = bit.setfield(15, 2, 3, 5)  print(testResult)  The binary equivalent of decimal 15 is 1111. After overwriting it with a decimal 5 (binary 101) at index position 2, the returned value is decimal 11 (binary 1011).  Output:  1.10000e+01  Also see  Bit manipulation and logic operations  bit.get()  bit.set()  bit.getfield()  "},{"id":11,"title":"bit.test()","url":"14641.htm","text":"This function returns the Boolean value (true or false) of a bit at the specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.test(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to test (1 to 32)  Details  This function returns result, which is the result of the tested bit.   The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  If the indexed bit for value is 0, result is false. If the bit of value at index is 1, the returned value is&nbsp;true.  If index is bigger than the number of bits in value, the result is false.  Example  testResult = bit.test(10, 4)  print(testResult)  The binary equivalent of decimal 10 is 1010. Testing the bit at index position 4 returns a Boolean value of&nbsp;true.  Output:  true  Also see  Bit manipulation and logic operations  bit.clear()  bit.get()  bit.set()  bit.toggle()  "},{"id":12,"title":"bit.toggle()","url":"14642.htm","text":"This function toggles the value of a bit at a specified index position.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  result = bit.toggle(value, index)  result  Result of the bit manipulation  value  Specified number  index  One&#8209;based bit position within value to toggle (1 to 32)  Details  This function returns result, which is the result of toggling the bit index in value.  Any fractional part of value is truncated to make it an integer. The returned value is also an integer.  The least significant bit of value is at index position 1; the most significant bit is at index position&nbsp;32.  The indexed bit for value is toggled from 0 to 1, or 1 to 0.  Example  testResult = bit.toggle(10, 3)  print(testResult)  The binary equivalent of decimal 10 is 1010. Toggling the bit at index position 3 returns a decimal value of 14 (binary&nbsp;1110).  Output:  1.40000e+01  Also see  Bit manipulation and logic operations  bit.clear()  bit.get()  bit.set()  bit.test()  "},{"id":13,"title":"bufferVar.appendmode","url":"15127.htm","text":"This attribute sets the state of the append mode of the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Saved setup  See Details  Usage  state = bufferVar.appendmode  bufferVar.appendmode = state  state  The reading buffer append mode; set to one of the following:  0: Append mode off; new measurement data overwrites the previous buffer&nbsp;content  1: Append mode on; appends new measurement data to the present buffer&nbsp;content  bufferVar  The reading buffer  Details  Assigning a value to this attribute enables or disables the buffer append mode. This value can only be changed with an empty buffer. Use bufferVar.clear() to empty the buffer.  When a buffer is created over a remote interface, the append mode attribute default setting is off (0). However, when using the front panel or web interface, the default setting is on (1) to allow triggered readings to fill a buffer without clearing the previous readings.  If the append mode is set to 0, any stored readings in the buffer are cleared before new ones are stored. If append mode is set to 1, any stored readings remain in the buffer and new readings are added to the buffer after the stored readings.  With append mode on, the first new measurement is stored at rb[n+1], where n is the number of readings stored in buffer rb.  Example  buffer1.appendmode = 1  Append new readings to contents of the reading buffer named buffer1.  Also see  bufferVar.clear()  Reading buffers  "},{"id":14,"title":"bufferVar.basetimefractional","url":"20150.htm","text":"When enabled by the bufferVar.collecttimestamps attribute, this attribute contains the fractional portion of the timestamp (in seconds) for the first reading stored in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  value = bufferVar.basetimefractional  value  The fractional seconds of the timestamp  bufferVar  The reading buffer  Details  The bufferVar.basetimefractional information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you will not be able to access any time information from a reading buffer. You may change the collect timestamps setting when the buffer is empty (bufferVar.clear()).  A read-only attribute for each existing reading buffer in the instrument.   The attribute represents the fractional seconds of the timestamp when reading 1 was stored in the buffer  Example  baseFractional = buffer1.basetimefractional  Read the basetimefractional attribute for buffer1 and store it in a variable called baseFractional.  Also see  bufferVar.clear()  bufferVar.collecttimestamps  Reading buffers  "},{"id":15,"title":"bufferVar.basetimeseconds","url":"20151.htm","text":"When enabled by the bufferVar.collecttimestamps attribute, this attribute represents the nonfractional seconds of the timestamp for the first reading stored in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  value = bufferVar.basetimeseconds  value  The nonfractional seconds of the timestamp  bufferVar  The reading buffer  Details  The basetime seconds information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you will not be able to access any time information from a reading buffer. You may change the collect timestamps setting when the buffer is empty (bufferVar.clear()).  This attribute is a read&#8209;only attribute for each existing reading buffer in the instrument.   This attribute represents the nonfractional seconds of the timestamp when reading 1 was stored in the buffer.  Example  basedSeconds = buffer1.basetimeseconds  Read the basetimeseconds attribute for buffer1 and store in a variable called baseSeconds.  Also see  bufferVar.clear()  bufferVar.collecttimestamps  Reading buffers  "},{"id":16,"title":"bufferVar.cachemode","url":"17109.htm","text":"This attribute enables or disables the reading buffer cache (on or off).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Clearing the buffer cache<br>Instrument reset<br>Recall setup  Not saved  1 (enabled)  Usage  cacheMode = bufferVar.cachemode  bufferVar.cachemode = cacheMode  cacheMode  The reading buffer cache mode; set to one of the following:  0: Cache mode disabled (off)  1: Cache mode enabled (on)  bufferVar  The reading buffer  Details  Assigning a value to this attribute enables or disables the reading buffer cache. When enabled, the reading buffer cache improves access speed to reading buffer data.   If you run successive operations that overwrite reading buffer data, the reading buffer may return stale cache data. To avoid this, make sure that you include commands that automatically invalidate the cache as needed (for example, explicit calls to the bufferVar.clearcache() function) or disable the cache using this attribute (bufferVar.cachemode).  Example  buffer1.cachemode = 1  Enables reading buffer cache.  Also see  bufferVar.clearcache()  Reading buffers  "},{"id":17,"title":"bufferVar.capacity","url":"15129.htm","text":"This attribute sets the number of readings a buffer can store.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  Not applicable  Usage  bufferCapacity = bufferVar.capacity  bufferCapacity  The maximum number of readings the buffer can store  bufferVar  The reading buffer  Details  This read-only attribute reads the number of readings that can be stored in the buffer.  Example  bufferCapacity = buffer1.capacity  print(bufferCapacity)  Reads the capacity of a reading buffer named buffer1.  Output:  1.00000e+05  The above output indicates that the buffer can hold 100000 readings.  Also see  Reading buffers  "},{"id":18,"title":"bufferVar.channels","url":"20152.htm","text":"When enabled by the bufferVar.collectchannels attribute, this buffer recall attribute gets the channel, backplane relay, or channel pattern information stored with readings in the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  channels = bufferVar.channels[N]  bufferVar  The reading buffer  N  The reading number (1 to bufferVar.n)  Details  The channels information from a reading buffer is only available if the bufferVar.collectchannels attribute is set to 1 (default setting). If it is set to 0, you will not be able to access the channels information from a reading buffer. You may change the collect channels setting when the buffer is empty (bufferVar.clear()).  This read&#8209;only attribute is an array (a Lua table) of strings indicating the channel or channel pattern associated with the measurement.   The returned value provides different information, based on what was opened or closed when the reading was acquired:  If no channel or channel pattern is closed when the reading was acquired, None is displayed.   If only a single channel or backplane relay was closed, the channel number is displayed (for example, 5003 or 5915).   If a channel or backplane relay plus another backplane relay or other channel is closed, then the channel number is displayed followed by a plus sign (+) (for example, 3005+ or 3915+). The channel is in the image unless the last close operation involved only backplane relays.  If multiple channels and backplane relays were closed in a channel list, the last channel specified is stored. Channels take precedence over backplane relays when stored. However, if only multiple backplane relays are specified, then the first one is stored.  If a channel pattern was closed, then the first seven characters of the channel pattern name are returned (for example, mypattern1 is shown as mypatte).  Example  reset()   testData = dmm.makebuffer(1000)  testData.collectchannels = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.channels[1])  printbuffer(1, 6, testData.channels)  This example creates a reading buffer named testData, configures the buffer to collect channel data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  The print() command then outputs the first measurement channel.   Output:  2035+<br>  The printbuffer() command then outputs the channels for measurements 1 to 6 in the reading buffer.   Output:  2035+, 2036+, 2037+, 2038+, 2039+, 2040+  Also see  bufferVar.clear()  bufferVar.collectchannels  Reading buffers  "},{"id":19,"title":"bufferVar.clear()","url":"15130.htm","text":"This function empties the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  bufferVar.clear()  bufferVar  The reading buffer  Details  This function clears all readings and statistics from the specified buffer (for example, time, status, channels, and units) from the specified buffer.  Example  testData = dmm.makebuffer(50)  testData.appendmode = 1  dmm.measurecount = 3  dmm.measure(testData)<br>  printbuffer(1,testData.n, testData )<br>  testData.clear()  print(\"Readings in buffer after clear =\" <br>   .. testData.n)<br>  dmm.measurecount = 3  dmm.measure(testData)  printbuffer(1,testData.n, testData )  Create a reading buffer named testData and enable append mode for it. Make three readings and store them in testData, and then view the readings.   Output:  3.515871341e&#8209;07, 5.596728126e&#8209;07, 3.944283032e&#8209;07  Clear the data and verify there are no readings in buffer.   Output:  Readings in buffer after clear =  0  Store three new readings in the buffer and view those when done.  Output:  4.923509754e&#8209;07, 3.332266330e&#8209;07, 3.974883867e&#8209;07  Also see  Reading buffers  "},{"id":20,"title":"bufferVar.clearcache()","url":"15131.htm","text":"This function clears the cache.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  bufferVar.clearcache()  bufferVar  The reading buffer  Details  This function clears all readings from the specified cache.   If you run successive operations that overwrite reading buffer data, the reading buffer may return stale cache data. This can happen when initiating successive scans without reconfiguring the scan measurements. Watch for this when running Lua code remotely on more than one node, because values in the reading buffer cache may change while the Lua code is running.To avoid this, you can include explicit calls to the bufferVar.clearcache() function to remove stale values from the reading buffer cache.  Example  testData.clearcache()  Clears the reading buffer cache for a user&#8209;defined buffer named testData.  Also see  bufferVar.cachemode  Reading buffers  "},{"id":21,"title":"bufferVar.collectchannels","url":"20153.htm","text":"This attribute sets the storage state of channel information with the readings in the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  1 (enabled)  Usage  state = bufferVar.collectchannels  bufferVar.collectchannels = state  state  The reading buffer collect channels mode; set to one of the following:  0: Collect channels mode disabled (off); channel information is not stored in the reading buffer  1: Collect channels mode enabled (on); channel information is stored in the reading buffer  bufferVar  The reading buffer  Details  Assigning a value to this attribute enables or disables the storage of channel information, which includes channel, backplane relay, or channel pattern information associated with the reading. Reading this attribute returns the state of channel information collection.  When on, channel information is stored with readings in the buffer. This requires eight extra bytes of storage per reading.   This value, off (0) or on (1), can only be changed when the buffer is empty. Empty the buffer using the bufferVar.clear() function.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collectchannels = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.channels[1])  printbuffer(1, 6, testData.channels)  This example creates a reading buffer named testData, configures the buffer to collect channel data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  The print() command then outputs the first measurement channel.   Output:  2035+<br>  The printbuffer() command then outputs the channels for measurements 1 to 6 in the reading buffer.   Output:  2035+, 2036+, 2037+, 2038+, 2039+, 2040+  Also see  bufferVar.clear()  bufferVar.channels  Reading buffers  "},{"id":22,"title":"bufferVar.collecttimestamps","url":"15133.htm","text":"This attribute sets whether or not timestamp values are stored with the readings in the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  1 (enabled)  Usage  state = bufferVar.collecttimestamps  bufferVar.collecttimestamps = state  state  Timestamp value collection status; set to one of the following:  0: Timestamp value collection disabled (off)  1: Timestamp value collection enabled (on)  bufferVar  The reading buffer  Details  Assigning a value to this attribute enables or disables the storage of timestamps. Reading this attribute returns the state of timestamp collection.   When on, timestamp values are stored with readings in the buffer. This requires four extra bytes of storage for each reading.   The state variable can only be changed when the buffer is empty. Empty the buffer using the bufferVar.clear() function.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collecttimestamps = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.timestamps[1])  printbuffer(1, 6, testData.timestamps)  This example creates a reading buffer named testData, configures the buffer to collect timestamp data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.   <br>The print() command then outputs the first measurement timestamp.   Output:  07/11/2011 09:14:48.509762161  The printbuffer() command then outputs the timestamps for measurements 1 to 6 in the reading buffer.   Output:  07/11/2011 09:14:48.509762161, 07/11/2011 09:14:48.528708001, 07/11/2011 09:14:48.547659196, 07/11/2011 09:14:48.566612446, 07/11/2011 09:14:48.585565606, 07/11/2011 09:14:48.681325966  Also see  bufferVar.clear()  bufferVar.timestamps  Reading buffers  "},{"id":23,"title":"bufferVar.dates","url":"20154.htm","text":"When enabled by the bufferVar.collecttimestamps attribute, this attribute contains the dates (month, day, and year) of readings stored in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  dates = bufferVar.dates[N]  bufferVar  The reading buffer  N  The reading number (1 to bufferVar.n)  Details  The bufferVar.dates information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you cannot access any time information from a reading buffer. You may change the collect timestamps setting when the buffer is empty (bufferVar.clear()).  This read&#8209;only attribute is an array (a Lua table) of strings indicating the date of the reading, formatted in month, day, and year format.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collecttimestamps = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.dates[1])  printbuffer(1, 6, testData.dates)  This example creates a reading buffer named testData, configures the buffer to collect time and date data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  <br>The print() command then outputs the first measurement date.   Output:  07/11/2011  The printbuffer() command then outputs the dates for measurements 1 to 6 in the reading buffer.   Output:  07/11/2011, 07/11/2011, 07/11/2011, 07/11/2011, 07/11/2011, 07/11/2011  Also see  bufferVar.clear()  bufferVar.collecttimestamps  Reading buffers  "},{"id":24,"title":"bufferVar.formattedreadings","url":"20155.htm","text":"This attribute contains the stored readings shown as numbers with units and prefixes.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  readings = bufferVar.formattedreadings[N]  bufferVar  The reading buffer  N  The reading number (1 to bufferVar.n)  Details  This read&#8209;only attribute is an array that contains the stored readings. The readings are shown as numbers with prefixes before the units symbol.  Use this attribute to access the reading elements N as they appear on the front panel.  Example  reset()   testData = dmm.makebuffer(1000)  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.formattedreadings[1])  printbuffer(1, 6, testData.formattedreadings)  This example creates a reading buffer named testData, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  The print() command outputs the first reading, formatted as it appears on the front&#8209;panel display.   Output:  +000.0006e&#8209;3  The printbuffer() command then outputs readings 1 to 6 in the reading buffer as they appear on the front&#8209;panel display.  Output:  6.000000000e&#8209;07, 7.000000000e&#8209;07, 5.000000000e&#8209;07, 7.000000000e&#8209;07, 7.000000000e&#8209;07, 6.000000000e&#8209;07  Also see  bufferVar.readings  Reading buffers  "},{"id":25,"title":"bufferVar.fractionalseconds","url":"20156.htm","text":"This attribute contains the fractional second portion of the timestamp of each reading in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  fractionalseconds = bufferVar.fractionalseconds[N]  fractionalseconds  The fractional portion of the timestamp (in seconds) when each reading occurred  bufferVar  The reading buffer  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the&nbsp;buffer  Details  The bufferVar.fractionalseconds information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you will not be able to access any time information from a reading buffer. You may change the collect timestamps setting when the buffer is empty (bufferVar.clear()).  This read&#8209;only attribute is an array (a Lua table) of the fractional portion of the timestamps, in seconds, of when each reading occurred. These are absolute fractional times.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collecttimestamps = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.fractionalseconds[1])  printbuffer(1, 6, testData.fractionalseconds)  This example creates a reading buffer named testData, configures the buffer to collect time and date data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  <br>The print() command outputs the fractional portion of the timestamp for the first measurement in the buffer.   Output:  5.097621610e-01<br>  The printbuffer() command then outputs the fractional portion of the timestamp for the first six measurements in the buffer.   Output:  5.097621610e&#8209;01, 5.287080010e&#8209;01, 5.476591960e&#8209;01, 5.666124460e&#8209;01, 5.855656060e&#8209;01, 6.813259660e&#8209;01  Also see  bufferVar.clear()  bufferVar.collecttimestamps  Reading buffers  "},{"id":26,"title":"bufferVar.n","url":"15134.htm","text":"This attribute contains the number of readings in the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer<br>Reset<br>Recall setup  Not saved  Not applicable  Usage  numberOfReadings = bufferVar.n  numberOfReadings  The number of readings stored in the buffer  bufferVar  The reading buffer  Details  This read-only attribute contains the number of readings presently stored in the buffer.  Example  numberOfReadings = buffer1.n  print(numberOfReadings)  Reads the number of readings stored in a reading buffer named buffer1.  Output:   1.250000+02  The above output indicates that there are 125 readings stored in the buffer.  Also see  bufferVar.formattedreadings  bufferVar.fractionalseconds  bufferVar.readings  bufferVar.relativetimestamps  bufferVar.seconds  bufferVar.statuses  bufferVar.times  bufferVar.units  Reading buffers  "},{"id":27,"title":"bufferVar.ptpseconds","url":"20157.htm","text":"When enabled by the bufferVar.collecttimestamps attribute, this attribute contains the absolute seconds portion of the timestamp of when the reading was stored, in PTP format.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  value = bufferVar.ptpseconds[N]  bufferVar  The reading buffer  N  The reading number (1 to bufferVar.n)  Details  The ptp seconds information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you will not be able to access any time information from a reading buffer. You may change the collect timestamps setting when the buffer is empty (bufferVar.clear()).  These seconds are absolute and in PTP format.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collecttimestamps = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.ptpseconds[1])  printbuffer(1, 6, testData.ptpseconds)  This example creates a reading buffer named testData, configures the buffer to collect time and date data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  <br>The print() command outputs the absolute seconds portion of the timestamp of first measurement in the buffer, in PTP format.  Output:  1.310375688e+09<br>  The printbuffer() command outputs the absolute seconds portion of the timestamp for measurements 1 to 6 in the reading buffer, in PTP format.   Output:  1.310375688e+09, 1.310375688e+09, 1.310375688e+09, 1.310375688e+09, 1.310375688e+09, 1.310375688e+09  Also see  bufferVar.clear()  bufferVar.collecttimestamps  Reading buffers  "},{"id":28,"title":"bufferVar.readings","url":"19920.htm","text":"This attribute contains the readings stored in a specified reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  reading = bufferVar.readings[N]  reading  The value of the reading in the specified reading buffer  bufferVar  The reading buffer  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the&nbsp;buffer  Details  The bufferVar.readings buffer recall attribute is like an array (a Lua table) of the readings stored in the reading buffer. This array holds the same data that is returned when the reading buffer is accessed directly; that is, rb[2] and rb.readings[2] access the same value.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collectchannels = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.readings[1])  printbuffer(1, 6, testData.readings)  This example creates a reading buffer named testData, configures the buffer to collect channel data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  The print() command then outputs the first reading in the reading buffer.   Output:  6.239269805e-07<br>  The printbuffer() command then outputs the readings for measurements 1 to 6 in the reading buffer.   Output:  6.239269805e&#8209;07, 6.943093615e&#8209;07, 4.954026325e&#8209;07, 7.432710179e&#8209;07, 6.943093615e&#8209;07, 6.331072911e&#8209;07  NOTE: An alternative way to use the printbuffer() command for this example is printbuffer(1, 6, testData), because \"readings\" is an optional parameter and is assumed if it has not been specified.  Also see  bufferVar.formattedreadings  bufferVar.fractionalseconds  bufferVar.relativetimestamps  bufferVar.seconds  bufferVar.statuses  bufferVar.times  bufferVar.units  Reading buffers  "},{"id":29,"title":"bufferVar.relativetimestamps","url":"20158.htm","text":"This attribute contains the timestamps, in seconds, when each reading occurred, relative to the timestamp of the first entry in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  1  Usage  timestamp = bufferVar.relativetimestamps[N]  timestamp  The timestamp, in seconds  bufferVar  The reading buffer  N  The reading number (1 to bufferVar.n)  Details  The relative timestamps information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you will not be able to access any time information from a reading buffer. You may change the collect timestamps setting when the buffer is empty (bufferVar.clear()).  This read&#8209;only attribute is an array of timestamps, in seconds, of when each reading occurred relative to the timestamp of the first entry in the reading buffer. These timestamps are equal to the time that has lapsed for each reading since the first reading was stored in the buffer. Therefore, the relative timestamp for the first entry number in the reading buffer equals 0.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collecttimestamps = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.relativetimestamps[1])  printbuffer(1, 6, testData.relativetimestamps)  This example creates a reading buffer named testData, configures the buffer to collect time and date data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  <br>The print() command then outputs the relative timestamp of the first measurement in the reading buffer.   Output:  0.000000000e+00<br>  The printbuffer() command then outputs the relative timestamp for measurements 1 to 6 in the reading buffer.   Output:  0.000000000e+00, 1.894584000e&#8209;02, 3.789703500e&#8209;02, 5.685028500e&#8209;02, 7.580344500e&#8209;02, 1.715638050e&#8209;01  Also see  bufferVar.clear()  bufferVar.collecttimestamps  Reading buffers  "},{"id":30,"title":"bufferVar.seconds","url":"20159.htm","text":"This attribute contains the timestamp of a reading in seconds, in UTC format.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  seconds = bufferVar.seconds[N]  seconds  The nonfractional seconds portion of the timestamp when the reading was stored  bufferVar  The reading buffer  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the&nbsp;buffer  Details  The bufferVar.seconds information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you will not be able to access any time information from a reading buffer. You may change the collect timestamps setting when the buffer is empty (bufferVar.clear()).  This attribute contains the nonfractional seconds portion of the timestamp when the reading was stored in Coordinated Universal Time (UTC) format.  The nonfractional seconds portion of the timestamp gives the lowest resolution down to 1 second. To access additional resolution of a timestamp, see bufferVar.fractionalseconds.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collecttimestamps = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.seconds[1])  printbuffer(1, 6, testData.seconds)  This example creates a reading buffer named testData, configures the buffer to collect time and date data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  <br>The print() command then outputs the seconds portion of the timestamp of the first reading in the reading buffer.   Output:  1.310375688e+09  The printbuffer() command then outputs the seconds portion of the timestamps for measurements 1 to 6 in the reading buffer.   Output:  1.310375688e+09, 1.310375688e+09, 1.310375688e+09, 1.310375688e+09, 1.310375688e+09, 1.310375688e+09  Also see  bufferVar.clear()  bufferVar.collecttimestamps  Reading buffers  "},{"id":31,"title":"bufferVar.statuses","url":"19921.htm","text":"This attribute contains the status values of readings in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  statusInformation = bufferVar.statuses[N]  statusInformation  The status value when reading N of the specified buffer was acquired  bufferVar  The reading buffer  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the&nbsp;buffer  Details  This read&#8209;only buffer recall attribute is like an array (a Lua table) of the status values for all the readings in the buffer. The status values are floating-point numbers that encode the status value; see the following table for&nbsp;values.   Buffer status bits  Bit  Name  Hex value  Remote command  B0  Low limit 1   0x01  dmm.buffer.LIMIT1_LOW_BIT  B1  High limit 1   0x02  dmm.buffer.LIMIT1_HIGH_BIT  B2  Low limit 2   0x04  dmm.buffer.LIMIT2_LOW_BIT  B3  High limit 2   0x08  dmm.buffer.LIMIT2_HIGH_BIT  B6  Measure overflow  0x40  dmm.buffer.MEAS_OVERFLOW_BIT  B7  Measure connect question  0x80  dmm.buffer.MEAS_CONNECT_QUESTION_BIT  Example  reset()   testData = dmm.makebuffer(1000)  testData.collectchannels = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.statuses[1])  printbuffer(1, 6, testData.statuses)  This example creates a reading buffer named testData, configures the buffer to collect channel data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  The print() command then outputs the status value of the first measurement channel in the reading buffer.   Output:  0.000000000e+00<br>  The printbuffer() command then outputs the status values for measurements 1 to 6 in the reading buffer.   Output:  0.000000000e+00, 0.000000000e+00, 0.000000000e+00, 0.000000000e+00, 0.000000000e+00, 0.000000000e+00  Also see  bufferVar.timestamps  Reading buffers  "},{"id":32,"title":"bufferVar.times","url":"20160.htm","text":"When enabled by the bufferVar.collecttimestamps attribute, this attribute contains the time of the readings (in hours, minutes, and seconds format) in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  readingtime = bufferVar.times[N]  readingtime  The time of the reading in hours, minutes, and seconds  bufferVar  The reading buffer  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the&nbsp;buffer  Details  The times information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you cannot access any time information from a reading buffer. You may change the collect timestamps setting when the buffer is empty (bufferVar.clear()).  This read&#8209;only attribute is an array (a Lua table) of strings indicating the time of the reading formatted in hours, minutes, and seconds.   These seconds are absolute and in UTC format.  Example  reset()   testData = dmm.makebuffer(1000)  testData.collecttimestamps = 1  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.times[1])  printbuffer(1, 6, testData.times)  This example creates a reading buffer named testData, configures the buffer to collect time and date data, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  <br>The print() command then outputs the time of the first reading in the reading buffer.   Output:  09:14:48  The printbuffer() command then outputs the time of readings 1 to 6 in the reading buffer.   Output:  09:14:48, 09:14:48, 09:14:48, 09:14:48, 09:14:48, 09:14:48  Also see  bufferVar.clear()  bufferVar.collecttimestamps  Reading buffers  "},{"id":33,"title":"bufferVar.timestampresolution","url":"15135.htm","text":"This attribute contains the resolution of the timestamp.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Reset<br>Recall setup  Not saved  Not applicable  Usage  resolution = bufferVar.timestampresolution  resolution  Timestamp resolution in seconds (minimum 1&nbsp;µs; rounded to an even power of&nbsp;2&nbsp;µs)  bufferVar  The reading buffer  Details  Reading this attribute returns the timestamp resolution value.  The finest timestamp resolution is 0.000001 seconds (1 μs). At this resolution, the reading buffer can store unique timestamps for up to 71&nbsp;minutes. You can increase this value for very long tests.  Example  buffer1.timestampresolution = 0.000008  Sets the timestamp resolution of reading buffer 1 to 8 μs.  Also see  bufferVar.clear()  bufferVar.collecttimestamps  bufferVar.timestamps  Reading buffers  "},{"id":34,"title":"bufferVar.timestamps","url":"19922.htm","text":"When enabled by the bufferVar.collecttimestamps attribute, this attribute contains the timestamp when each reading saved in the specified reading buffer occurred.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Buffer storage settings<br>Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  timestamp = bufferVar.timestamps[N]  timestamp  The complete timestamp (including date, time, and fractional seconds) of reading number N in the specified reading buffer when the reading was acquired  bufferVar  The reading buffer  N  The reading number (1 to bufferVar.n)  Details  The bufferVar.timestamps information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you cannot access any time information from a reading buffer.   If enabled, this buffer recall attribute is like an array (a Lua table) that contains timestamps, in seconds, of when each reading occurred. These are relative to the bufferVar.basetimestamp for the buffer.  Example  printbuffer(1, 6, buffer1.timestamps)  Print the timestamp of the first 6 readings stored in buffer&nbsp;1.  Example output:  07/11/2011 09:14:48.509762161, 07/11/2011 09:14:48.528708001, 07/11/2011 09:14:48.547659196, 07/11/2011 09:14:48.566612446, 07/11/2011 09:14:48.585565606, 07/11/2011 09:14:48.681325966  Also see  bufferVar.clear()  bufferVar.collecttimestamps  bufferVar.n  bufferVar.readings  bufferVar.statuses  Reading buffers  "},{"id":35,"title":"bufferVar.units","url":"20161.htm","text":"This attribute contains the unit of measure that is stored with readings in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer<br>Instrument reset<br>Recall setup  USB flash drive using dmm.savebuffer or dmm.appendbuffer  Not applicable  Usage  unitsOfMeasure = bufferVar.units[N]  unitsOfMeasure  The units of measure stored with the readings  bufferVar  The reading buffer  N  The reading number (1 to bufferVar.n)  Details  This attribute is an array (Lua table) of the strings that indicate the unit of measure that is stored with readings in the buffer. You can designate units as one of the following: Volts AC, Volts DC, Amps AC, Amps DC, dB&nbsp;VAC, dB&nbsp;VDC, Ohms 2wire, Ohms 4wire, Ohms ComSide, Fahrenheit, Kelvin, Celsius, Hertz, Seconds, and Continuity.  Example  reset()   testData = dmm.makebuffer(1000)  dmm.nplc = 0.5  dmm.range = 0  dmm.configure.set(\"Dcv_100mV\")  dmm.setconfig(\"slot2\", \"Dcv_100mV\")  scan.create(\"2035:2040\")  scan.execute(testData)  print(testData.units[1])  printbuffer(1, 6, testData.units)  This example creates a reading buffer named testData, sets and saves the DMM configuration, creates a scan list, and then runs the scan.  The print() command outputs the units of the first reading in the reading buffer.   Output:  Volts DC<br>  The printbuffer() command outputs the units of readings 1 to 6 in the reading buffer.   Output:  Volts DC, Volts DC, Volts DC, Volts DC, Volts DC, Volts DC  Also see  Reading buffers  "},{"id":36,"title":"channel.calibration.adjustcount()","url":"13975.htm","text":"This function gets the number of times that a card has been adjusted.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  count = channel.calibration.adjustcount(\"slotX\")  count  Return value representing the number of times the instrument has been adjusted  X  The slot number ( 1 to 6)  Details  This command can be used with channels that are locked or unlocked. If no channelList is provided, the currently unlocked channels are assumed.  There is only one adjustment count per card. Therefore, with no channel unlocked, the only acceptable values for channelList are \"slot1\", \"slot2\", and so on. An error is generated if any other values are used.  Example  Count = channel.calibration.adjustcount(\"slot1\")  print(Count)  Assign the number of times the card in slot 1 has been adjusted to a user variable named Count.  Output the value.  3  This shows that the instrument has been adjusted 3 times.  Also see  channel.calibration.adjustdate()  "},{"id":37,"title":"channel.calibration.adjustdate()","url":"13979.htm","text":"This function sets or gets the adjustment date in UTC format (number of seconds since January 1, 1970) on the unlocked channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  returnDate = channel.calibration.adjustdate(\"slotX\")  returnDate = channel.calibration.adjustdate(\"slotX\", date)  returnDate  The adjustment date in UTC format  X  The slot number ( 1 to 6)  date  The date of the adjustment (UTC formatted)  Details  This command can get the adjust date whether calibration is currently locked or unlocked. If the channelList parameter is not specified, it uses the currently unlocked card.   This command can only set the adjustment date on a previously unlocked card. The date is not permanently saved until the channel.calibration.save() command is sent.  There is only one adjustment date per card. Therefore, the only acceptable values for channelList are slotX. An error is generated if any other values are used.  Example 1  adjustmentDate = channel.calibration.adjustdate(\"slot2\")  Gets the adjustment date for the card in slot 2.  Example 2  NewAdjustDate = os.time{year=2010, month=12, day=28, hour=17, min=35, sec=0}  channel.calibration.unlock(\"slot5\", \"KI3706\")  myDate = channel.calibration.adjustdate(\"slot5\", NewAdjustDate)  channel.calibration.save()  channel.calibration.lock()  print(os.date(\"%c\", myDate))  Assign the UTC time for December 28, 2010 at 17:35:00 GMT to NewAdjustDate.  Unlock the calibration for the card in slot 5, assuming the default password.  Set the adjustment date using NewAdjustDate for the card in slot 5.  Save the adjustment date on the card on slot 5.  Lock the calibration for the card in slot 5.  View the date for myDate.  Also see  Lua date and time  UTC Calculator  channel.calibration.adjustcount()  channel.calibration.save()  channel.calibration.verifydate()  "},{"id":38,"title":"channel.calibration.lock()","url":"14487.htm","text":"This function prevents further calibration on the currently unlocked card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.calibration.lock()  Details  Calibration data is locked during normal operation. To perform calibration, calibration must be unlocked (channel.calibration.unlock()) for the card.  Only one card can be calibrated at a time. Therefore, channel.calibration.lock() works only on the currently unlocked card. Once locked, you must unlock calibration to perform it again.  This command locks calibration on the card being calibrated, but does not save calibration data.    @Calibration data is lost if it is not saved before locking. Refer to channel.calibration.save() for more information.  An error is generated if this command is issued when calibration is already locked.  Example  channel.calibration.unlock(\"slot1\",\"KI3706\")  -- Perform operations to generate the calibration data  channel.calibration.save()  channel.calibration.lock()  Unlock the card calibration for slot 1 using the default password.  Use the channel.calibration.step command to generate the calibration data.  Save the calibration data for the card in slot 1, if no errors occurred while generating the calibration data.  Lock the calibration data for the card in slot 1.  Also see  channel.calibration.save()  channel.calibration.step()  channel.calibration.unlock()  "},{"id":39,"title":"channel.calibration.password()","url":"14506.htm","text":"This function sets the password needed to unlock the calibration functionality of a card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Not applicable  Card nonvolatile memory  KI3706  Usage  channel.calibration.password(\"password\")  password  A string of characters that contain the password  Details  There is only one password per card. Therefore, channel.calibration.password() works only on the currently unlocked card.  Make note of the password, because there is no command to query for the password once it has been set on the instrument. The password is not permanently saved until the channel.calibration.save() command is sent. Passwords are alphanumeric and case-sensitive.  This command generates an error if calibration is locked or if the password string length is greater than six characters.  The default password from the factory is KI3706.  Example  channel.calibration.unlock(\"slot3\",\"KI3706\")  channel.calibration.password(\"Unlock\")  channel.calibration.save()  channel.calibration.lock()  Unlock the calibration for the card in slot&nbsp;3, assuming the default password is still valid.  Set the password to \"Unlock\" for the card in slot&nbsp;3.  Save the password for the card in slot&nbsp;3 for subsequent unlocks.  Lock the calibration for the card in slot&nbsp;3.  Also see  channel.calibration.lock()  channel.calibration.unlock()  "},{"id":40,"title":"channel.calibration.save()","url":"13980.htm","text":"This function saves the calibration data to the card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.calibration.save()  Details  Only one card can be calibrated at a time. Therefore, channel.calibration.save() works only on the presently unlocked card. An error is generated if this command is issued when calibration is already locked.   The system must receive this command before the channel.calibration.lock() command or the calibration data will be lost.   This command saves the present values of the calibration constants and calibration date, and increases the calibration count by one, regardless of errors in the data. You should not issue channel.calibration.save() unless the calibration procedure was performed with no errors.  If no calibration date was specified using either channel.calibration.adjustdate() or channel.calibration.verifydate(), the date is automatically assigned based on the system date.  Example  channel.calibration.unlock(\"slot1\",\"KI3706\")  -- Perform operations to generate the calibration data  channel.calibration.save()  channel.calibration.lock()  Unlock the card calibration for slot 1 using the default password.  Use the channel.calibration.step command to generate the calibration data.  Save the calibration data for the card in slot 1, if no errors occurred while generating the calibration data.  Lock the calibration data for the card in slot 1.  Also see  channel.calibration.adjustcount()  channel.calibration.adjustdate()  channel.calibration.lock()  channel.calibration.unlock()  channel.calibration.verifydate()  "},{"id":41,"title":"channel.calibration.step()","url":"14508.htm","text":"This function sends a calibration command.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.calibration.step(channel, step)  channel.calibration.step(channel, step, value)  channel  The channel to be calibrated  step  The number corresponding to the specified step  value  The measured value for the specified step when the step value is even  Details  The specified channel must be on the unlocked slot. Only DAC and totalizer channels can be calibrated. It is best to calibrate a single channel sequentially to completion before changing channels.  The card assumes that the given voltage or current value is exactly what it is sourcing for the given step. This command generates an error if the step is out of sequence, does not exist, or the calibration is locked. Also, an error is generated if the calibration step does not complete successfully, if the value passed is invalid or out of range for the step, or not needed.  For DAC channels, a calibration sequence includes these steps:  Set voltage, &#8211;12&nbsp;V to +12&nbsp;V range, generate negative point 1.  Send reading.  Set voltage, &#8211;12&nbsp;V to +12&nbsp;V range, generate negative point 2.  Send reading.  Set voltage, &#8211;12&nbsp;V to +12&nbsp;V range, generate positive point 1.  Send reading.  Set voltage, &#8211;12&nbsp;V to +12&nbsp;V range, generate positive point 2.  Send reading.  Set current, 0&nbsp;mA to +20&nbsp;mA range, generate point 1.  Send reading.  Set current, 0&nbsp;mA to +20&nbsp;mA range, generate point 2.  Send reading.  Set current, +4&nbsp;mA to +20&nbsp;mA range, generate point 1.  Send reading.  Set current, +4&nbsp;mA to +20&nbsp;mA range, generate point 2.  Send reading.  For totalizer channels, a calibration sequence includes these steps:  Calibrate 0&nbsp;V totalizer threshold  Calibrate 1.5&nbsp;V totalizer threshold  You must save the calibration after calibrating and before locking. Use channel.calibration.save() to save the calibration.  @All calibration progress is lost if the calibration data is not saved before you lock the channel.  After calibration, the channel must be locked using channel.calibration.lock().  Also see  channel.calibration.lock()  channel.calibration.save()  channel.calibration.unlock()  "},{"id":42,"title":"channel.calibration.unlock()","url":"14488.htm","text":"This function unlocks calibration functionality for a card so that calibration operations can be performed.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  channel.calibration.unlock(\"slotX\", password)  X  The slot number ( 1 to 6)  password  The password that unlocks calibration  Details  Calibration data is locked during normal operation. This command enables calibration functionality.  When calibration is completed, calibration functionality must once again be locked (channel.calibration.lock()). Only one card at a time may be unlocked.  There is only one password per card. Therefore, the only acceptable values for channel list are \"slot1\", \"slot2\", and so on. Otherwise, an error is generated.  An error is generated if the password that is entered does not match the one that was saved with channel.calibration.password().  The password can only contain six case-sensitive, alphanumeric characters.  The default password from the factory is KI3706.  Example  channel.calibration.unlock(\"slot1\",\"KI3706\")  -- Perform operations to generate the calibration data  channel.calibration.save()  channel.calibration.lock()  Unlock the channel.  Save the calibration settings.  Lock the channel.  Also see  channel.calibration.lock()  channel.calibration.password()  channel.calibration.save()  "},{"id":43,"title":"channel.calibration.verifydate()","url":"14500.htm","text":"This function gets or sets the date the calibration was verified in UTC format (number of seconds since January 1, 1970).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  returnDate = channel.calibration.verifydate(\"slotX\")  returnDate = channel.calibration.verifydate(\"slotX\", date)  returnDate  The verification date returned from the function call  X  The slot number ( 1 to 6)  date  UTC formatted date to which to set the calibration verification date  Details  This command gets the verification date whether calibration is presently locked or unlocked. If the slot is not defined, the unlocked channel is assumed.  This command can only set the verification date on a previously unlocked card. The date is not permanently saved until channel.calibration.save() is issued.  There is only one verification date per card. If more than one slot is defined, an error is generated.  Example  channel.calibration.unlock(\"slot1\", \"KI3706\")  print(channel.calibration.verifydate(os.time{year=2010, month=8, day=5}))  channel.calibration.save()  channel.calibration.lock()  print(os.date(\"%m/%d/%Y\", channel.calibration.verifydate(\"slot1\")))  Unlock the calibration for the card in slot 1 using the default password.  Set the verify calibration date to August 5, 2010.  Get the newly set verification date in a user-readable format.  Save the new verification date.  Lock the calibration.  Output:  1281009600  08/05/2010  Also see  Lua date and time  UTC calculator  channel.calibration.adjustdate()  channel.calibration.save()  "},{"id":44,"title":"channel.clearforbidden()","url":"17406.htm","text":"This function clears the list of channels specified from being forbidden to close.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.clearforbidden(\"channelList\")  channelList  The channels to set, using standard channel naming  Details  The channelList parameter indicates the channels that will no longer be forbidden to close, and may include:  allslots or slotX  (where X is 1 to 6 )  Channel ranges or individual channels  Analog backplane relays  This function allows all items contained in the channelList parameter to be closed. It removes the \"forbidden to close\" attribute that can be applied to a channel using channel.setforbidden().  Command processing stops as soon as an error is detected. If an error is found, the channels are not cleared from being forbidden to close.  Example  channel.clearforbidden(\"2002,2004,2006,2008\")  Clears channels 2, 4, 6, and 8 on slot 2 from being forbidden to close.  channel.clearforbidden(\"allslots\")  Clears all channels from being forbidden to close.  channel.clearforbidden(\"3005:3010\")  Clears channels 5 through 10 on slot 3 from being forbidden to close.  Also see  channel.getforbidden()  channel.setforbidden()  "},{"id":45,"title":"channel.close()","url":"17229.htm","text":"This function closes the channels, analog backplane relays, and channel patterns that are specified by the channel list parameter.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.close(\"channelList\")  channelList  The channels, analog backplane relays, and channel patterns to close, using standard channel naming     Details  Channels closed with this command are appended to the already closed channels (no previously closed channels are opened by this command).  The channelList parameter can include channels with analog backplane relays. If this is the case, channel.close closes the specified channels and any associated analog backplane relays. For channel patterns, the analog backplane relays that are closed are the ones that were specified when the pattern was created. However, for channels, they are the ones specified with the channel.setbackplane() function. Another option for closing analog backplane relays with this command is to include them in the channelList parameter.  This command has no effect on how the DMM is configured.  Actions associated with this function include:  Close the specified items in channelList  Incur the settling time and any user&#8209;specified delay  This command is not available for digital I/O, DAC, and totalizer channels. Calling on a specific channel generates an error. If the digital I/O, DAC, or totalizer channel is in the range of channels, the channel is ignored.  For delay time, see channel.setdelay()  For analog backplane relays with channels, see channel.setbackplane()  For channels associated with a channel, see channel.getimage()  For channels associated with a channel pattern, see<br> channel.pattern.getimage()  For channel states (open/close), see channel.getstate()  For closed channels, see channel.getclose().  An error is generated if:  The parameter string contains slotX, where X is 1 to 6, or allslots  A forbidden item is specified  Specified channel does not support being closed, such as a digital I/O channel  Channel is paired with another bank for a multiwire application  Once an error is detected, the command stops processing and no channels are closed.  Example  channel.close(\"1001:1005, 3003, Chans\")  Close channels 1 to 5 on slot 1, channel 3 on slot 3, and the channel pattern or label Chans.  channel.close(\"2001, 2913\")  Close channel 1 on slot 2 and analog backplane relay 3 in bank 1 on slot 2.  Also see  channel.exclusiveclose()  channel.exclusiveslotclose()  channel.getclose()  channel.open()  channel.getimage()  channel.getstate()  channel.pattern.getimage()  channel.pattern.snapshot()  channel.pattern.setimage()  channel.setbackplane()  channel.setdelay()  dmm.close()  "},{"id":46,"title":"channel.connectrule","url":"17407.htm","text":"This attribute controls the connection rule for closing and opening channels in the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  channel.BREAK_BEFORE_MAKE  Usage  rule = channel.connectrule  channel.connectrule = rule  rule  channel.BREAK_BEFORE_MAKE or 1: Break&#8209;before&#8209;make (BBM) connections for relays in the instrument  channel.MAKE_BEFORE_BREAK or 2: Make&#8209;before&#8209;break (MBB) connections for relays in the instrument  channel.OFF or 0: Does not guarantee a connection rule. The instrument closes relays as efficiently as possible to improve speed performance without applying a rule  Details  The connection rule describes the order in which switch channels are opened and closed when using channel.exclusiveclose(), channel.exclusiveslotclose(), dmm.close(), and scanning commands like scan.execute() and scan.background(). These commands may both open and close switch channels in a single command. The connection rule dictates the algorithm used by the instrument to order the opening and closing of switches.  The connection rule affects the operating time of these commands. These commands do not allow the instrument to continue execution until the settle time of the relays has expired.  When the connection rule is set to break before make, the instrument ensures that all switch channels open before any switch channels close. When switch channels are both opened and closed, this command executes not less than the addition of both the open and close settle times of the indicated switch channels.  When the connection rule is set to make before break, the instrument ensures that all switch channels close before any switch channels open. This behavior should be applied with caution because it will connect two test devices together for the duration of the switch close settle time. When switch channels are both opened and closed, the command executes not less than the addition of both the open and close settle times of the indicated switch channels.  With no connection rule (set to channel.OFF), the instrument attempts to simultaneously open and close switch channels in order to minimize the command execution time. This results in faster performance at the expense of guaranteed switch position. During the operation, multiple switch channels may simultaneously be in the close position. Make sure your device under test can withstand this possible condition. When switch channels are both opened and closed, the command executes not less than the greater of either the open or close settle times of the indicated switch channels.  @You cannot guarantee the sequence of open and closure operations when the channel connect rule set to OFF. It is highly recommended that you implement cold switching when the channel connect rule is set to OFF.  In general, the settling time of single commands that open and close switch channels depends on several factors, such as card type and channel numbers. However, the opening and closing of two sequential channels including no others can be guaranteed as follows:  Break before make: Open settle time + close settle time  Make before break: Close settle time + open settle time  channel.OFF maximum of open settle time or close settle time  This behavior is also affected by channel.connectsequential and any additional user delay times.  @Make&#8209;before&#8209;break (also known as hot switching) can dry&#8209;weld reed relays so that they will always be on. Hot switching is recommended only when external protection is provided.  Example  channel.connectrule = channel.BREAK_BEFORE_MAKE  Sets the connect rule in the instrument to channel.BREAK_BEFORE_MAKE  Also see  channel.connectsequential  channel.exclusiveclose()  channel.exclusiveslotclose()  dmm.close()  scan.background()  scan.execute()  "},{"id":47,"title":"channel.connectsequential","url":"17663.htm","text":"This attribute controls whether or not channels are closed sequentially.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script  channel.OFF  Usage  sequential = channel.connectsequential  channel.connectsequential = sequential  sequential  channel.OFF or 0: Disable sequential connections  channel.ON or 1: Enable sequential connections  Details  When channel.connectsequential is enabled, the list of channel actions is acted on sequentially. No two relays are opened or closed simultaneously.  Using a sequential close allows you to determine the time for a close operation to happen. For example, if you close three channels and each takes 4 ms to close (assuming no additional user delay times), with sequential on, it will take 12 ms. With sequential off, it may be 4, 8 or 12 ms, depending on whether or not the card can close multiple channels at once.  The order in which channels are opened or closed is not guaranteed with sequential off.  The sequential setting affects all channels in the instrument.  Example  channel.connectsequential = channel.ON  Specifies that channels close sequentially.  Also see  channel.connectrule  Switching and scanning  "},{"id":48,"title":"channel.createspecifier()","url":"17222.htm","text":"This function creates a string channel descriptor from a series of card-dependent integer arguments.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  specifier = channel.createspecifier(slotX, bank, row, column)  specifier = channel.createspecifier(slotX, bank, column)  specifier = channel.createspecifier(slotX, bank, index)  specifier = channel.createspecifier(slotX, index)  specifier = channel.createspecifier(slotX, backplane)  X  The slot number (1 to 6)  bank  The bank number (if applicable)  row  The row number  column  The column number  index  The index  backplane  The backplane  Details  The arguments are dependent upon the card type in the specified slot. This command can only create valid channel descriptors; if an illegal argument is sent for the type of card in the specified slot, an error is generated.  Example 1  cd = channel.createspecifier(3, 1, 2, 101)  print(cd)  Creates a channel descriptor on the Model 3732 card configured as a single 4x112 matrix in slot 3, bank 1, row 2, column 101.  Output:  312A1  Example 2  for row = 1,8 do     for col = 1,28 do        ch = channel.createspecifier(1,1,row,col)        channel.setpole(ch, 2)     end  end  Sets the pole setting to 2 for all channels in bank 1 on a Model 3732 card configured as a dual 8x28 matrix in slot 1.  Example 3  cd = createspecifier(2, 2, 1)  print(cd)  Creates a channel descriptor on the Model 3724 multiplexer card in slot 2, bank 2, index 1.  Output:  2031  Example 4  cd = createspecifier(1, 911)  print(cd)  Creates a channel descriptor on the Model 3724 multiplexer card in slot 1, backplane 911.  Output:  1911  Also see  None  "},{"id":49,"title":"channel.exclusiveclose()","url":"17435.htm","text":"This function closes the specified channels so that they are the only channels that are closed on the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.exclusiveclose(\"channelList\")  channelList  A string listing the channels (including analog backplane relays) and channel patterns to exclusively close  Details  This command allows you to close specific channels and open any other channels on the instrument. When you send this command, any presently closed channel opens if it is not specified to be closed in the parameter. For channel patterns, the analog backplane relays that are closed or opened are the ones that were specified when the pattern was created  with channel.pattern.setimage() or channel.pattern.snapshot(). For channels, the analog backplane relays that are closed or opened are the ones specified with channel.setbackplane(), or that are specified in channelList.  When you send this command:  Any presently closed channels and analog backplane relays that are not specified in channelList are opened.  The channels and analog backplane relays in channelList are closed.  Settling and user&#8209;specified delay times are applied as defined by the connection rules and delay settings.  This function has no affect on how the DMM is configured and does not use analog backplane relays associated with DMM configuration.  If the channelList parameter is an empty string or a string of spaces, all channels and analog backplane relays are opened. Therefore, sending channel.exclusiveclose(\"\") is equivalent to channel.open(channel.getclose(\"allslots\")). However, sending the equivalent commands when nothing is closed generates an error because nil (the response of channel.getclose(\"allslots\")) is being sent to the open command.  An error is generated if:  The parameter string contains slotX,  where X = 1 to 6 or allslots  A specified channel or channel pattern is invalid  Channel number does not exist for slot specified  Slot is empty  A forbidden item is specified  Channel is paired with another bank for a multi-wire application  Once an error is detected, the command stops processing. Channels open or close only if no errors are found.  This command is not available for digital I/O, DAC, and totalizer channels. Calling on a specific channel for these channels generates an error. If the digital I/O, DAC, or totalizer channel is in the range of specified channels, the channel is ignored.  Example 1  channel.setbackplane(\"3003\",\"3913\")  channel.exclusiveclose(\"3003\")  Associate analog backplane relay 3 in bank 1 on slot 3 with channel 3 on slot 3.  Open all channels and close slot 3, channel 3 and its associated analog backplane relay (3 in bank 1 on slot 3), if it is not already closed.  Example 2  channel.exclusiveclose(\"3003, 3913\")  Close channel 3 on slot 3 and its associated analog backplane relay 3 in bank 1 on slot 3. By specifying the backplane relay directly, you eliminate the need for associating the backplane with channel.setbackplane.  Also see  channel.close()  channel.connectrule  channel.connectsequential  channel.exclusiveslotclose()  channel.getclose()  channel.getimage()  channel.getstate()  channel.open()  channel.pattern.getimage()  channel.setbackplane()  channel.pattern.setimage()  channel.pattern.snapshot()  channel.setdelay()  dmm.close()  "},{"id":50,"title":"channel.exclusiveslotclose()","url":"17437.htm","text":"This function closes the specified channels and channel patterns on the associated slots and opens any channels that are not specified.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.exclusiveslotclose(\"channelList\")     channelList  A string that lists the channels and channel patterns to exclusively close on the cards in associated slots (you can specify analog backplane relays)  Details  This command allows you to bundle the closing of channels with the opening of channels. Any currently closed channels or analog backplane relays open if they are not specified to be closed on the slots related to the channels in channelList. Using this command guarantees that only the specified channels and channel patterns are closed on the slots associated with channels in the channelList.  For channel patterns, the analog backplane relays that are closed or opened are the ones that were specified when the pattern was created (see channel.pattern.setimage() or channel.pattern.snapshot()). For channels, the analog backplane relays are the ones specified with the channel.setbackplane() command. If you do not want to use the channel.setbackplane() command, you can close the analog backplane relays by including them in the channelList parameter. When this command is sent:  Closed channels or analog backplane relays  for the associated slots are opened if they are not specified in the channelList  Channels or analog backplane relays specified by the items in channelList are closed  Any settling times and user&#8209;specified delay times are incurred before command processing is complete  This function has no effect on how the DMM is configured  For example, if channel 1 is closed on each of the six slots, specifying a channelList parameter of \"2002, 4004\" with this command opens channel 1 on slots 2 and 4 only. Then, channel&nbsp;2 on slot&nbsp;2 and channel&nbsp;4 on slot&nbsp;4 close. Channel 1 remains closed on slots 1, 3, 5, and&nbsp;6.  The command is not available for digital I/O, DAC, and totalizer channels. Calling on one of these channels generates an error. If the digital I/O, DAC, or totalizer channel is in the range of channels, the channel is ignored.  An error is generated if:  The parameter string contains slotX (where X = 1 to 6) or allslots  The parameter string is empty or parameter string with just spaces  A specified channel is invalid or does not exist for the slot  Channel pattern does not exist or the image of the pattern is an empty channel list  A forbidden item is specified  Channel is paired with another bank for a multi-wire application  Once an error is detected, the command stops processing. Channels open or close only if no errors are found and remain unchanged with any parsing or syntax error.  Example  channel.exclusiveslotclose(\"3003\")  channel.exclusiveslotclose(\"1005, 2005\")  channel.pattern.setimage(\"5007, 5017, 5027, 5915,\" \"RouteA\")  channel.exclusiveslotclose(\"RouteA\")  Close channel 3 on slot 3 and open all other channels on slot 3 without affecting any other slot.  Close channel 5 on slots 1 and 2 and open all other channels on slots 1 and 2 without affecting any other slots.  Create a channel pattern called RouteA that includes channels 7, 17, and 27 on slot 5. Analog backplane relay&nbsp;5 in bank 1 on slot 5 is also in the pattern. Have only the RouteA channels close on slot 5 (channels 7, 17, and 27, and analog backplane relay 5 in bank 1 on slot 5.  Also see  channel.close()  channel.connectrule  channel.connectsequential  channel.exclusiveclose()  channel.getclose()  channel.getimage()  channel.open()  channel.pattern.getimage()  channel.setbackplane()  channel.setdelay()  "},{"id":51,"title":"channel.getbackplane()","url":"15918.htm","text":"This function returns a string that lists the analog backplane relays that are controlled when the specified channels are used with switching operations.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup<br>Pole setting change  Create configuration script<br>Save setup  None or nil  Usage  analogBusList = channel.getbackplane(\"channelList\")  analogBusList  A string listing analog backplane relays associated with items in channelList  channelList  A string listing the channels being queried  Details  The response indicates the analog backplane relays that are used during processing of the command:  channel.close()  channel.exclusiveclose()  channel.open()  scan.execute() or scan.background() if the channel is configured for switching  The response will be changed by channel.setbackplane(), replacing the analog backplane relays with the new specified list.  The response will be cleared if channel.setpole() sets a new pole selection.  The analog backplane relays indicated by this response are not used or affected by:  dmm.close() or dmm.open()  scan.execute() or scan.background() if channel is configured for measuring  The parameter string can contain \"slotX\", where X equals 1 to 6, or \"allslots\".  An error is generated if:  A specified channel does not exist for the card installed in a slot  A channel pattern is specified in parameter list  A specified channel does not have analog backplane relays associated with it, such as digital I/O  An analog backplane relay is specified in parameter list  When channelList contains multiple items, the string returned includes the analog backplane relay channels of a single channel separated by a comma. A semicolon is used to delineate channels.  For channel patterns, the analog backplane relays must be specified when creating the pattern in the channel list parameter &#8212; see channel.pattern.setimage() or channel.pattern.snapshot(). Therefore, to see the channels and analog backplane relays associated with a channel pattern, use the channel.pattern.getimage() function.  Command processing stops as soon as an error is detected and a nil response is then returned. No partial list is returned.  For digital I/O, DAC, and totalizer channels, nothing is returned.  Example  channel.setpole(\"slot5\", 4)  channel.setbackplane(\"slot5\", \"5911, 5922\")  print(channel.getbackplane(\"slot5\"))  Assume a Model 3720 in slot 5.  Set all channels on the card in slot 5 to be 4-pole, which makes the card have 30 4-pole channels.  Set all channels in slot 5 to have associated analog backplane relays 911 and 922 on slot 5.  Get the associated analog backplane relays for channels on slot 5.  Output:  5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922,5911,5922  Also see  Data retrieval commands  channel.close()  channel.exclusiveclose()  channel.open()  channel.pattern.getimage()  channel.pattern.setimage()  channel.pattern.snapshot()  channel.setbackplane()  channel.setpole()  dmm.close()  dmm.open()  scan.background()  scan.execute()  "},{"id":52,"title":"channel.getclose()","url":"17247.htm","text":"This function queries for the closed channels indicated by the channel list parameter.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  closed = channel.getclose(\"channelList\")  closed  A string listing the channels that are presently closed in the specified channel list parameter  channelList  A string representing the channels, channel patterns, and backplane relays that will be queried  Details  Use this command to return a list of closed measurement channels, including the paired channel for 4-wire measurements. It does not return nonmeasurement channels.  If more than one channel is closed, they are comma&#8209;delimited in the string. If channelList equals \"slotX\" (where X is 1 to 6), the response indicates the channels and backplane relays that are closed on that slot. Similarly, if channelList equals \"allslots\", the response indicates all channels and analog backplane relays that are closed in the instrument. The format of each channel returned is slot, row, column (matrix channels) or slot, channel (MUX channels). When the channelList contains a channel pattern, only the closed channels in that image are returned.  You can use \"allslots\" to query for all channels closed. The instrument returns only information for valid slots and channels.  An error message is generated if an empty parameter string is specified or if the specified channel list contains no valid channels that can be closed.  If none of the channels in the channel list is closed, nil is returned.  Example 1  channel.setpole(\"slot5\", 4)  channel.setbackplane(\"slot5\", \"5911, 5922\")  channel.close(\"5003, 5005\")  closedSlot5 = channel.getclose(\"slot5\")  print(closedSlot5)  Configure the channel on slot 5 to be four-pole.  Associate the slot 5 channels with analog backplane relays 911 and 922 on slot 5.  Close channels 3 and 5 on slot 5.  Gets the channels and analog backplane relays that are closed on slot 5 and output the closed channels on slot 5.  Output:  5003(5033);5055(5035);5911;5922  Example 2  allClosed = channel.getclose(\"allslots\")  Gets all channels and analog backplane relays that are closed in the instrument.  Example 3  closedChans = channel.getclose(\"Chans\")  Gets all channels closed in a pattern called \"Chans\".  Example 4  closedRange = channel.getclose(\"3001:3020\")  Gets all channels that are closed on channels 1 to 20 on slot 3.  Example 5  closedOnes = channel.getclose(\"3001, 3002,   3003, 3005, 3911, 3912\")  Gets all channels that are closed on channels 1, 2, 3, 5 and analog backplane relay 1 and 2 in bank 1 on slot&nbsp;3.  Also see  channel.close()  channel.exclusiveclose()  channel.getstate()  channel.open()  Data retrieval commands  "},{"id":53,"title":"channel.getcount()","url":"17384.htm","text":"This function returns the number of times the relays have been closed for the specified channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  counts = channel.getcount(\"channelList\")  counts  A comma-delimited string that lists the number of times the channel has closed  channelList  A string listing the items to query, which can include:  Channels  Backplane relays  Channel patterns (channels will be listed in the order in which they are listed in the pattern)  slotX, where X is 1 to 6  allslots  Details  The Series 3700A keeps an internal count of the number of times each relay has been closed. This count can help you determine when relays require replacement. Refer to the plug-in card documentation for the contact life specifications for the relays. The closure counts for an analog backplane relay can be included in the channelList parameter.   If channelList includes a pattern, you can use channel.pattern.getimage() with the pattern name to see the channel order and the channels to which the close counts pertain.  If channels are specified, the count values are returned in the order in which the channels are specified. If slots are specified, the response lists the channels starting from lowest to highest. Because each slot is processed completely before going to the next, all slot 1 channels and analog backplane relays are listed before slot 2 channels.  Relay closures are counted only when a relay cycles from open to closed state.  It is good practice to get the relay count at the end of a program. This saves the latest count to memory.  An error is generated if:  A specified channel is invalid  The channel does not have a count closure associated with it  Example 1  counts = channel.getcount(\"2001:2005\")  print(counts)  Gets the close counts for channels 1 to 5 on slot 2.  Example output for channels 2001, 2002, 2003, 2004, and 2005:  672,495,547,479,518  Example 2  counts = channel.getcount(\"slot2\")  print(counts)  Get the close counts for all channels and analog backplane relays on slot 2 assuming a 3721 card is installed in the slot.  Sample output that shows the counts for channels 1 to 41, analog backplane relays 911 to 917, analog backplane relays 921 to 928:  672,495,547,479,518,459,522,599,452,451,464,427,426,428,426,425,428,424,424,425,5,3,3,3,4,3,3,5,3,33,33,33,33,33,33,32,32,32,32,32,119,3,56,0,0,0,0,0,0,14,68,0,0,0,0,16,0  Example 3  channel.pattern.setimage(\"2003, 2005, 2023, 2915\", \"Path\")  PathList = channel.pattern.getimage(\"Path\")  print(PathList)  print(channel.getcount(PathList))  print(channel.getcount(\"Path\"))  Create a pattern called Path, then get the close counts for channels and analog backplane relays in channel pattern called \"Path\"  Sample output:  2003, 2005,2023,2915  547,518,3,0  547,518,3,0  Also see  channel.pattern.getimage()  channel.pattern.setimage()  Data retrieval commands  "},{"id":54,"title":"channel.getdelay()","url":"17521.htm","text":"This function queries for the additional delay time for the specified channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  delayTimes = channel.getdelay(\"channelList\")  delayTimes  A comma-delimited string consisting of the delay times (in seconds) for channels specified in channelList  channelList  A string listing the channels to query for their delay times  Details  The channelList parameter may contain slotX (where X equals 1 to 6) or allslots.  A command, after closing the state of channels, incurs the delay time indicated in the response for a channel before it completes. However, the internal settling time must elapse before the user delay is incurred. Therefore, the sequence is:  Command is processed  Channel closes  Settling time is incurred  User delay is incurred  Command completes  The delay times are comma-delimited in the same order that the items were specified in the channelList parameter. A value of zero (0) indicates that no additional delay time is incurred before a close command completes.  An error message is generated for the following reasons:  The specified channels do not support a delay time  A channel pattern is specified  Command processing stops as soon as an error is detected and a nil response is generated.  @Pseudocards do not support user delays, so this value is always zero (0) if a pseudocard is used.  Example 1  delaytime = channel.getdelay(\"5001, 5003\")  print(delaytime)  Query channels 1 and 3 on slot 5 for their delay times.  Example output:  0.000e+00,0.000e+00  Example 2  patternChannels =    channel.pattern.get(\"chans\")  DelayPatternTimes =      channel.getdelay(patternChannels)  Gets the delay of the channels in the chans channel pattern if chans does not contain backplane relays. If it does contain backplane relays, you receive error code 1115, \"Parameter error invalid channel type in channel&nbsp;list.\"  Also see  channel.setdelay()  Data retrieval commands  "},{"id":55,"title":"channel.getforbidden()","url":"17404.htm","text":"This function returns a string listing the channels and analog backplane relays in the channel list that are forbidden to close.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  Permitted to close  Usage  forbiddenList = channel.getforbidden(\"channelList\")  forbiddenList  Comma-delimited string listing the channels and analog backplane relays in the channel list that are forbidden to close  channelList  A string listing the channels, backplane relays, and channel patterns that are to be checked to see if they are forbidden to close  Details  The channelList parameter indicates which channels to check, and may include:  allslots or slotX (where X equals 1 to 6)  Channel ranges or individual channels  Analog backplane relays  Channel patterns  If there are no channels in the scope of the channelList that are on the forbidden list, the string returned is empty or nil. The format of the channels in the response string is slot, channel for multiplexer channels or slot, row, column for matrix channels.  Example 1  Forbidden = channel.getforbidden(\"allslots\")  Query for the channels and analog backplane relays that are forbidden to close in the instrument.  Example 2  channel.setforbidden(\"3003, 3005, 3925\")  Forbidden = channel.getforbidden(\"slot3\")  print(Forbidden)  Set channels 3 and 5 and analog backplane relay 5 in bank 2 to forbidden to close on slot&nbsp;3.  Query for the channels and analog backplane relays that are forbidden to close on slot 3.  Sample output:  3003,3005,3925  Example 3  Forbidden = channel.getforbidden(\"1911:1916\" .. \",2004,2008,2012\")  Query for channels and analog backplane relays in a specified list. This list is only checking channels and analog backplane relays 1 to 6 on slot&nbsp;1 and channels 4, 8 and 12 on slot 2 and returning the channels and analog backplane relays that are forbidden to close.  Also see  channel.clearforbidden()  channel.setforbidden()  Data retrieval commands  "},{"id":56,"title":"channel.getimage()","url":"17523.htm","text":"This function queries a channel for items associated with that channel when used in a switching operation.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup<br>Related backplane relays<br>Pole settings  Not applicable  channel identifier  Usage  channels = channel.getimage(\"channelList\")  channels  A string listing the channels and analog backplane relays associated with the specified items  channelList  A string representing the channels and analog backplane relays to query  Details  The parameter string can contain \"slotX\"(where X equals 1 to 6) or \"allslots\".  The returned string lists the channels in slot, channel format or slot, row, column format. A request for multiple channels is delimited by a semicolon. Note that commas delimit the specific channels and analog backplane relays for an individual channel in the string.  If an error is detected, the response is nil.   An error is generated if:  A channel pattern is specified  An empty parameter string is specified  slotX is empty or allslots parses to specify no valid channels because all slots are empty  Example 1  channel.setpole(\"2005\", 2)  channel.setbackplane(\"2005\", \"2911\")    channels = channel.getimage(\"2005\")  print(channels)  Set channel 5 on slot 2 for a 2-wire switch application.  Associate analog backplane relay 1 in bank 1 on slot 2 with channel 5 on slot 2.  Query channel 5 on slot 2.   Output:  2005,2911  Example 2  channel.setpole(\"2003\", 4)  channel.setbackplane(\"2003\", \"2911,2922\")  channels = channel.getimage(\"2003\")  print(channels)  Set channel 3 on slot 2 for a 4-wire switch application.  Associate analog backplane relays 1 in bank 1 and 2 in slot 2 with channel 3 on slot 2.  Query channel 3 on slot 2 (assuming channel 3 on slot 2 is on a 40-channel card).  Output:  2003(2023),2911,2922  Example 3  channels = channel.getimage(\"2003, 2005\")  print(channels)  Query for channels 2003 and 2005 in a single call (assuming they are configured as shown in examples 1 and 2).  Output:  2003(2023),2911,2922;2005,2911  Example 4  channels = channel.getimage(\"2023\")  print(channels)  Query channel 2023.  Query channel 3 on slot 2 (assuming channel 23 on slot 2 is on a 40-channel card).  Output:  nil  2023 is paired for 4-wire operation  Also see  Channel  channel.pattern.getimage()  Data retrieval commands  "},{"id":57,"title":"channel.getlabel()","url":"17536.htm","text":"This function retrieves the label associated with one or more channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  slot, row, column  or slot, channel identifier  Usage  label = channel.getlabel(\"channelList\")  label  A string listing the comma-delimited labels for items in channelList  channelList  A string listing the channels to query for the label associated with them  Details  The channelList parameter can contain more than one channel. If it does, a comma delimits the labels for the channels. The return string lists the labels in the same order that the channels were specified. The channelList parameter cannot be an empty string and must be a valid channel.  The channelList parameter can contain slotX (where X equals 1 to 6) or allslots. In this case, the channels are listed before the analog backplane relays.  An error is generated if:  A specified channel does not exist  The slot is empty  The specified channel is not on the installed card  A channel pattern is specified  Command processing stops as soon as an error is detected, and then a nil response is generated. No partial list of labels is returned.  Labels are also supported for digital I/O, DAC, and totalizer channels.  Example  channel.reset(\"5001\")  print(channel.getlabel(\"5001\"))  channel.setlabel(\"5001\", \"Device\")  print(channel.getlabel(\"5001\"))  Reset the channel.  Print the default label of the channel.  Set the label to Device.  Return the new label.  Output:  5001  Device  Also see  channel.setlabel()  Data retrieval commands  "},{"id":58,"title":"channel.getmatch()","url":"17540.htm","text":"This function gets the match value on a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  matchValue = channel.getmatch(\"channelList\")  matchValue  The match values set for the channels in channelList  channelList  String specifying digital I/O or totalizer channels to query, using normal channel list&nbsp;syntax  Details  If a width greater than 1 is specified with channel.setmatch(), the matchValue contains the additional channel width specified at set time. For example, the value of 65535 with a width of 2 returns 65535. If the width is 1, 255 is returned.  This command returns the match value that was set for the specified channels. DAC, backplane, and switch channels are not supported. If they are included in a range or slot specifier, they are ignored.  Example  print(channel.getmatch(\"slot6\"))  Query the match values set for digital I/O channels&nbsp;1 to 5 on slot 6 and totalizer channels 6 to 9 on slot 6, assuming a Model 3750 card.  Output (assuming defaults):  0,0,0,0,0,0,0,0,0  Also see  channel.setmatch()  "},{"id":59,"title":"channel.getmatchtype()","url":"15926.htm","text":"This function returns the match type for digital I/O and totalizer channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  matchType = channel.getmatchtype(\"channelList\")  matchType  The comma-delimited states for channels in channelList  channelList  String specifying the digital I/O or totalizer channels to query, using normal channel list syntax  Details  The channel match types are:  1 for match exactly  2 for match any  3 for match not exact  4 for match none  Digital analog converter, backplane, and switch channels are not supported. If these channels are included in a range or slot specifier, they are ignored; otherwise, an error is generated.  Example  print(channel.getmatchtype(\"6001:6009\"))  Query the match type for digital I/O channels 1 through 5 and totalizer channels 6 through 9 on slot 6 (assuming a 3750 card).   Output:   4,4,4,4,4,4,4,4,4  Also see  channel.setmatch()  channel.setmatchtype()  "},{"id":60,"title":"channel.getmode()","url":"15927.htm","text":"This function returns the present mode of digital and totalizer channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  mode = channel.getmode(\"channelList\")  mode  Return string of a comma-delimited list of modes  channelList  String that specifies the channels to query, using normal channel list syntax  Details  For digital I/O channels, the following modes are supported:  channel.MODE_INPUT (default) or 0  channel.MODE_OUTPUT or 1  channel.MODE_PROTECT_OUTPUT or 3  For totalizer channels, the following modes are supported:  channel.MODE_RISING_EDGE or 1  channel.MODE_FALLING_EDGE or 0  channel.MODE_RISING_TTL_EDGE (default) or 3  channel.MODE_FALLING_TTL_EDGE or 2  channel.MODE_RISING_EDGE_READ_RESET or 5  channel.MODE_FALLING_EDGE_READ_RESET or 4  channel.MODE_RISING_TTL_EDGE_READ_RESET or 7  channel.MODE_FALLING_TTL_EDGE_READ_RESET or 6  For DAC channels, the following modes are supported:  channel.MODE_VOLTAGE_1 or 17  channel.MODE_CURRENT_1 or 1  channel.MODE_CURRENT_2 or 2  channel.MODE_PROTECT_VOLTAGE_1 (default) or 49  channel.MODE_PROTECT_CURRENT_1 or 33  channel.MODE_PROTECT_CURRENT_2 or 34  Switch and analog backplane channels do not have modes. If included in a range or slot specifier, they are ignored. If they are specified directly, an error is generated.  Example  print(channel.getmode(\"slot6\"))  Query the configuration of the channels on slot 6. Assuming a 3750, channels 1 to 5 are digital I/O, channels 6 to 9 are totalizers, and channels 10 to 11 are DACs.  Output:  0,0,0,0,0,3,3,3,3,49,49  Also see  channel.setmode()  "},{"id":61,"title":"channel.getoutputenable()","url":"15928.htm","text":"This function gets the present output enable attribute for a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  0  Usage  outputEnable = channel.getoutputenable(\"channelList\")  outputEnable  Return string of a comma-delimited list of output enable values  channelList  String specifying the DAC channels to query, using normal channel list syntax  Details  For DAC channels, output enable indicates whether or not the DAC is driving the output. Response values are:  0: Output enable is OFF  1: Output enable is ON  Switch, digital I/O, totalizer, and backplane channels do not have modes. If they included in a range or slot specifier, they are ignored. If they are specified directly, an error is generated.  Example  print(channel.getoutputenable(\"slot1\"))  Query the state of all DAC channels on slot&nbsp;1 (assuming a Model 3750 card, this would be channels 10 and 11).  Output:  0,0  Also see  channel.setoutputenable()  "},{"id":62,"title":"channel.getpole()","url":"15929.htm","text":"This function queries the pole settings for the specified channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  Card dependent, typically 2  Usage  poles = channel.getpole(\"channelList\")  poles  Returns a comma&#8209;separated string of the poles, based on channelList; can be:  One-pole: 1  Two-pole: 2  Four-pole: 4  channelList  A string listing the channels to query for their pole settings  Details  channelList can contain \"slotX\", where X is 1 to 6, or \"allslots\".  When the channel list parameter for this function is \"slotX\", the response first lists the channels starting from lowest to highest.   When the channel list parameter for this function is \"allslots\", the response starts with slot 1 and increases to slot 6. Each slot is processed completely before going to the next. All slot&nbsp;1 channels are listed before slot&nbsp;2 channels.  The response is the numeric value representing the pole selection and not the text. For example, 4-pole selection is 4 and not channel.POLES_FOUR.  An error message is generated if:  An empty parameter string is specified.  The specified channel does not exist for card installed in slot.  Parameter syntax error such as incorrect format for channelList.  A channel pattern was specified.  An analog backplane relay was specified.  Channel does not support pole setting like a digital I/O.  Command processing stops as soon as an error is detected. No partial list is returned. If an error is detected or the slot is empty, the response is nil.   Digital I/O, DAC, backplane, and totalizer channels are not supported.  Example  channel.reset(\"slot5\")  channel.setpole(\"5003, 5007\", 4)  polesSlot5 = channel.getpole(\"5001, 5003, 5005, 5007\")  print(polesSlot5)  Reset the channels on slot 5 only.  Set the pole attribute for channels 3 and 7 on slot 5 to be 4.  Query channels 1, 3, 5, and 7 on slot 5 for pole settings.  View the pole attribute for the specified channels.  Output:  2,4,2,4  Also see  Data retrieval commands  channel.setpole()  "},{"id":63,"title":"channel.getpowerstate()","url":"15930.htm","text":"This function gets the current power state attribute for a totalizer or DAC channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  1  Usage  states = channel.getpowerstate(\"channelList\")  states  Return string of a comma-delimited list of power states  channelList  String specifying the channels to query, using normal channel list syntax  Details  See card-specific documentation for important potential implications (warm-up times, effective coverage, use cases, and so on) when disabling or enabling power to a channel.  Not all channels can be disabled. If a channel that cannot be disabled is included in a range, it is ignored. If it is specified directly, an error is generated.  Example  print(channel.getpowerstate(\"1006\"))  Get the current power state attribute for a totalizer channel 6 of slot 1 (assuming a Model&nbsp;3750 card).  Output (assuming defaults):  1  Also see  channel.setpowerstate()  "},{"id":64,"title":"channel.getstate()","url":"17546.htm","text":"This function returns the state indicators of the channels in the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Not saved  0  Usage  state = channel.getstate(\"channelList\")  state = channel.getstate(\"channelList\", indicatorMask)  state  Return string listing the comma-delimited states for the channels in channelList  channelList  String specifying the channels to query, using normal channel list syntax  indicatorMask  Value to specify only certain indicators; if omitted, all indicators are returned  Details  Each bit in the state represents a different indicator. Therefore, multiple indicators can be present (the OR operation is performed bitwise). All state or state latch commands behave in this manner.  Different channel types support different state information (indicators). The optional state indicatorMask can be used to return only certain indicators. If there is no indicatorMask, then all indicators are returned.  The following status indicators are defined:  channel.IND_CLOSED  channel.IND_OVERLOAD  channel.IND_MATCH  channel.IND_OVERFLOW  Indicators can be latched or unlatched, depending on other system settings. Latched indicators mean that the condition has occurred since the last reset command (or power cycle). Unlatched indicators mean that the condition occurred when the channel.getstate() command was issued. The overflow and overload indicators default to a latched condition.  Although the channel.getstate() command returns a string representing a number, this can be easily changed to a number and then compared to one of the provided Lua constants.  For switch channels, the only state information is an indicator of relay state (channel.IND_CLOSED).  For digital I/O channels, the state information includes an indicator for the state of auto protection and whether the match value has been matched (channel.IND_OVERLOAD and channel.IND_MATCH).  For totalizer channels, the state information includes an indicator for overflow and whether the match value has been matched (channel.IND_OVERFLOW and channel.IND_MATCH).  For DAC channels, the state information includes an indicator for the state of auto protection (channel.IND_OVERLOAD).  For more specific information about the overflow and overload indicators, refer to the documentation for the specific card on which the specified channel resides.  Example 1  channel.close(\"4005, 4007, 4017, 4003\")    State = channel.getstate(\"4001:4020\")  print(State)  Close channels 5, 7, 17, and 3 on slot 4.  Query the state of the first 20 channels on slot 4.  View the response assigned to State.  Output (assuming a Model 3720):  0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0  Example 2  PathList = channel.pattern.getimage(\"Path\")  print(Path)  print(channel.getstate(Path))  See the state of channels and analog backplane relays in the channel pattern called \"Path\".  Output:  4003,4005,4007,4017,4911,4922  1,1,1,1,1,1  Example 3  PathState = channel.getstate(\"Path\")  print(PathState)  Another way to see the state of channels and analog backplane relays in channel pattern \"Path\" in Example 2 without getting the channels and analog backplane relays first.  Output:  1,1,1,1,1,1  Example 4  if bit.bitand(channel.IND_OVERLOAD,     tonumber(channel.getstate(\"4010\"))) == 1  then     print(\"OVERLOAD\")  end  Use the following command to check for an overload on a DAC channel.  In the previous example, channel.getstate() returns a string that is converted to a number using the Lua tonumber() command. channel.IND_OVERLOAD equates to the number 2. Because the state is a bit-oriented value, a logical AND operation must be performed on the state and the overload constant to isolate it from other indicators.  The tonumber() command only works with a single channel. When multiple channels are returned (for example, channel.getstate(\"slot4\")), this string must be parsed by the comma delimiter to find each value.  Also see  channel.getclose()  channel.setmatch()  "},{"id":65,"title":"channel.getstatelatch()","url":"16200.htm","text":"This function gets the mask representing the states that would be latched if they occurred.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  14 for overload, match, and overflow  Usage  state = channel.getstatelatch(\"channelList\")  state  Return string listing the comma-delimited latch states for channels in channelList:  2: Channel overload  4: Channel match  8: Channel overflow  channelList  String specifying the channels to query, using normal channel list syntax  Details  Applicable to digital I/O, totalizer, and DAC channels only.  Each indicator is represented by a bit in the mask.  Example 1  myState = channel.getstatelatch(\"1001\")  print(myState)  Queries the state event latch on digital I/O channel 1 in slot 1 assuming a Model 3750.  Example 2  channel.setstatelatch(\"6010\", bit.bitor(channel.IND_OVERFLOW, channel.IND_OVERLOAD))  print(channel.getstatelatch(\"6010\"))  Generate either an overflow or overload event on DAC channel 10 in slot 6, assuming a Model&nbsp;3750.  Query for the state latch for channel 10 on slot 6.  Output:  10  Also see  channel.setstatelatch()  "},{"id":66,"title":"channel.gettype()","url":"17547.htm","text":"This function returns the type associated with a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  type = channel.gettype(\"channelList\")  type  Returns a comma-delimited list of the type of channels in channelList  channelList  String specifying the channels to query, using normal channelList syntax  Details  The channel type is defined by the physical hardware of the card on which the channel exists. The following are valid channel types:  channel.TYPE_SWITCH or 1  channel.TYPE_BACKPLANE or 2  channel.TYPE_DAC or 8  channel.TYPE_DIGITAL or 4  channel.TYPE_TOTALIZER or 16  Refer to the card-specific documentation for more information about the channel types available for your card.  Example 1  print(channel.gettype(\"1001, 1911\"))  Query the channel type of channel 1 and analog backplane relay 1 of bank 1 in slot 1, assuming a 3720.  Output:  1,2  Example 2  print(channel.gettype(\"slot6\"))  Query the channel types on slot 6, assuming a 3750.  Output:  4,4,4,4,4,16,16,16,16,8,8  This shows that channels 1 to 5 are digital I/O types, channels 6 to 9 are totalizer types, and channels 10 and 11 are DAC types.  Also see  None  "},{"id":67,"title":"channel.open()","url":"17548.htm","text":"This function opens the specified channels, analog backplane relays, and channel patterns.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.open(\"channelList\")  channelList  String listing the channels, analog backplane relays, and channel patterns to open  Details  This function opens the specified channels based on the switching configuration of the channel.  For the items specified to open, the channels associated with them open, as well as the associated analog backplane relays for each. For channel patterns, the analog backplane relays that get opened are the ones that are specified when the pattern is created (through channel.pattern.setimage() and channel.pattern.snapshot()). For channels, they are the ones specified with the channel.setbackplane() function. Another option for opening analog backplane relays with this command is to include them in the channelList parameter.  This command has no effect on how the DMM is configured.  The settling time associated with a channel must elapse before the command completes. User delay is not added when a relay opens.  For digital I/O, DAC, and totalizer channels, there is no valid behavior; calling on a specific channel generates an error. If a digital I/O, DAC, or totalizer channel is in the range of channels, the channel is ignored.  Example 1  channel.open(\"1001:1005, 3003, Chans\")  Opens channels 1 to 5 on slot 1, channel 3 on slot 3, and the channel pattern or label Chans.  Example 2  channel.open(\"slot3, slot5\")  Opens all channels on slots 3 and 5.  Example 3  channel.open(\"allslots\")  Opens all channels on all slots.  Also see  channel.close()  channel.exclusiveclose()  channel.exclusiveslotclose()  channel.getclose()  channel.getdelay()  channel.pattern.getimage()  channel.pattern.setimage()  channel.pattern.snapshot()  channel.getstate()  channel.setdelay()   channel.setforbidden()   channel.setbackplane()  dmm.close()  dmm.open()  "},{"id":68,"title":"channel.pattern.catalog()","url":"15934.htm","text":"This function creates a list of the user-created channel patterns.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  for name in channel.pattern.catalog() do     ...  end  name  The user&#8209;defined name of the channel pattern that is assigned by the catalog function during the for loop  Details  This function allows you to print or delete all user-created channel patterns in the runtime environment. The entries that are returned are listed in random order.  Example  channel.pattern.setimage(\"3001,3031\", \"patternA\")  channel.pattern.setimage(\"3002,3032\", \"patternB\")  channel.pattern.setimage(\"3003,3033\",\"patternC\")  for name in channel.pattern.catalog() do     print(name .. \" = \" ..        channel.pattern.getimage(name))     channel.pattern.delete(name)  end  This example prints the names and items associated with all user-created channel patterns. It then deletes the channel pattern.  patternC = 3003,3033  patternA = 3001,3031  patternB = 3002,3032  Also see  channel.pattern.delete()  channel.pattern.getimage()  channel.pattern.setimage()  channel.pattern.snapshot()  "},{"id":69,"title":"channel.pattern.delete()","url":"15935.htm","text":"This function deletes a channel pattern.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.pattern.delete(\"name\")  name  A string representing the name of the channel pattern to delete  Details  An error is generated if the name does not exist as a channel pattern.  Example  channel.pattern.delete(\"Channels\")  Deletes a channel pattern called Channels.  Also see  channel.pattern.catalog()  channel.pattern.getimage()  channel.pattern.setimage()  channel.pattern.snapshot()  "},{"id":70,"title":"channel.pattern.getimage()","url":"17284.htm","text":"This function queries a channel pattern for associated channels and analog backplane relays.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup<br>Pole setting change  Create configuration script<br>Save setup<br>  Not applicable  Usage  channelList = channel.pattern.getimage(\"name\")  channelList  A string specifying a list of channels and analog backplane relays that are represented by the name  name  A string representing the name of the channel pattern to query  Details  The returned string lists the channels in the slot, column or slot, row, column format, even if a channel pattern was used to create it. Results for multiple channel patterns are delimited by a semicolon (;). Commas delimit the specific channels and analog backplane relays in a single channel pattern in the string.  If you change a pole setting for a channel that is associated with a channel pattern, the channel pattern is deleted. Be sure to configure the pole setting for channels (channel.setpole) before creating a channel pattern.  Example  -- Set up two patterns  channel.pattern.setimage(\"4001:4005\", \"myPattern\")   channel.pattern.setimage(\"2001,2003,2005\", \"myRoute\")   -- Print images  myImage = channel.pattern.getimage(\"myPattern\")   print(myImage)   print(channel.pattern.getimage(\"myRoute\"))  print(channel.pattern.getimage(\"myRoute,     myPattern\"))  Using a Model 3721 (or similar model) card in slots 2 and 4, this example creates two channel patterns and then queries these patterns.  Output:  4001,4002,4003,4004,4005  2001,2003,2005  2001,2003,2005;4001,4002,4003,4004,4005  Also see  channel.pattern.catalog()  channel.pattern.delete()  channel.pattern.setimage()  channel.setpole()  "},{"id":71,"title":"channel.pattern.setimage()","url":"17296.htm","text":"This function creates a channel pattern and associates it with the specified name.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup<br>Pole setting change  Create configuration script<br>Save setup  Not applicable  Usage  channel.pattern.setimage(\"channelList\", \"name\")  channelList  A string listing the channels, channel patterns, or analog backplane relays to use when creating the new channel&nbsp;pattern  name  A string representing the name to associate with the new channel pattern  Details  If name is used for an existing channel pattern, that pattern is overwritten with the new pattern channel image (if no errors occur). The previous image associated with the name is lost. The DMM configuration associated with the pattern remains unchanged in this scenario.  The channel pattern is not created if an error is detected. You can create a channel pattern with an empty channelList parameter. This will create a pattern that has no channels or analog backplane relays associated with it. The behavior of using an empty pattern in a channel list parameter is dependent on the command. For example:  channel.pattern.setimage(\"\", \"Empty_pattern\")  Creates an empty pattern.  channel.close(\"Empty_pattern\")  Generates error code 1115, \"Parameter error no valid channels in channel list.\"  channel.exclusiveslotclose(\"Empty_pattern\")  Generates error code 1115, \"Parameter error no valid channels in channel list.\"  channel.open(\"Empty_pattern\")   Generates error code 1115, \"Parameter error no valid channels in channel list.\"  channel.exclusiveclose(\"Empty_pattern\")  Opens any closed channels or analog backplane relays in the instrument.  channel.close(\"Empty_pattern, 5005\")  Closes channel 5005.  channel.exclusiveslotclose(\"Empty_pattern, 5003\")  Opens any closed channel on slot 5 and closes channel 3 on slot 5.  A channel pattern must include the analog backplane relays and the channels. Once a channel pattern is created, the only way to add a channel or analog backplane relay to an existing pattern is to delete the old pattern and recreate the pattern with the new items.  If you change a pole setting for a channel that is associated with a channel pattern, the channel pattern is deleted. Be sure to configure the pole setting for channels (channel.setpole) before creating a channel pattern.  Channel patterns are stored when you run the createconfigscript() command or setup.save() command.  Channel patterns are lost when power is cycled. Use setup.recall() or a script created with createconfigscript() to restore them.  Including any channels of type digital I/O, DAC, and totalizer generates an error.  The following restrictions exist when naming a channel pattern:  The name must contain only letters, numbers, or underscores  The name must start with a letter  The name is case sensitive  Examples of valid names:  Channels  Chans  chans  Path1  Path20  path_3  Examples of invalid names:  1path (invalid because it starts with a number)  my chans (invalid because it contains a space)  My,chans (invalid because it contains a comma)  Path1:10 ( invalid because it contains a colon)  An error is generated if:  The name parameter already exists as a label  Any channel is forbidden to close  Insufficient memory exists to create the channel pattern  The parameter string contains slotX (where X equals 1 to 6) or allslots  The name parameter contains a space character  The pattern name exceeds 19 characters  Example 1  channel.pattern.setimage(\"3001:3010\", \"Channels\")  oldList = channel.pattern.getimage(\"Channels\")  newList = oldList .. \", 3911\"  channel.pattern.delete(\"Channels\")  channel.pattern.setimage(newList, \"Channels\")  channel.open(\"slot3\")  channel.close(\"Channels\")  print(channel.getclose(\"slot3\"))  For this example, assume there is a Keithley Model 3721 or similar card in slot&nbsp;3.  Create a pattern.  Append a channel to the pattern by retrieving the pattern and recreating it.  Recreate the pattern with the new image.  Open all channels on slot&nbsp;3 and close the pattern Channels.  Output:  3001;3002;3003;3004;3005;3006;3007;3008;3009;3010;3911  Example 2  channel.pattern.setimage(\"3001:3010\", \"Channels\")  channel.open(\"slot3\")  channel.close(\"Channels, 3911\")  print(channel.getclose(\"slot3\"))  An alternate solution to the example above is to create the pattern, then add the analog backplane relay when you close the channel. This eliminates the need to get the image, delete the image and recreate it.  Output:  3001;3002;3003;3004;3005;3006;  3007;3008;3009;3010;3911  Also see  createconfigscript()  channel.pattern.catalog()  channel.pattern.delete()  channel.pattern.getimage()  channel.pattern.snapshot()  channel.setpole()  setup.save()  setup.recall()  "},{"id":72,"title":"channel.pattern.snapshot()","url":"17299.htm","text":"This function creates a channel pattern.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup<br>Pole setting change  Create configuration script<br>Save setup  Not applicable  Usage  channel.pattern.snapshot(\"name\")  name  A string representing the name to associate with the present state of channels and analog backplane relays  Details  This command stores an image of presently closed channels and analog backplane relays and associates them with the name parameter.  If name is already used for an existing channel pattern, that pattern is overwritten with the new pattern channel image (if no errors occur). The DMM configuration associated with the pattern remains unchanged.  The following restrictions exist when naming a channel pattern:  The name must contain only letters, numbers, or underscores  The name must start with a letter  The name is case sensitive  Examples of valid names:  Channels  Chans  chans  Path1  Path20  path_3  Examples of invalid names:  1path (invalid because it starts with a number)  my chans (invalid because it contains a space)  My,chans (invalid because it contains a comma)  Path1:10 ( invalid because it contains a colon)  An error is generated if:  The name parameter already exists as a label  Insufficient memory exists to save the channel pattern and name in persistent memory  The pattern name exceeds 19 characters or contains a space  Issuing this function on an existing pattern invalidates the existing scan list (the pattern may or may not be used in the current scan list). Creating a new pattern does not invalidate the existing scan list.  Channels of type DAC, totalizer, and digital I/O are ignored.  Channel patterns are stored when you run the createconfigscript() command or setup.save() command.  Channel patterns are lost when power is cycled. Use setup.recall() or a script created with createconfigscript() to restore them.  If you change a pole setting for a channel that is associated with a channel pattern, the channel pattern is deleted. Be sure to configure the pole setting for channels (channel.setpole) before creating a channel pattern.  Example  channel.pattern.snapshot(\"voltagePath\")  Creates a pattern named voltagePath that contains the presently closed channels and analog backplane relays.  Also see  createconfigscript()  channel.pattern.catalog()  channel.pattern.delete()  channel.pattern.getimage()  channel.pattern.setimage()  channel.setpole()  setup.save()  setup.recall()  "},{"id":73,"title":"channel.read()","url":"13984.htm","text":"This function reads a value from a totalizer, DAC, or digital I/O channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  value = channel.read(\"channelList\")  value = channel.read(\"channelList\", width)  value = channel.read(\"channelList\", width, readingBuffer)  value  Return string that lists the comma-delimited read values for the selected channels  channelList  The channels to set, using standard channel naming  width  Specifies reading over multiple consecutive channels (default 1)  readingBuffer  Reading buffer to store read values  Details  For digital I/O channels, only a width of 1, 2, 3, or 4 is supported. Any information (bits) greater than the specified width is returned as zero. For example, if channels 1 and 2 are both 255, a reading with a width of 1 returns 255 and a width of 2 with channel 1 returns 65535. Values read from outputs reflect their current setting. If the read channel is in the overload state, the read value is indeterminate.  For widths greater than 1, the specified channel occupies the least significant byte. For example, reading the value 4293844224 (hex ffeedd00) from channel 1 with a width of 4 indicates channel 1 is 0 (hex 0), channel 2 is 221 (hex dd), channel 3 is 238 (hex ee), and channel 4 is 255 (hex ff). Reading the value of 0 (hex 0) from channel 1 with a width of 1 indicates channel 1 is 0 (hex 0) and other channels are not included. Totalizer and DAC channels do not support a width other than 1 and result in an error if specified.  Switch and backplane channels are not supported.  For a channel with a power state of OFF, the returned value is DISABLED.  Example  count = channel.read(\"1006\")  Read the count from the first totalizer channel (channel 6) in slot 1, assuming a 3750.     Also see  None  "},{"id":74,"title":"channel.reset()","url":"17280.htm","text":"This function resets the specified channel list items to factory default settings.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.reset(\"channelList\")  channelList  A string that lists the items to reset; the string can include:  allslots  slotX, where X is the slot number  channel patterns  channels, including a range of channels  analog backplane relays  Details  For the items specified in channelList, the following actions occur:  Any closed channels and analog backplane relays open  Any 4-pole channels reset to 2&#8209;pole operation and their paired channels are changed to match  Additional user delay is set to zero (0)  Labels are removed  Analog backplane relays specified by the channel.setbackplane()function are cleared  If the channel is forbidden to close, it is cleared from being forbidden to close  If the channels are used in channel patterns, the channel patterns that contain the channels are deleted.  The DMM configurations of all channels are set to nofunction  Using this function to reset a channel or backplane relay involved in scanning invalidates the existing scan list. The list has to be recreated before scanning again.  For all channels, any trigger settings are removed.  For digital I/O channels, operation is set to input, the match is set to zero (0), and auto&#8209;protect is turned on.  For totalizer channels, operation is set to falling edge and TTL level.  For DAC channels, output is turned off and auto&#8209;protect is turned on. Operation is set to &#8211;12&nbsp;V to + 12&nbsp;V.  The rest of the instrument settings are unaffected. To reset the entire system to factory default settings, use the reset() command.  Example 1  channel.reset(\"allslots\")  Performs a reset operation on all channels on the instrument.  Example 2  channel.reset(\"slot1\")  Resets channels on slot 1 only.  Example 3  channel.reset(\"3001:3005\")  Resets only channels 1 to 5 on slot 3.  Example 4  channel.reset(\"5005, 5915\")  Resets only channel 5 and analog backplane relay 5 in bank 1 on slot 5.  Also see  Channel  channel.setbackplane()  dmm.reset()  reset()  scan.reset()  "},{"id":75,"title":"channel.resetstatelatch()","url":"15940.htm","text":"This function resets the channel state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.resetstatelatch(\"channelList\", state)  channelList  String that specifies the channels that need to have their states reset, using normal channel list syntax  state  The comma-delimited states for channels in channelList that are to have their states reset  Details  This function is applicable to digital I/O, totalizer, and DAC channels only.  The values for state are:  channel.IND_MATCH or 4  channel.IND_OVERFLOW or 8  channel.IND_OVERLOAD or 2  Multiple states can be set by performing a logical OR operation on the values.  For channelList, use channel.ALL to reset all states.  States can be latched or unlatched, depending on other system settings. Latched states indicate that the condition occurred since the last reset (or power cycle). Unlatched states indicate that the condition has occurred when the channel.getstate() command was issued. The Overflow and Overload states default to latched.  If states are not cleared using channel.resetstatelatch(), you may not be reading the present state of the channel.  If the state is reset but the condition that caused the channel state to latch still exists, the state is reset, but a second event is generated through the channel trigger model.  Example  channel.resetstatelatch(\"1001\", channel.IND_MATCH)  Clears out a match indicator that was latched on digital I/O channel 1 of slot 1, assuming a Model 3750.  Also see  channel.getstate()  channel.getstatelatch()  channel.setstatelatch()  "},{"id":76,"title":"channel.setbackplane()","url":"15941.htm","text":"This function specifies the list of analog backplane relays to use with the specified channels when they are used in switching applications.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup<br>Pole setting change  Create configuration script<br>Save setup  None  Usage  channel.setbackplane(\"channelList\", \"abuslist\")  channelList  A string that lists the channels to change  abuslist  A string that lists the analog backplane relays to set for the channels specified in channelList  Details  The parameter string channelList can contain slotX, where X is 1 to 6, or allslots.   The abuslist parameter must specify the entire list of analog backplane relays that are needed.   The analog backplane relays specified in the abuslist parameter are used or affected by:  channel.close(), used during the processing of the command  channel.exclusiveclose(), used during the processing of the command  channel.open(), used during the processing of the command  channel.setpole() clears the analog backplane relays  scan.execute() or scan.background(), if channels are configured for switching (the assigned DMM configuration has the function set to \"nofunction\")  The analog backplane relays specified in the abuslist parameter are not used or affected by:  dmm.close()  dmm.open()  scan.execute() or scan.background() if the channels are configured for measuring (the DMM configuration has the function set to something other than \"nofunction\").  For channel patterns, the analog backplane relays are specified when the pattern is created (see channel.pattern.getimage() and channel.pattern.snapshot()). Channel patterns do not have a poles setting associated with them.  If this command is updated, the previous list is replaced with the new specified analog backplane relays in the abuslist parameter.  For channels, as their pole setting change, the list of analog backplane relays gets cleared. Therefore, after changing the pole settings, send channel.setbackplane() with the appropriate analog backplane relay channels. When clearing the backplane channels, this can involve clearing the paired channel, whether pairing or un-pairing channels. For example, on a 40&#8209;channel card, channels 1 and 21 are paired when the poles for channel 1 is set to 4. Therefore, setting the poles setting on channel 1 to 4 clears the backplane channels for channels 1 and 21. Likewise, they are both cleared when the poles setting is set back to 2 on channel 1.  Calling this function on an existing channel involved in scanning invalidates the existing scan list.  An error is generated if:  An empty slot is specified.  A specified channel or analog backplane relay does not exist for the card installed in a slot.   An empty parameter string is received for channelList. An empty string is allowed for abuslist. A parameter string of just spaces is treated like an empty string.  A specified channel does not have analog backplane relays associated with it, such as digital I/O.  An analog backplane relay is specified in channelList.  A channel is specified in abuslist.  A channel pattern is specified.  If a syntax error occurs, command processing stops and no changes are made.  Example 1  channel.setbackplane(\"2002\", \"2913, 2914\")  channel.open(\"allslots\")  channel.close(\"2002\")  print(channel.getclose(\"allslots\"))  Use analog backplane relays 3 and 4 in bank&nbsp;1 of slot 2 for a switching application on channel 2 of slot 2.  Open all channels in the instrument.  Close channel 2 on slot 2.  Query for all closed channels in the instrument.  Output (assuming channel 2002 is configured for 2-pole operation):  2002;2913;2914  Example 2  print(channel.getbackplane(\"2002\"))  channel.open(\"slot2\")  channel.setpole(\"2002\", 4)  channel.close(\"2002\")  print(channel.getclose(\"slot2\"))  channel.open(\"slot2\")  channel.setbackplane(\"2002\", \"2911, 2922\")  channel.close(\"2002\")  print(channel.getclose(\"slot2\"))  Query the analog backplane relays for channel&nbsp;2 of slot 2, assuming the configuration of the previous example.  Output:  2913,2914  Open all channels on slot 2 only.  Change the poles on channel 2 of slot 2 to 4 (this clears previously assigned backplanes to the channel).  Close channel 2 on slot 2.  Query for closed channels on slot 2 (note that the backplane relays have been cleared and the paired channel, 2022, is in parentheses)  Output:  2002(2022)  Open all channels on slot 2 only.  Assign analog backplane relay 1 of bank 1 and relay 1 of bank 2 of slot 2 to channel 2 of slot 2.  Close channel 2 on slot 2.  Query for closed channels on slot 2.  Output:  2002(2022);2911;2922  Also see  channel.close()  channel.exclusiveclose()  channel.getbackplane()  channel.open()  channel.setpole()  scan.background()  scan.execute()  "},{"id":77,"title":"channel.setdelay()","url":"17522.htm","text":"This function sets additional delay time for specified channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset <br>Recall setup<br>Power cycle  Create configuration script<br>Save setup  0  Usage  channel.setdelay(\"channelList\", delay)  channelList  A string listing the channels for which to add delay time  delay  Delay time for the selected channels; minimum is 0 seconds  Details  Setting a delay only applies to switch channels. An error occurs for a read/write channel such as digital input/output. The delay being specified by value may be updated based on a card's resolution for delay. To see if the delay value was modified after setting, use the channel.getdelay() command to query.  Channel patterns get their delay from the channels that comprise the pattern. Therefore, specify the delay for a pattern through the channels. A pattern incurs the longest delay of all channels comprising that pattern.  An error message is generated if:  The value is an invalid setting for the specified channel  A channel pattern is specified  The channel is for an empty slot  An analog backplane relay is specified  Command processing will stop as soon as an error is detected and no delay times will be modified.  @Pseudocards do not replicate the additional delay time.  Example 1  channel.setdelay(\"5001, 5003\" , 50e-6)  Sets channels 1 and 3 on slot 5 for a delay time of 50&nbsp;µs.  Example 2  channel.setdelay (\"slot3\", 0)  Sets the channels on slot 3 for 0 delay time.  Also see  channel.getdelay()  "},{"id":78,"title":"channel.setforbidden()","url":"17402.htm","text":"This function prevents the closing of specified channels and analog backplane relays.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  Not forbidden  Usage  channel.setforbidden(\"channelList\")  channelList  A string that lists the channels and analog backplane relays to make forbidden to close  Details  The channelList parameter indicates the scope of channels affected and may include:  allslots or slotX (where X equals 1 to 6)  Channel ranges or individual channels  Analog backplane relays  This function prevents all items contained in the channel list parameter from closing. It applies the \"forbidden to close\" attribute to the specified channels. To remove the \"forbidden to close\" attribute, use channel.clearforbidden().  If a channel that is being set to forbidden is used in a channel pattern, the channel pattern is deleted when the channel or analog backplane relay is set to forbidden. Note that if the channelList parameter includes a channel pattern, the channel pattern will be deleted when the channels in the patterns are successfully set to forbidden to close.  The channels or analog backplane relays in the channelList parameter must be installed in the instrument.  If the scan list contains a channel or analog backplane relay that is forbidden, the scan list is invalidated.  Example  channel.setforbidden(\"2002,2004,2006,2008\")  Marks channels 2, 4, 6, and 8 of slot 2 as forbidden to close.  channel.setforbidden(\"slot3\")  Marks all channels and analog backplane relays on slot 3 as forbidden to close.  Also see  channel.clearforbidden()  channel.getforbidden()  "},{"id":79,"title":"channel.setlabel()","url":"15944.htm","text":"This function sets the label associated with a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup<br>Power cycle  Create configuration script<br>Save setup  No label  Usage  channel.setlabel(\"channelList\", \"labelname\")  channelList  A string that lists the channel to which to set the label; the string cannot contain spaces  labelname  A string that contains the label for the channel in channelList, up to 19 characters  Details  This command sets the label of the specified channel to the label value. The channel attributes associated with the channel remain unchanged except for the label.  The label must be unique. In addition, it cannot be the same as the name of a channel pattern. If you specify a label that already exists, an error message is generated that indicates a parameter error and channel that that is already associated the specified label.   For example, channel one on slot 4 has a label of start. If you send channel.setlabel(\"5001\", \"start\"), error code 1115, \"Parameter error label already used with channel 4001,\" is generated.  To clear a label, set it to an empty string (\"\").  After defining a label, you can use it to specify the channel instead of using the channel specifier.  Example 1  channel.setlabel(\"3001\", \"start\")  channel.close(\"start\")  print(channel.getclose(\"allslots\"))  Sets the label for channel 1 on slot 3 to start and closes start.  Output:  3001  Example 2  channel.setlabel(\"3001\", \"\")  Clears the label for channel 1 on slot 3 back to 3001.  Example 3  channel.setlabel(\"3001\", \" \")  Also clears the label for channel 1 slot 3 back to 3001.  Also see  Channel  "},{"id":80,"title":"channel.setmatch()","url":"17541.htm","text":"This function sets the match value on a digital input or totalizer channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Restore setup<br>Instrument reset<br>Power cycle<br>Channel reset  Save setup  0  Usage  channel.setmatch(\"channelList\", matchValue)  channel.setmatch(\"channelList\", matchValue, mask)  channel.setmatch(\"channelList\", matchValue, mask, width)  channelList  String that specifies the channels to query, using normal channel list syntax  matchValue  Channel value to compare on the specified channel  mask  Value to specify the bits used to mask matchValue  width  Value that specifies matches over multiple consecutive channels (default 1)  Details  You can use matching to set a state or generate an event when the digital I/O or totalizer count matches a value, instead of continually reading the digital input or totalizer.  The default mask is all bits.  For digital I/O channels, a width of 1, 2, 3, or 4 channels is supported. Any bits greater than the specified width are ignored. If a width crosses channels, the match status indicator is only on the channel specified in the match value. For example, setting a value with a 2 width on channel 3 drives the indicator on channel 3, not channel 4. Match values for output channels are ignored.  Totalizer and DAC channels only support a width of 1, and mask is ignored.  Switch and backplane channels are not supported. If they are included in a range or slot specifier, they are ignored. If they are specified directly, an error is generated.  Example 1  channel.setmatchtype(\"1001\", channel.MATCH_EXACT)  channel.setmatch(\"1001\", 32)  Generates a match state event on bit B6 of digital I/O channel 1, assuming a 3750.  Example 2  channel.setmatchtype(\"6007\", channel.MATCH_EXACT)  channel.setmatch(\"6007\", 300)  Assuming a 3750, configure the totalizer channel 7 on slot 6 to generate a match state event when it reaches&nbsp;300.  Also see  channel.getmatch()  "},{"id":81,"title":"channel.setmatchtype()","url":"15946.htm","text":"This function sets the match type on a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  channel.MATCH_NONE  Usage  channel.setmatchtype(\"channelList\", type)  channelList  String specifying the channels to set, using normal channel list syntax  type  A value for setting the match operation used on this specific channel  Details  The types of match values include:  channel.MATCH_EXACT or 1  channel.MATCH_ANY or 2 (not available for totalizer channels)  channel.MATCH_NOT_EXACT or 3 (not available for totalizer channels)  channel.MATCH_NONE or 4  For an exact match, the state match indicator only becomes true when the match value and match mask value equal the channel read value.  For an any match, the state match indicator only becomes true when the match value or match mask value equals the channel read value.  For a not exact match, the state match indicator only becomes true when the match value and match mask value and channel read value are not equal to the match value and match mask value and last channel read value. In other words, the match value should be the present value, and if the value changes at all away from the original value, a match is declared.  For none, matching is disabled.  For totalizer channels, only match exact and match none are supported.  This command is not supported on DAC, backplane, and switch channels.  Example  channel.setmatchtype(\"1001\", channel.MATCH_EXACT)  Assuming a 3750, defines the match type for digital I/O channel 1 to be a MATCH_EXACT type.  Also see  channel.getmatchtype()  channel.setmatch()  "},{"id":82,"title":"channel.setmode()","url":"15947.htm","text":"This function sets the mode of operation of a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  Digital I/O: 0 (channel.MODE_INPUT)<br>Totalizer: 3 (channel.MODE_RISING_TTL_EDGE)<br>DAC: 49 (channel.MODE_PROTECT_VOLTAGE_1)  Usage  channel.setmode(\"channelList\", mode)  channelList  String specifying the channels to set, using normal channel list syntax  mode  The value that sets the mode of operation for a channel; see Details  Details  Different channel types contain additional configurable settings. These settings are grouped together by channel type as described in the following paragraphs.  For digital I/O channels, the mode indicates the direction of the channel (input or output). The following modes are supported:  channel.MODE_INPUT (default) or 0  channel.MODE_OUTPUT or 1  channel.MODE_PROTECT_OUTPUT or 3  For totalizer channels, the mode indicates the configuration of the channel (edge and reset). The following modes are supported:  channel.MODE_RISING_EDGE or 1  channel.MODE_FALLING_EDGE or 0  channel.MODE_RISING_TTL_EDGE (default) or 3  channel.MODE_FALLING_TTL_EDGE or 2  channel.MODE_RISING_EDGE_READ_RESET or 5  channel.MODE_FALLING_EDGE_READ_RESET or 4  channel.MODE_RISING_TTL_EDGE_READ_RESET or 7  channel.MODE_FALLING_TTL_EDGE_READ_RESET or 6  For DAC channels, the mode indicates the output of the channel (function and range). The output is switched off before any mode change is made, and remains off after the mode has changed. The following modes are supported:  channel.MODE_VOLTAGE_1 or 17  channel.MODE_CURRENT_1 or 1  channel.MODE_CURRENT_2 or 2  channel.MODE_PROTECT_VOLTAGE_1 (default) or 49  channel.MODE_PROTECT_CURRENT_1 or 33  channel.MODE_PROTECT_CURRENT_2 or 34  Changing the mode setting can impact the power consumption of the card. The instrument verifies that power is available before changing the mode. If an insufficient power capability exists, the command generates an error.  Consult the card-specific documentation for more detailed information on mode settings and functionality.  For digital I/O channels, changing the mode from input to output adds an additional channel delay if the channel.setdelay() function was used to set a user delay.  For switch and backplane channels, there is no valid mode setting. Setting a mode on a specific switch or backplane channel generates an error. If the switch or backplane channel is in the range of channels, the switch or backplane channel is ignored.  The specified channel list must use only one channel type. For example, channel list \"1001:1004\" is only valid if channels 1, 2, 3, and 4 are of the same type. If channel 3 is a different type of channel, the channel list is invalid and an error is generated.  Example  channel.setmode(\"6003:6005\", channel.MODE_OUTPUT)  channel.setmode(\"6007\", channel.MODE_FALLING_TTL_EDGE)  Assuming a 3750, set digital I/O channels 3 to 5 to be configured for output on slot 6.  Set the totalizer channel 7 on slot 6 to count the falling edges of a TTL signal.  Also see  channel.setdelay()  "},{"id":83,"title":"channel.setoutputenable()","url":"15948.htm","text":"This function sets the output enable attribute on a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  0 (channel.OFF)  Usage  channel.setoutputenable(\"channelList\", state)  channelList  String specifying the channels to set, using normal channel list syntax  state  A value representing the state of the output of the channel  Details  For DAC channels, output enable indicates whether or not the DAC is driving the output. The following possible states are supported:  channel.ON  channel.OFF (default)  For DAC channels, changing the output state to on adds an additional channel delay to channel.setdelay().  Channels with output set to off consume less power.  Changing the output setting impacts the power consumption of the card. The instrument verifies that power is available before changing the mode. If there is insufficient power capability, the command generates an error. Consult the specific card documentation for information on a channel&#8217;s output characteristics.  For switch, backplane, digital I/O, and totalizer channels, there is no valid output enable value. Setting output enable on a specific channel generates an error. If one of these channels is in the range of channels, the channel is ignored.  Example  channel.setoutputenable(\"1010\", channel.OFF)  Assuming a 3750, turns the output off on the first DAC channel (channel 10) in slot 1.  Also see  channel.getoutputenable()  channel.setdelay()  "},{"id":84,"title":"channel.setpole()","url":"15949.htm","text":"This function specifies the pole setting for a list of channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  Card dependent, but typically 2 (channel.POLES_TWO)  Usage  channel.setpole(\"channelList\", value)  channelList  String specifying the channels to set, using normal channel list syntax  value  Pole setting for the channels in channelList. Use the following:  For one-pole: channel.POLES_ONE or 1  For two-pole: channel.POLES_TWO or 2  For four-pole: channel.POLES_FOUR or 4  Details  The parameter string can contain allslots or slotX, where X is 1 to 6.  Channel patterns do not have a pole setting associated with them. For channel patterns, the pole setting indicates if the paired channel should be used when the pattern is created and the analog backplane relays must be specified when creating the pattern (with channel.pattern.setimage() and channel.pattern.snapshot()). Channel patterns get deleted as the pole settings of the channels in the pattern image get changed.  You manipulate the analog backplane relays after setting the pole setting by using the channel.setbackplane() function for channels. For channels, as the pole setting changes, their analog backplane relays, specified by channel.setbackplane(), get cleared. Therefore, after a pole setting change, you need to add the analog backplane relays for the pole setting by using channel.setbackplane().   When clearing the backplane channels, this can involve clearing the paired channel, whether pairing or unpairing channels. For example, on a 40-channel card, channels 1 and 21 are paired when the pole setting for channel 1 is set to 4. Therefore, when changing the pole setting on channel 1 to 4, the backplane channels for channels 1 and 21 are cleared. Likewise, they both are cleared when the pole setting is set back to 2 on channel 1.  Calling this function on an existing channel involved in scanning invalidates the existing scan list.  An error message is generated for the following reasons:  An empty parameter string is specified.  The value parameter is an invalid setting for the specified channel.  The value parameter is invalid for command &#8211; parameter out of range error.  A channel pattern or analog backplane relay was specified.  Command processing stops as soon as an error is detected and no pole settings are modified.  Example 1  channel.setpole(channel.POLES_FOUR)  Sets channels on slot 5 to four-pole.  Example 2  channel.reset(\"slot2\")  channel.setpole(channel.POLES_FOUR)  channel.close(\"2001, 2003\")  print(channel.getclose(\"slot2\"))     channel.open(\"slot2\")  channel.setbackplane(\"2001\", \"2915\")  channel.setbackplane(\"2003\", \"2925\")  channel.close(\"2001, 2003\")  print(channel.getclose(\"slot2\"))  print(channel.getimage(\"2001, 2003\"))  channel.open(\"slot2\")  channel.setpole(\"slot2\", 2)  print(channel.getimage(\"2001, 2003\"))  Assuming a 3721, reset channels on slot 2 only.  Set channels on slot 2 to 4-pole.  Close channels 1 and 3 on slot 2.  Query slot 2 for closed channels and analog backplane relays.  Output:  2001(2021);2003(2023)  Note that the channels in parentheses are the paired channels because they are in a 4-pole configuration.  Open all channels and analog backplane relays on slot 2.  Associate analog backplane relay 5 in bank 1 of slot 2 with channel 1 on slot 2.  Associate analog backplane relay 5 in bank 2 of slot 2 with channel 3 on slot 2.  Close channels 1 and 3 on slot 2.  Query slot 2 for closed channels and analog backplane relays.  Output:  2001(2021);2003(2023);2915;2925  Query for channels and analog backplane relays that are manipulated when open and close channels 1 and 3 on slot 2.  Output:  2001(2021),2915;2003(2023),2925   Clear paired channels and analog backplane relays.  Output:  2001;2003  Note that channels are no longer paired or have analog backplane relays associated with them.  Also see  channel.getbackplane()  channel.getpole()  channel.pattern.setimage()  channel.pattern.snapshot())  channel.setbackplane()   "},{"id":85,"title":"channel.setpowerstate()","url":"14135.htm","text":"This function sets the power state on a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  Dependent on installed card, but usually 1 (channel.ON)  Usage  channel.setpowerstate(\"channelList\", state)  channelList  The channels to set, using standard channel naming  state  channel.OFF or 0: Disable the power  channel.ON or 1: Enable the power  Details  When a channel that was previously off is turned on, the channel attributes are reset to their default values (except the power state attribute).  Changing the output setting impacts the power consumption of the card. Channels with an off power state consume less power. Before enabling power, the instrument verifies that power is available before changing the state. If insufficient power capability exists, the command generates an error.  Consult the specific card documentation for information on a channel&#8217;s power usage characteristics, including default state, possible warmup issues, especially for DAC channels, and effects on other channels.  When a channel with an off power state is used in a scan, results are undefined. No error notification is issued.  For switch, backplane, and digital I/O channels, there is no valid power state attribute. Setting the power state on a specific channel generates an error.  On some cards for totalizer channels, setting the power state of a single channel can affect the power state of other channels. If a single totalizer channel is turned on, all totalizer channels are reset to their defaults.  Example  channel.setpowerstate(\"1010\", channel.ON)  Sets the power state for DAC channel 10 on the card in slot 1 to ON, assuming a&nbsp;3750.  Also see  channel.getpowerstate()  "},{"id":86,"title":"channel.setstatelatch()","url":"15950.htm","text":"This function sets the state indicators to either latching or nonlatching.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  14 for overload, match, and overflow  Usage  channel.setstatelatch(\"channelList\", stateLatchMask)  channelList  The channels to set, using standard channel naming  stateLatchMask  A value specifying the indicators to latch:  channel.IND_MATCH or 4  channel.IND_OVERFLOW or 8  channel.IND_OVERLOAD or 2  Details  Applicable to digital I/O, totalizer, and DAC channels only.  Each indicator is represented by a bit in the mask.  For nonlatching applications, the state indicator clears automatically when the causing condition clears itself. For latching applications, the condition is cleared using the channel.resetstatelatch() command.  When using the trigger model, events are always nonlatching (or pulse oriented). However, in latching operation, the event is only generated once at the beginning. In nonlatching operation, the event is generated anytime the condition begins.  Set multiple states by performing a logical OR operation on the values.  Example 1  channel.setstatelatch(\"1001\", channel.IND_MATCH)  Generate only a match state event on digital I/O channel 1 in slot 1, assuming a &nbsp;3750.  Example 2  channel.setstatelatch(\"6010\", bit.bitor(channel.IND_OVERFLOW, channel.IND_OVERLOAD))  print(channel.getstatelatch(\"6010\"))  Generate either an overflow or overload event on DAC channel 10 in slot 6, assuming a Model&nbsp;3750.  Query for the state latch for channel 10 on slot 6.  Output:  10  Also see  channel.getstate()  channel.getstatelatch()  channel.resetstatelatch()  "},{"id":87,"title":"channel.trigger[N].clear()","url":"15951.htm","text":"This function clears any pending events.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.trigger[N].clear()  N  Number indicating the trigger line to clear (1 to 8)  Details  This function clears any pending events for the channel trigger specified by N.  Example  channel.trigger[1].clear()  Clears any pending events on channel trigger 1.  Also see  channel.trigger[N].set()  "},{"id":88,"title":"channel.trigger[N].EVENT_ID","url":"15952.htm","text":"This constant indicates the trigger event generated by the channel trigger N.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  X = channel.trigger[N].EVENT_ID  X  The trigger event number  N  Number indicating the channel trigger event ID (1 to 8)  Example  scan.trigger.channel.stimulus = channel.trigger[1].EVENT_ID  Use channel trigger 1 events to pace the channel action of the scanning or set the trigger stimulus of the channel event detector to channel trigger 1.  Also see  channel.trigger[N].set()  "},{"id":89,"title":"channel.trigger[N].get()","url":"15953.htm","text":"This function gets the channel status trigger information that is used to watch the state of a specific channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  Empty channel list<br>State match 0  Usage  channelList, stateMatch = channel.trigger[N].get()  channelList  Returns a string specifying the channels watched by this trigger  stateMatch  Returns a value specifying the state to match when triggering an event  N  Number indicating the channel trigger to get (1 to 8)  Details  This command is available for DAC, digital I/O, and totalizer channels. Switch channels are not supported.  Example 1  channel.trigger[1].set(\"1010\", channel.IND_MATCH)  chan_list, state_match = channel.trigger[1].get()  print(chan_list, state_match)  Assuming a 3750, defines channel trigger event 1 to occur when totalizer channel 10 matches its defined match value.  Query for the channels and state conditions associated with channel trigger 1.  Output:  1010    4.000000000e+00  Example 2  channel.trigger[5].set(\"6003, 6005\", channel.IND_MATCH)      print(channel.trigger[5].get())  Assuming a Model 3750 card, define a channel trigger event 5 to occur when either digital I/O channel 3 or 5 on slot 6 match their defined values.  View the trigger information associated with channel trigger 5.  Output:  6003,6005       4.000000000e+00  Also see  channel.trigger[N].set()  "},{"id":90,"title":"channel.trigger[N].set()","url":"15954.htm","text":"This function sets the channel status trigger model to watch the state of a specific channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  Empty channel list<br>State match 0  Usage  channel.trigger[N].set(\"channelList\", stateMatch)  N  Number indicating the channel trigger to set (1 to 8)  channelList  The channels to set, using standard channel naming  stateMatch  Value specifying the status to match when triggering an event  Details  If the channel list contains more than one channel, the trigger acts as a logical OR. When any one of the channels in the list matches the specified state, a trigger event is generated. Therefore, if an indicator is present in both the match and the actual state, an event is triggered. If the match contains more than one state indicator, only one of those indicators needs to be present to trigger the event.  There are a total of eight channel trigger events for each Series 3700A, defined by N. Using this mechanism, a trigger can be generated when a pattern is matched on an I/O, a totalizer matches a defined count, or an I/O has an overcurrent condition.  Latching functionality is not supported.   This command works for DAC, digital I/O and totalizer channels. Switch channels are not supported.  To clear a trigger that is no longer needed, pass an empty channel list (\"\" or \" \") .  Example 1  channel.trigger[1].set(\"1001\", channel.IND_MATCH)  Assuming a 3750, defines a channel trigger event 1 to occur when digital I/O channel 1 matches its defined match value.  Example 2  channel.trigger[5].set(\"6003, 6005\", channel.IND_MATCH)      print(channel.trigger[5].get())  channel.trigger[5].set(\" \", channel.IND_MATCH)  print(channel.trigger[5].get())  Assuming a 3750 card, define channel trigger event 5 to occur when either digital I/O channel 3 or 5 on slot 6 match their defined values.  View the trigger information associated with channel trigger 5.  Clear the trigger information associated with channel trigger 5.  View the trigger information associated with channel trigger 5.  Output:  6003,6005  4.000000000e+000  0.000000000e+000  Also see  channel.trigger[N].get()  "},{"id":91,"title":"channel.trigger[N].wait()","url":"15955.htm","text":"This function waits for the specified trigger or timeout period, whichever comes first.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = channel.trigger[N].wait(timeout)  triggered  Returns an indication that a trigger occurred  N  Number indicating the channel trigger to wait for (1 to 8)  timeout  The number of seconds to wait  Details  If one or more trigger events were detected since the last time channel.trigger[N].wait or channel.trigger[N].clear was called, this function returns immediately.  After waiting for a trigger with this function, the event detector is automatically reset and rearmed. This is true regardless of the number of events detected.  The value for timeout must be greater than zero and less than 10,000.  Example  channel.trigger[1].wait(5)  Wait 5 seconds for channel trigger event 1 to occur or timeout if trigger event is not detected in 5 seconds.  Also see  None  "},{"id":92,"title":"channel.write()","url":"15956.htm","text":"This function writes a value to a channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  channel.write(\"channelList\", value)  channel.write(\"channelList\", value, width)  channelList  The channels to set, using standard channel naming  value  The value to be written to the channel (must be decimal value)  width  Value that specifies the channel width of the write  Details  For widths greater than 1, the specified channel occupies the least significant byte. For example, writing the value of 4278255360 (hexadecimal FF00FF00) to channel 1 with a width of 4 sets channel 1 to 0, channel 2 to 255 (hexadecimal FF), channel 3 to 0, and channel 4 to 255 (hexadecimal FF). Writing the value of 4278255360 to channel 1 with a width of 1 sets channel 1 to 0 and leaves other channels untouched.  @You must use decimal values when sending commands to the Series 3700A.  For digital I/O channels, only widths of 1, 2, 3, or 4 are supported. All other widths are ignored. Values written to inputs are ignored. If no specified channel is set for output, then an error is generated. If a width crosses channels, then only the channels set to output are affected.  Totalizers, DACs, and switch channels do not support a width other than 1. Specifying a width greater than 1 results in an error.  For a channel with a power state of OFF, an error is generated. No action is taken on any channel in the specified channel list.  For DAC channels, the value is expected to be the set floating&#8209;point voltage or current. Also, an error is generated if the value is out of range. No action is taken on any channel in the specified channel list.  For digital I/O channels, the value becomes the setting of the digital output.  The time it takes to execute the write command is affected by the channel delay setting.  Example  channel.write(\"1001\", 33)  channel.write(\"1006\", 0)  Output a value of 33 to digital I/O channel 1.  Set totalizer channel 6 on slot 1 (assuming a 3750 card) to 0.  Also see  None  "},{"id":93,"title":"comm.gpib.enable","url":"17023.htm","text":"This attribute describes whether or not communication using the GPIB connection is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  true (enabled)  Usage  state = comm.gpib.enable  comm.gpib.enable = state  state  true: Enabled  false: Disabled  Details  This performs the same function as the MENU > GPIB > ENABLE option that is available through the front panel of the instrument.  Also see  Set the GPIB address  "},{"id":94,"title":"comm.lan.enable","url":"20163.htm","text":"This attribute controls whether or not any communication using the LAN connection is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  true (enabled)  Usage  state = comm.lan.enable  comm.lan.enable = state  state  true: Enabled  false: Disabled  Details  This is the master control setting. When this is true (enabled), you may individually control web, Telnet, VXI-11 and raw socket access to the instrument. However, when this is false (disabled), all LAN communication is disabled and this overrides the individual LAN enabled settings.  To disable only certain LAN communication with the instrument, enable this attribute and set the specific LAN communication attribute to false for raw sockets, Telnet, VXI-11 or web.  Example  comm.lan.enable = false  Disable all LAN communication with instrument.  Also see  comm.lan.rawsockets.enable  comm.lan.telnet.enable  comm.lan.vxi11.enable  comm.lan.web.enable  "},{"id":95,"title":"comm.lan.rawsockets.enable","url":"17016.htm","text":"This attribute describes whether or not communication using raw socket is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  true (enabled)  Usage  state = comm.lan.rawsockets.enable  comm.lan.rawsockets.enable = state  state  true: Enabled  false: Disabled  Details  This performs the same function as the MENU > LAN > ENABLE > RAW option available through the front panel of the instrument.  Example  comm.lan.enable = true  comm.lan.rawsockets.enable = false  Enable all LAN communication with instrument, then disable only raw sockets over the LAN.  Also see  comm.lan.enable  comm.lan.telnet.enable  comm.lan.vxi11.enable  comm.lan.web.enable  lan.status.port.rawsocket  Raw socket connection  "},{"id":96,"title":"comm.lan.telnet.enable","url":"17011.htm","text":"This attribute describes whether or not communication using Telnet is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  true (enabled)  Usage  state = comm.lan.telnet.enable  comm.lan.telnet.enable = state  state  true: Enabled  false: Disabled  Details  This performs the same function as the MENU > LAN > ENABLE > TELNET option that is available through the front panel of the instrument.  Example  comm.lan.enable = true  comm.lan.telnet.enable = false  Enable all LAN communication with instrument, then disable only Telnet over the LAN.  Also see  comm.lan.enable  comm.lan.rawsockets.enable  comm.lan.vxi11.enable  comm.lan.web.enable  lan.status.port.telnet  Telnet connection  "},{"id":97,"title":"comm.lan.vxi11.enable","url":"17014.htm","text":"This attribute describes whether or not communication using a VXI-11 connection is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  true (enabled)  Usage  state = comm.lan.vxi11.enable  comm.lan.vxi11.enable = state  state  true: Enabled  false: Disabled  Details  This performs the same function as the MENU > LAN > ENABLE > VXI11 option that is available through the front panel of the instrument.  Example  comm.lan.enable = true  comm.lan.vxi11.enable = false  Enable all LAN communication with instrument, then disable only VXI&#8209;11 over the LAN.  Also see  comm.lan.enable  comm.lan.rawsockets.enable  comm.lan.telnet.enable  comm.lan.web.enable  lan.status.port.vxi11  VXI-11 connection  "},{"id":98,"title":"comm.lan.web.enable","url":"17009.htm","text":"This attribute describes whether or not communication using the web interface is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  true (enabled)  Usage  state = comm.lan.web.enable  comm.lan.web.enable = state  state  true: Enabled  false: Disabled  Details  This performs the same function as the MENU > LAN > ENABLE > WEB option that is available through the front panel of the instrument.  Example  comm.lan.enable = true  comm.lan.web.enable = false  Enable all LAN communication with instrument, then disable only web communication over the LAN.  Also see  comm.lan.enable  comm.lan.rawsockets.enable  comm.lan.telnet.enable  comm.lan.vxi11.enable  "},{"id":99,"title":"createconfigscript()","url":"17655.htm","text":"This function creates a setup file that captures most of the present settings of the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  createconfigscript(\"scriptName\")  scriptName  A string that represents the name of the script that will be created  Details  If scriptName is set to autoexec, the autoexec script in the instrument is replaced by the new configuration script.  If scriptName is set to the name of an existing script, the existing script is overwritten.  Once created, the script that contains the settings can be run and edited like any other script.  Example  createconfigscript(\"August2013\")  Captures the present settings of the instrument into a script named August2013.  Also see  Create a configuration script  Save the present configuration  "},{"id":100,"title":"dataqueue.add()","url":"14654.htm","text":"This function adds an entry to the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  result = dataqueue.add(value)  result = dataqueue.add(value, timeout)  result  The resulting value of true or false based on the success of the function  value  The data item to add; value can be of any type  timeout  The maximum number of seconds to wait for space in the data queue  Details  You cannot use the timeout value when accessing the data queue from a remote node (you can only use the timeout value while adding data to the local data queue).  The timeout value is ignored if the data queue is not full.  The dataqueue.add() function returns false:  If the timeout expires before space is available in the data queue  If the data queue is full and a timeout value is not specified  If the value is a table, a duplicate of the table and any subtables is made. The duplicate table does not contain any references to the original table or to any subtables.  Example  dataqueue.clear()  dataqueue.add(10)  dataqueue.add(11, 2)  result = dataqueue.add(12, 3)  if result == false then     print(\"Failed to add 12 to the dataqueue\")  end  print(\"The dataqueue contains:\")  while dataqueue.count > 0 do     print(dataqueue.next())  end  Clear the data queue.  Each line adds one item to the data queue.  Output:  The dataqueue contains:  10  11  12  Also see  dataqueue.CAPACITY  dataqueue.clear()  dataqueue.count  dataqueue.next()  Using the data queue for real-time communication  "},{"id":101,"title":"dataqueue.CAPACITY","url":"14656.htm","text":"This constant is the maximum number of entries that you can store in the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  count = dataqueue.CAPACITY  count  The variable that is assigned the value of dataqueue.CAPACITY  Details  This constant always returns the maximum number of entries that can be stored in the data queue.  Example  MaxCount = dataqueue.CAPACITY  while dataqueue.count < MaxCount do     dataqueue.add(1)  end  print(\"There are \" .. dataqueue.count .. \" items in the data queue\")  This example fills the data queue until it is full and prints the number of items in the queue.  Output:  There are 128 items in the data queue  Also see  dataqueue.add()  dataqueue.clear()  dataqueue.count  dataqueue.next()  Using the data queue for real-time communication  "},{"id":102,"title":"dataqueue.clear()","url":"14655.htm","text":"This function clears the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dataqueue.clear()  Details  This function forces all dataqueue.add() commands that are in progress to time out and deletes all data from the data queue.  Example  MaxCount = dataqueue.CAPACITY  while dataqueue.count < MaxCount do     dataqueue.add(1)  end  print(\"There are \" .. dataqueue.count     .. \" items in the data queue\")  dataqueue.clear()  print(\"There are \" .. dataqueue.count     .. \" items in the data queue\")  This example fills the data queue and prints the number of items in the queue. It then clears the queue and prints the number of items again.  Output:  There are 128 items in the data<br>queue  There are 0 items in the data queue  Also see  dataqueue.add()  dataqueue.CAPACITY  dataqueue.count  dataqueue.next()  Using the data queue for real-time communication  "},{"id":103,"title":"dataqueue.count","url":"14657.htm","text":"This attribute contains the number of items in the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  count = dataqueue.count  count  The number of items in the data queue  Details  The count is updated as entries are added with dataqueue.add() and read from the data queue with dataqueue.next(). It is also updated when the data queue is cleared with dataqueue.clear().  A maximum of dataqueue.CAPACITY items can be stored at any one time in the data queue.  Example  MaxCount = dataqueue.CAPACITY  while dataqueue.count < MaxCount do     dataqueue.add(1)  end  print(\"There are \" .. dataqueue.count     .. \" items in the data queue\")  dataqueue.clear()  print(\"There are \" .. dataqueue.count     .. \" items in the data queue\")  This example fills the data queue and prints the number of items in the queue. It then clears the queue and prints the number of items again.  Output:  There are 128 items in the data queue  There are 0 items in the data queue  Also see  dataqueue.add()  dataqueue.CAPACITY  dataqueue.clear()  dataqueue.next()  Using the data queue for real-time communication  "},{"id":104,"title":"dataqueue.next()","url":"14658.htm","text":"This function removes the next entry from the data queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  value = dataqueue.next()  value = dataqueue.next(timeout)  value  The next entry in the data queue  timeout  The number of seconds to wait for data in the queue  Details  If the data queue is empty, the function waits up to the timeout value.  If data is not available in the data queue before the timeout expires, the return value is nil.  The entries in the data queue are removed in first-in, first-out (FIFO) order.  If the value is a table, a duplicate of the original table and any subtables is made. The duplicate table does not contain any references to the original table or to any subtables.  Example  dataqueue.clear()  for i = 1, 10 do     dataqueue.add(i)  end  print(\"There are \" .. dataqueue.count .. \" items in the data queue\")  while dataqueue.count > 0 do     x = dataqueue.next()     print(x)  end  print(\"There are \" .. dataqueue.count .. \" items in the data queue\")  Clears the data queue, adds ten entries, then reads the entries from the data queue. Note that your output may differ depending on the setting of format.asciiprecision.  Output:  There are 10 items in the data queue  1  2  3  4  5  6  7  8  9  10  There are 0 items in the data queue  Also see  dataqueue.add()  dataqueue.CAPACITY  dataqueue.clear()  dataqueue.count  format.asciiprecision  Using the data queue for real-time communication  "},{"id":105,"title":"delay()","url":"13949.htm","text":"This function delays the execution of the commands that follow it.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  delay(seconds)  seconds  The number of seconds to delay (0&nbsp;s to 100 ks)  Details  The instrument delays execution of the commands for at least the specified number of seconds and fractional seconds. However, the processing time may cause the instrument to delay 5&nbsp;μs to 10&nbsp;μs (typical) more than the requested delay.  Example  beeper.beep(0.5, 2400)  delay(0.250)  beeper.beep(0.5, 2400)  Emit a double&#8209;beep at 2400 Hz. The sequence is 0.5&nbsp;s on, 0.25&nbsp;s off, 0.5&nbsp;s on.  Also see  None  "},{"id":106,"title":"digio.readbit()","url":"14668.htm","text":"This function reads one digital I/O line.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data = digio.readbit(N)  data  The state of the I/O line  N  Digital I/O line number to be read (1 to 14)  Details  A returned value of zero (0) indicates that the line is low. A returned value of one (1) indicates that the line is high.  Example  print(digio.readbit(4))  Assume line 4 is set high, and it is then read.  Output:  1.00000e+00  Also see  digio.readport()  digio.writebit()  digio.writeport()  Digital I/O port  "},{"id":107,"title":"digio.readport()","url":"14669.htm","text":"This function reads the digital I/O port.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data = digio.readport()  data  The present value of the input lines on the digital I/O port  Details  The binary equivalent of the returned value indicates the value of the input lines on the I/O port. The least significant bit (bit B1) of the binary number corresponds to line 1; bit B14 corresponds to line 14.  For example, a returned value of 170 has a binary equivalent of 000000010101010, which indicates that lines 2, 4, 6, and 8 are high (1), and the other 10 lines are low (0).  Example  data = digio.readport()  print(data)  Assume lines 2, 4, 6, and 8 are set high when the I/O port is read.  Output:  1.70000e+02  This is binary 10101010.  Also see  digio.readbit()  digio.writebit()  digio.writeport()  Digital I/O port  "},{"id":108,"title":"digio.trigger[N].assert()","url":"14670.htm","text":"This function asserts a trigger pulse on one of the digital I/O lines.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.trigger[N].assert()  N  Digital I/O trigger line (1 to 14)  Details  The pulse width that is set determines how long the instrument asserts the trigger.  Example  digio.trigger[2].assert()  Asserts a trigger on digital I/O line 2.  Also see  digio.trigger[N].pulsewidth  "},{"id":109,"title":"digio.trigger[N].clear()","url":"14671.htm","text":"This function clears the trigger event on a digital I/O line.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.trigger[N].clear()  N  Digital I/O trigger line (1 to 14)  Details  The event detector of a trigger enters the detected state when an event is detected. It is cleared when digio.trigger[N].wait() or digio.trigger[N].clear() is called.  digio.trigger[N].clear() clears the event detector of the specified trigger line, discards the history of the trigger line, and clears the digio.trigger[N].overrun attribute.  Example  digio.trigger[2].clear()  Clears the trigger event detector on I/O line 2.  Also see  digio.trigger[N].overrun  digio.trigger[N].wait()  "},{"id":110,"title":"digio.trigger[N].EVENT_ID","url":"14672.htm","text":"This constant identifies the trigger event generated by the digital I/O line N.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = digio.trigger[N].EVENT_ID  eventID  The trigger event number  N  Digital I/O trigger line (1 to 14)  Details  To have another trigger object respond to trigger events generated by the trigger line, set the stimulus attribute of the other object to the value of this constant.  Example 1  digio.trigger[5].stimulus = digio.trigger[3].EVENT_ID  Uses a trigger event on digital I/O trigger line 3 to be the stimulus for digital I/O trigger line 5.  Example 2  scan.trigger.arm.stimulus = digio.trigger[3].EVENT_ID  Uses a trigger event on digital I/O trigger line 3 to be the stimulus for starting a scan.  Also see  None  "},{"id":111,"title":"digio.trigger[N].mode","url":"14674.htm","text":"This attribute sets the mode in which the trigger event detector and the output trigger generator operate on the given trigger line.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Digital I/O trigger N reset<br>Recall setup  Create configuration script<br>Save setup   0 (digio.TRIG_BYPASS)  Usage  triggerMode = digio.trigger[N].mode  digio.trigger[N].mode = triggerMode  triggerMode  The trigger mode; see Details for values  N  Digital I/O trigger line (1 to 14)  Details  Set triggerMode to one of the following values:  Trigger mode values  triggerMode  Description  digio.TRIG_BYPASS or 0  Allows direct control of the line.  digio.TRIG_FALLING or 1  Detects falling&#8209;edge triggers as input; asserts a TTL-low pulse for output.  digio.TRIG_RISING or 2  If the programmed state of the line is high, the digio.TRIG_RISING mode behavior is similar to digio.TRIG_RISINGA. If the programmed state of the line is low, the digio.TRIG_RISING mode behavior is similar to digio.TRIG_RISINGM. Only use this setting if necessary for compatibility with other Keithley Instruments products.  digio.TRIG_EITHER or 3  Detects rising- or falling&#8209;edge triggers as input. Asserts a TTL&#8209;low pulse for output.  digio.TRIG_SYNCHRONOUSA or 4  Detects the falling&#8209;edge input triggers and automatically latches and drives the trigger line low. Asserting the output trigger releases the latched line.  digio.TRIG_SYNCHRONOUS or 5  Detects the falling&#8209;edge input triggers and automatically latches and drives the trigger line low. Asserts a TTL&#8209;low pulse as an output trigger.  digio.TRIG_SYNCHRONOUSM or 6  Detects rising&#8209;edge triggers as input. Asserts a TTL&#8209;low pulse for output.  digio.TRIG_RISINGA or 7  Detects rising&#8209;edge triggers as input. Asserts a TTL&#8209;low pulse for output.  digio.TRIG_RISINGM or 8  Asserts a TTL-high pulse for output. Input edge detection is not possible in this mode.  When programmed to any mode except digio.TRIG_BYPASS, the output state of the I/O line is controlled by the trigger logic, and the user&#8209;specified output state of the line is ignored.  Use of either digio.TRIG_SYNCHRONOUSA or digio.TRIG_SYNCHRONOUSM is preferred over digio.TRIG_SYNCHRONOUS, because digio.TRIG_SYNCHRONOUS is provided for compatibility with the digital I/O and TSP-Link triggering on other Keithley Instruments products.  To control the line state, set the mode to digio.TRIG_BYPASS and use the digio.writebit() and digio.writeport() commands.  Example  digio.trigger[4].mode = 2  Sets the trigger mode for I/O line 4 to digio.TRIG_RISING.  Also see  digio.trigger[N].clear()  digio.trigger[N].reset()  digio.writebit()  digio.writeport()  Scanning and triggering  "},{"id":112,"title":"digio.trigger[N].overrun","url":"14675.htm","text":"This attribute returns the event detector overrun status.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Digital I/O trigger N clear<br>Digital I/O trigger N reset<br>Recall setup  Not saved  Not applicable  Usage  overrun = digio.trigger[N].overrun  overrun  Trigger overrun state (true or false)  N  Digital I/O trigger line (1 to 14)  Details  If this is true, an event was ignored because the event detector was already in the detected state when the event occurred.  This is an indication of the state of the event detector built into the line itself. It does not indicate if an overrun occurred in any other part of the trigger model or in any other detector that is monitoring the event.  Example  overrun = digio.trigger[1].overrun  print(overrun)  If there is no trigger overrun, the following text is output:  false  Also see  digio.trigger[N].clear()  digio.trigger[N].reset()  "},{"id":113,"title":"digio.trigger[N].pulsewidth","url":"17691.htm","text":"This attribute describes the length of time that the trigger line is asserted for output triggers.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Digital I/O trigger N reset<br>Recall setup  Create configuration script<br>Save setup  10e-6 (10&nbsp;µs) digital I/O lines 1 through 9<br>20 µs digital I/O lines 10 through 14  Usage  width = digio.trigger[N].pulsewidth  digio.trigger[N].pulsewidth = width  width  The pulse width (seconds)  N  Digital I/O trigger line (1 to 14)  Details  Setting the pulse width to zero (0) seconds asserts the trigger indefinitely. To release the trigger line, use digio.trigger[N].release().  Example  digio.trigger[4].pulsewidth = 20e-6  Sets the pulse width for trigger line 4 to 20&nbsp;μs.  Also see  digio.trigger[N].assert()  digio.trigger[N].release()  digio.trigger[N].reset()  "},{"id":114,"title":"digio.trigger[N].release()","url":"14677.htm","text":"This function releases an indefinite length or latched trigger.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.trigger[N].release()  N  Digital I/O trigger line (1 to 14)  Details  Releases a trigger that was asserted with an indefinite pulsewidth time. It also releases a trigger that was latched in response to receiving a synchronous mode trigger. Only the specified trigger line is affected.  Example  digio.trigger[4].release()  Releases digital I/O trigger line 4.  Also see  digio.trigger[N].assert()  digio.trigger[N].pulsewidth  "},{"id":115,"title":"digio.trigger[N].reset()","url":"17719.htm","text":"This function resets trigger values to their factory defaults.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.trigger[N].reset()  N  Digital I/O trigger line (1 to 14)  Details  This function resets the following attributes to factory default settings:  digio.trigger[N].mode  digio.trigger[N].pulsewidth  digio.trigger[N].stimulus  It also clears digio.trigger[N].overrun.  Example  digio.trigger[3].mode = 2  digio.trigger[3].pulsewidth = 50e-6  digio.trigger[3].stimulus = digio.trigger[5].EVENT_ID  print(digio.trigger[3].mode, digio.trigger[3].pulsewidth, digio.trigger[3].stimulus)  digio.trigger[3].reset()  print(digio.trigger[3].mode, digio.trigger[3].pulsewidth, digio.trigger[3].stimulus)  Set the digital I/O trigger line 3 for a falling edge with a pulsewidth of 50 µs.  Use digital I/O line 5 to trigger the event on line 3.  Reset the line back to factory default values.  Output before reset:  2.00000e+00        5.00000e-05        5.00000e+00  Output after reset:  0.00000e+00        1.00000e-05        0.00000e+00  Also see  digio.trigger[N].mode  digio.trigger[N].overrun  digio.trigger[N].pulsewidth  digio.trigger[N].stimulus  "},{"id":116,"title":"digio.trigger[N].stimulus","url":"20596.htm","text":"This attribute selects the event that causes a trigger to be asserted on the digital output line.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Digital I/O trigger N reset<br>Save setup  Create configuration script<br>Save setup  0  Usage  triggerStimulus = digio.trigger[N].stimulus  digio.trigger[N].stimulus = triggerStimulus  triggerStimulus  The event identifier for the triggering event  N  Digital I/O trigger line (1 to 14)  Details  Set this attribute to zero (0) to disable the automatic trigger output.  Do not use the stimulus attribute for generating output triggers under script control. Use digio.trigger[N].assert() instead.  The trigger stimulus for a digital I/O line may be set to one of the trigger event IDs, described in the following table.  Trigger event ID  Description  channel.trigger[N].EVENT_ID  A channel trigger event starts the scan.  digio.trigger[N].EVENT_ID  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID  The trigger key on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH  A DMM trigger event that indicates a measurement has exceed the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW  A DMM trigger event that indicates a measurement has exceed the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH  A DMM trigger event that indicates a measurement has exceed the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW  A DMM trigger event that indicates a measurement has exceed the low limit value on limit 2.  trigger.EVENT_ID  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID  A combination of events has occurred.  trigger.timer[N].EVENT_ID  A delay expired.  tsplink.trigger[N].EVENT_ID  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID  A LAN trigger event has occurred.  scan.trigger.EVENT_SCAN_READY  Scan ready event.  scan.trigger.EVENT_SCAN_START  Scan start event.  scan.trigger.EVENT_CHANNEL_READY  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP  Scan complete event.  scan.trigger.EVENT_IDLE  Idle event.  schedule.alarm[N].EVENT_ID  A scan starts when alarm N fires.  Example 1  digio.trigger[3].stimulus = 0  Clear the trigger stimulus of digital I/O line 3.  Example 2  digio.trigger[3].stimulus = scan.trigger.EVENT_CHANNEL_READY  Set the trigger stimulus of digital I/O line 3 to be the channel ready event during a scan.  Also see  digio.trigger[N].assert()  digio.trigger[N].clear()  digio.trigger[N].reset()  "},{"id":117,"title":"digio.trigger[N].wait()","url":"14679.htm","text":"This function waits for a trigger.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = digio.trigger[N].wait(timeout)  triggered  The value is true if a trigger is detected, or false if no triggers are detected during the timeout period  N  Digital I/O trigger line (1 to 14)  timeout  Timeout in seconds  Details  This function pauses trigger operation up to the seconds set by timeout for an input trigger. If one or more trigger events are detected since the last time digio.trigger[N].wait() or digio.trigger[N].clear() was called, this function returns a value immediately. After waiting for a trigger with this function, the event detector is automatically reset and ready to detect the next trigger. This is true regardless of the number of events detected.  Example  triggered = digio.trigger[4].wait(3)  print(triggered)  Waits up to three seconds for a trigger to be detected on trigger line 4, then outputs the results.  Output if no trigger is detected:  false  Output if a trigger is detected:  true  Also see  digio.trigger[N].clear()  "},{"id":118,"title":"digio.writebit()","url":"14680.htm","text":"This function sets a digital I/O line high or low.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.writebit(N, data)  N  Digital I/O trigger line (1 to 14)  data  The value to write to the bit:  0 (low)  Non&#8209;zero (high)  Details  If the output line is write&#8209;protected using the digio.writeprotect attribute, the command is ignored.  The reset() function does not affect the present state of the digital I/O lines.  Use the digio.writebit() and digio.writeport() commands to control the output state of the synchronization line when trigger operation is set to digio.TRIG_BYPASS.  The data must be zero (0) to clear the bit. Any value other than zero (0) sets the bit.  Example  digio.writebit(4, 0)  Sets digital I/O line 4 low (0).  Also see  digio.readbit()  digio.readport()  digio.trigger[N].mode  digio.writeport()  digio.writeprotect  "},{"id":119,"title":"digio.writeport()","url":"14681.htm","text":"This function writes to all digital I/O lines.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  digio.writeport(data)  data  Value to write to the port (0 to 16383)  Details  The binary representation of data indicates the output pattern to be written to the I/O port. For example, a data value of 170 has a binary equivalent of 00000010101010. Lines 2, 4, 6, and 8 are set high (1), and the other 10 lines are set low (0).  Write&#8209;protected lines are not changed.  The reset() function does not affect the present states of the digital I/O lines.  Use the digio.writebit() and digio.writeport() commands to control the output state of the synchronization line when trigger operation is set to digio.TRIG_BYPASS.  Example  digio.writeport(255)  Sets digital I/O Lines 1 through 8 high (binary 00000011111111).  Also see  digio.readbit()  digio.readport()  digio.writebit()  digio.writeprotect  "},{"id":120,"title":"digio.writeprotect","url":"14682.htm","text":"This attribute contains the write&#8209;protect mask that protects bits from changes from the digio.writebit() and digio.writeport() functions.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  0  Usage  mask = digio.writeprotect  digio.writeprotect = mask  mask  Sets the value that specifies the bit pattern for write&#8209;protect  Details  Bits that are set to one cause the corresponding line to be write&#8209;protected.  The binary equivalent of mask indicates the mask to be set for the I/O port. For example, a mask value of 7 has a binary equivalent of 00000000000111. This mask write&#8209;protects lines 1, 2, and 3.  Example  digio.writeprotect = 15  Write&#8209;protects lines 1, 2, 3, and 4.  Also see  digio.writebit()  digio.writeport()  "},{"id":121,"title":"display.clear()","url":"14699.htm","text":"This function clears all lines of the front&#8209;panel display.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  display.clear()  Details  This function switches to the user screen and then clears the front&#8209;panel display.  The display.clear(), display.setcursor(), and display.settext() functions are overlapped commands. That is, the script does not wait for one of these commands to complete. These functions do not immediately update the display. For performance considerations, they update the display as soon as processing time becomes available.  Also see  display.setcursor()  display.settext()  "},{"id":122,"title":"display.getannunciators()","url":"14719.htm","text":"This function reads the annunciators (indicators) that are presently turned on.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  annunciators = display.getannunciators()  annunciators  The bitmasked value that shows which indicators are turned on  Details  This function returns a bitmasked value showing which indicators are turned on. The 16&#8209;bit binary equivalent of the returned value is the bitmask. The return value is a sum of set annunciators, based on the weighted value, as shown in the following table.  Annunciator (indicator) bitmasked values and equivalent constants  Indicator  Bit  Weighted value  Equivalent constant  FILT  1  1  display.ANNUNCIATOR_FILTER  MATH  2  2  display.ANNUNCIATOR_MATH  4W  3  4  display.ANNUNCIATOR_4_WIRE  AUTO  4  8  display.ANNUNCIATOR_AUTO  ARM  5  16  display.ANNUNCIATOR_ARM  TRIG  6  32  display.ANNUNCIATOR_TRIGGER  * (asterisk)  7  64  display.ANNUNCIATOR_STAR  SMPL  8  128  display.ANNUNCIATOR_SAMPLE  EDIT  9  256  display.ANNUNCIATOR_EDIT  ERR  10  512  display.ANNUNCIATOR_ERROR  REM  11  1024  display.ANNUNCIATOR_REMOTE  TALK  12  2048  display.ANNUNCIATOR_TALK   LSTN  13  4096  display.ANNUNCIATOR_LISTEN  SRQ  14  8192  display.ANNUNCIATOR_SRQ  REAR  15  16384  display.ANNUNCIATOR_REAR  REL  16  32768  display.ANNUNCIATOR_REL  Example 1  testAnnunciators = display.getannunciators()  print(testAnnunciators)  rem = bit.bitand(testAnnunciators, 1024)  if rem > 0 then     print(\"REM is on\")  else     print(\"REM is off\")  end  REM indicator is turned on.  Output:  1.28000e+03  REM is on  Example 2  print(display.ANNUNCIATOR_EDIT)  print(display.ANNUNCIATOR_TRIGGER)  print(display.ANNUNCIATOR_AUTO)  Output:  2.56000e+02  3.20000e+01  8.00000e+00  Also see  bit.bitand()  "},{"id":123,"title":"display.getcursor()","url":"14700.htm","text":"This function reads the present position of the cursor on the front&#8209;panel display.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  row, column, style = display.getcursor()  row  The row where the cursor is: 1 (top row); 2 (bottom row)  column  The column where the cursor is:  If the cursor is in the top row: 1 to 20  If the cursor is in the bottom row: 1 to 32  style  Visibility of the cursor:  Invisible: 0  Blinking: 1  Details  This function switches the front&#8209;panel display to the user screen (the text set by display.settext()), and then returns values to indicate the row that contains the cursor and the column position and cursor&nbsp;style.  Columns are numbered from left to right on the display.  Example 1  testRow, testColumn = display.getcursor()  print(testRow, testColumn)  This example reads the cursor position into local variables and prints them.  Example output:  1.00000e+00     1.00000e+00  Example 2  print(display.getcursor())  This example prints the cursor position directly. In this example, the cursor is in row 1 at column 3, with an invisible cursor:  1.00000e+00   3.00000e+00   0.00000e+00  Also see  display.gettext()  display.screen  display.setcursor()  display.settext()  "},{"id":124,"title":"display.getlastkey()","url":"17047.htm","text":"This function retrieves the key code for the last pressed key.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  keyCode = display.getlastkey()  keyCode  A returned value that represents the last front-panel key pressed; see Details for more information  Details  A history of the key code for the last pressed front&#8209;panel key is maintained by the instrument. When the instrument is turned on, or when it is transitioning from local to remote operation, the key code is set to 0 (display.KEY_NONE).  Pressing the EXIT (LOCAL) key normally aborts a script. To use this function with the EXIT (LOCAL) key, you must set display.locallockout to display.LOCK.  The table below lists the keyCode value for each front&#8209;panel action.  Key codes  Value  Key list  Value  Key list  0  display.KEY_NONE  82  display.KEY_ENTER  65  display.KEY_RANGEUP  83  display.KEY_REC  66  display.KEY_FUNC  84  display.KEY_DMM  67  display.KEY_REL  85  display.KEY_DELETE  68  display.KEY_MENU  86  display.KEY_STEP  69  display.KEY_CLOSE  87  display.KEY_CHAN  70  display.KEY_SLOT  90  display.KEY_RATE  71  display.KEY_RUN  91  display.KEY_LIMIT  72  display.KEY_DISPLAY  92  display.KEY_TRIG  73  display.KEY_AUTO  93  display.KEY_OPEN  74  display.KEY_FILTER  94  display.KEY_PATT  75  display.KEY_EXIT  95  display.KEY_LOAD  76  display.KEY_STORE  97  display.WHEEL_ENTER  77  display.KEY_SCAN  103  display.KEY_RIGHT  78  display.KEY_INSERT  104  display.KEY_LEFT  79  display.KEY_OPENALL  107  display.WHEEL_LEFT  80  display.KEY_CONFIG  114  display.WHEEL_RIGHT  81  display.KEY_RANGEDOWN  Example  key = display.getlastkey()  print(key)  On the front panel, press the MENU key and then send the code shown here. This retrieves the key code for the last pressed key.  Output:  6.80000e+01  Also see  display.locallockout  display.sendkey()  "},{"id":125,"title":"display.gettext()","url":"14702.htm","text":"This function reads the text displayed on the front panel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  text = display.gettext()  text = display.gettext(embellished)  text = display.gettext(embellished, row)  text = display.gettext(embellished, row, columnStart)  text = display.gettext(embellished, row, columnStart, columnEnd)  text  The returned value, which contains the text that is presently displayed  embellished  Indicates type of returned text: false (simple text); true (text with embedded character codes)  row  Selects the row from which to read the text: 1 (row 1); 2 (row 2). If row is not included, both rows of text are read  columnStart  Selects the first column from which to read text; for row 1, the valid column numbers are 1 to 20; for row 2, the valid column numbers are 1 to 32; if nothing is selected, 1 is used  columnEnd  Selects the last column from which to read text; for row 1, the valid column numbers are 1 to 20; for row 2, the valid column numbers are 1 to 32; the default is 20 for row 1, and 32 for row 2  Details  Using the command without any parameters returns both lines of the front&#8209;panel&nbsp;display.  The $N character code is included in the returned value to show where the top line ends and the bottom line begins. This is not affected by the value of embellished.  When embellished is set to true, all other character codes are returned along with the message. When embellished is set to false, only the message and the $N character code is returned. For information on the embedded character codes, see display.settext().  The display is not switched to the user screen (the screen set using display.settext()). Text is read from the active screen.  Example 1  display.clear()  display.setcursor(1, 1)  display.settext(\"ABCDEFGHIJ$DKLMNOPQRST\")  display.setcursor(2, 1)  display.settext(\"abcdefghijklm$Bnopqrstuvwxyz$F123456\")  print(display.gettext())  print(display.gettext(true))  print(display.gettext(false, 2))  print(display.gettext(true, 2, 9))  print(display.gettext(false, 2, 9, 10))  This example shows how to retrieve the display text in multiple ways. The output is:  ABCDEFGHIJKLMNOPQRST$Nabcdefghijklmnopqrstuvwxyz123456  $RABCDEFGHIJ$DKLMNOPQRST$N$Rabcdefghijklm$Bnopqrstuvwxyz$F123456  abcdefghijklmnopqrstuvwxyz123456  $Rijklm$Bnopqrstuvwxyz$F123456  ij  Example 2  display.clear()  display.settext(\"User Screen\")  text = display.gettext()  print(text)  This outputs all text in both lines of the display:  User Screen       $N  This indicates that the message &#8220;User Screen&#8221; is on the top line. The bottom line is blank.  Also see  display.clear()  display.getcursor()  display.setcursor()  display.settext()  "},{"id":126,"title":"display.inputvalue()","url":"14703.htm","text":"This function displays a formatted input field on the front&#8209;panel display that the operator can edit.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  display.inputvalue(\"format\")  display.inputvalue(\"format\", default)  display.inputvalue(\"format\", default, minimum)  display.inputvalue(\"format\", default, minimum, maximum)  format  A string that defines how the input field is formatted; see Details for more&nbsp;information  default  The default value for the input value  minimum  The minimum input value  maximum  The maximum input value  Details  The format parameter uses zeros (0), the decimal point, polarity sign, and exponents to define how the input field is formatted. The format parameter can include the options shown in the following table.  Option  Description  Examples  E  Include the E to display the value exponentially  0.00000e+0  +  Allows operators to enter positive or negative values; if the \"+\" sign is not included, the operator cannot enter a negative value  +0.00  0  Defines the digit positions for the value; up to six zeros (0)  +00.0000e+00  .  Include to have a decimal point appear in the value  +0.00  The default parameter is the value shown when the value is first displayed.  You can use the minimum and maximum parameters to limit the values that can be entered. When + is not selected for format, the minimum limit must be more than or equal to zero (0). When limits are used, you cannot enter values above or below these limits.  The input value is limited to ±1e37.  Before calling display.inputvalue(), you should send a message prompt to the operator using display.prompt(). Make sure to position the cursor where the edit field should appear.  After this command is sent, script execution pauses until you enter a value and press the ENTER key.  For positive and negative entry (plus sign (+) used for the value field and the exponent field), polarity of a nonzero value or exponent can be toggled by positioning the cursor on the polarity sign and turning the navigation wheel @. Polarity is also toggled when using the navigation wheel @ to decrease or increase the value or exponent past zero. A zero (0) value or exponent (for example, +00) is always positive and cannot be toggled to negative polarity.  After executing this command and pressing the EXIT (LOCAL) key, the function returns nil.  Example  display.clear()  display.settext(\"Enter value between$N  -0.10 and 2.00:  \")  value = display.inputvalue(\"+0.00\", 0.5, -0.1, 2.0)  print(\"Value entered = \", value)  Displays an editable field (+0.50) for operator input. The valid input range is −0.10 to +2.00, with a default of&nbsp;0.50.  Output:  Value entered =    1.35000e+00  Also see  display.prompt()  display.setcursor()  display.settext()  "},{"id":127,"title":"display.loadmenu.add()","url":"19382.htm","text":"This function adds an entry to the USER TESTS menu, which can be accessed by pressing the LOAD key on the front&nbsp;panel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  display.loadmenu.add(\"displayName\", \"code\")  display.loadmenu.add(\"displayName\", \"code\", memory)  displayName  The name that is added to the USER TESTS menu  code  The code that is run from the USER TESTS menu  memory  Determines if code is saved to nonvolatile memory:  0 or display.DONT_SAVE: Does not save the code to nonvolatile memory  1 or display.SAVE: Saves the code to nonvolatile memory (default)  Details  After adding code to the load menu, you can run it from the front panel by pressing the LOAD key, then selecting USER to select from the available code to load. Pressing the RUN key then runs the&nbsp;script.  You can add items in any order. They are always displayed in alphabetical order when the menu is&nbsp;selected.  Any Lua code can be included in the code parameter. If memory is set to display.SAVE, the entry (name and code) is saved in nonvolatile memory. Scripts, functions, and variables used in the code are not saved by display.SAVE. Functions and variables need to be saved with the code. If the code is not saved in nonvolatile memory, it is lost when the Series 3700A is turned off. See Example 2 below.  If you do not make a selection for memory, the code is automatically saved to nonvolatile memory.  @You can create a script that defines several functions, and then use the display.loadmenu.add() command to add items that call those individual functions. This allows the operator to run tests from the front panel.  Example 1  display.loadmenu.add(\"Test9\", \"Test9()\")  Assume a user script named Test9 is loaded into the runtime environment. Adds the menu entry to the USER TESTS menu to run the script after loading.  Example 2  display.loadmenu.add(\"Test\", \"DUT1() beeper.beep(2, 500)\", display.SAVE)  Assume a script with a function named &#8220;DUT1&#8221; is loaded into the instrument, and the script has not been saved in nonvolatile memory.  Now assume you want to add a test named &#8220;Test&#8221; to the USER TESTS menu. You want the test to run the function named DUT1 and sound the beeper. This example adds Test to the menu, defines the code, and then saves the displayName and code in nonvolatile memory.  When Test is run from the front panel USER TESTS menu, the function named DUT1 executes and the beeper beeps for two seconds.  Now assume you turn off instrument power. Because the script was not saved in nonvolatile memory, the function named DUT1 is lost when you turn the instrument on. When Test is run again from the front panel, an error is generated because DUT1 no longer exists in the instrument as a function.  Example 3  display.loadmenu.add(\"Part1\", \"testpart([[Part1]], 5.0)\", display.SAVE)  Adds an entry called Part1 to the front&#8209;panel USER TESTS load menu for the code testpart([[Part1]], 5.0) and saves it in nonvolatile memory.  Also see  display.loadmenu.delete()  "},{"id":128,"title":"display.loadmenu.catalog()","url":"14705.htm","text":"This function creates an iterator for the user menu items accessed using the LOAD key on the front panel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  for displayName in display.loadmenu.catalog() do body end  for displayName, code in display.loadmenu.catalog() do body end  displayName  The name displayed in the menu  code  The code associated with the displayName  body  The body of the code to process the entries in the loop  Details  Each time through the loop, displayName and code take on the values in the USER TESTS menu.  The instrument goes through the list in random order.  Example  for displayName, code in display.loadmenu.catalog() do     print(displayName, code)  end  Output:  Test DUT1() beeper.beep(2, 500)  Part1 testpart([[Part1]], 5.0)  Test9 Test9()  Also see  display.loadmenu.add()  display.loadmenu.delete()  "},{"id":129,"title":"display.loadmenu.delete()","url":"14706.htm","text":"This function removes an entry from the USER TESTS menu, which can be accessed using the LOAD key on the front&nbsp;panel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  display.loadmenu.delete(\"displayName\")  displayName  The name to be deleted from the USER TESTS menu  Details  If you delete an entry from the USER TESTS menu, you can no longer run it by pressing the LOAD key.  Example  display.loadmenu.delete(\"Test9\")  for displayName, code in display.loadmenu.catalog() do     print(displayName, code)  end  Deletes the entry named Test9.  Output:  Test   DUT1() beeper.beep(2, 500)  Part1   testpart([[Part1]], 5.0)  Also see  display.loadmenu.add()  display.loadmenu.catalog()  "},{"id":130,"title":"display.locallockout","url":"14707.htm","text":"This attribute describes whether or not the EXIT (LOCAL) key on the instrument front panel is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Power cycle  Not saved  0 (display.UNLOCK)  Usage  lockout = display.locallockout  display.locallockout = lockout  lockout  0 or display.UNLOCK: Unlocks EXIT (LOCAL) key  1 or display.LOCK: Locks out EXIT (LOCAL) key  Details  Set display.locallockout to display.LOCK to prevent the user from interrupting remote operation by pressing the EXIT (LOCAL) key.  Set this attribute to display.UNLOCK to allow the EXIT (LOCAL) key to interrupt script or remote operation.  Example  display.locallockout = display.LOCK  Disables the front&#8209;panel EXIT (LOCAL) key.  Also see  None  "},{"id":131,"title":"display.menu()","url":"14708.htm","text":"This function presents a menu on the front&#8209;panel display.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  selection = display.menu(\"name\", \"items\")  selection  Name of the variable that holds the selected menu item  name  Menu name to display on the top line  items  Menu items to display on the bottom line  Details  The menu consists of the menu name string on the top line, and a selectable list of items on the bottom line. The menu items must be a single string with each item separated by whitespace. The name for the top line is limited to 20 characters.  After sending this command, script execution pauses for the operator to select a menu item. An item is selected by rotating the navigation wheel @ to place the blinking cursor on the item, and then pressing the navigation wheel @ (or the ENTER key). When an item is selected, the text of that selection is returned.  Pressing the EXIT (LOCAL) key does not abort the script while the menu is displayed, but it does return nil. The script can be aborted by calling the exit function when nil is returned.  Example  selection = display.menu(\"Menu\", \"Test1 Test2 Test3\")  print(selection)  Displays a menu with three menu items. If the second menu item is selected, selection is given the value Test2.  Output:  Test2  Also see  None  "},{"id":132,"title":"display.prompt()","url":"14740.htm","text":"This function prompts the user to enter a parameter from the front panel of the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  display.prompt(\"format\", \"units\", \"help\")  display.prompt(\"format\", \"units\", \"help\", default)  display.prompt(\"format\", \"units\", \"help\", default, minimum)  display.prompt(\"format\", \"units\", \"help\", default, minimum, maximum)  format  A string that defines how the input field is formatted; see Details for more&nbsp;information  units  Set the units text string for the top line (eight characters maximum); this indicates the units (for example, \"V\" or \"A\") for the value  help  Text string to display on the bottom line (32 characters maximum)  default  The value that is shown when the value is first displayed  minimum  The minimum input value that can be entered  maximum  The maximum input value that can be entered (must be more than minimum)  Details  This function creates an editable input field at the present cursor position, and an input prompt message on the bottom line. Example of a displayed input field and prompt:  0.00V  Input 0 to +2V  The format parameter uses zeros (0), the decimal point, polarity sign, and exponents to define how the input field is formatted.  The format parameter can include the options shown in the following table.  Option  Description  Examples  E  Include the E to display the value exponentially. Include a plus sign (+) for positive/negative exponent entry. Do not include the plus sign (+) to prevent negative value entry. 0 defines the digit positions for the exponent.  0.00000E+0  +  Allows operators to enter positive or negative values. If the plus sign (+) is not included, the operator cannot enter a negative value.  +0.00  0  Defines the digit positions for the value. You can use up to six zeros (0).  +00.0000E+00  .  The decimal point where needed for the value.  +0.00  You can use the minimum and maximum parameters to limit the values that can be entered. When a plus sign (+) is not selected for format, the minimum limit must be greater than or equal to zero (0). When limits are used, the operator cannot enter values above or below these limits.  The input value is limited to ±1e37.  After sending this command, script execution pauses for the operator to enter a value and press ENTER.  For positive and negative entry (plus sign (+) used for the value field and the exponent field), polarity of a nonzero value or exponent can be toggled by positioning the cursor on the polarity sign and turning the navigation wheel @. Polarity also toggles when using the navigation wheel @ to decrease or increase the value or exponent past zero. A zero value or exponent (for example, +00) is always positive and cannot be toggled to negative polarity.  After executing this command and pressing the EXIT (LOCAL) key, the value returns nil.  Example  value = display.prompt(\"0.00\", \"V\", \"Input 0 to +2V\", 0.5, 0, 2)  print(value)  The above command prompts the operator to enter a voltage value. The valid input range is 0 to +2.00, with a default of 0.50:  0.50V  Input 0 to +2V  If the operator enters 0.70, the output is:  7.00000e-01  Also see  display.inputvalue()  "},{"id":133,"title":"display.screen","url":"14741.htm","text":"This attribute contains the selected display screen.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  display.MAIN  Usage  displayID = display.screen  display.screen = displayID  displayID  One of the following values:  1 or display.MAIN:  Displays the main screen  2 or display.USER: Displays the user screen  Details  Setting this attribute selects the display screen for the front panel. This performs the same action as pressing the DISPLAY key on the front panel. The text for the display screen is set by display.settext().  Read this attribute to determine which of the available display screens was last selected.  @This does not support the CLOSED CHANNELS option that is available from the DISPLAY key.  Example  display.screen = display.USER  Selects the user display.  Also see  display.settext()  "},{"id":134,"title":"display.sendkey()","url":"17055.htm","text":"This function sends a code that simulates the action of a front&#8209;panel control.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  display.sendkey(keyCode)  keyCode  A parameter that specifies the key press to simulate; see Details for more information  Details  This command simulates pressing a front&#8209;panel key or navigation wheel, or turning the navigation wheel one click to the left or right.  Key codes  Value  Key list  Value  Key list  65  display.KEY_RANGEUP  82  display.KEY_ENTER  66  display.KEY_FUNC  83  display.KEY_REC  67  display.KEY_REL  84  display.KEY_DMM  68  display.KEY_MENU  85  display.KEY_DELETE  69  display.KEY_CLOSE  86  display.KEY_STEP  70  display.KEY_SLOT  87  display.KEY_CHAN  71  display.KEY_RUN  90  display.KEY_RATE   72  display.KEY_DISPLAY  91  display.KEY_LIMIT  73  display.KEY_AUTO  92  display.KEY_TRIG  74  display.KEY_FILTER  93  display.KEY_OPEN  75  display.KEY_EXIT  94  display.KEY_PATT  76  display.KEY_STORE  95  display.KEY_LOAD  77  display.KEY_SCAN  97  display.WHEEL_ENTER  78  display.KEY_INSERT  103  display.KEY_RIGHT  79  display.KEY_OPENALL  104  display.KEY_LEFT  80  display.KEY_CONFIG  107  display.WHEEL_LEFT  81  display.KEY_RANGEDOWN  114  display.WHEEL_RIGHT  @When using this function, send built-in constants, such as display.KEY_RIGHT, rather than the numeric value, such as 103. This allows for better forward compatibility with firmware revisions.  Example  display.sendkey(display.KEY_RUN)  Simulates pressing the RUN key.  Also see  Front-panel operation  "},{"id":135,"title":"display.setcursor()","url":"14711.htm","text":"This function sets the position of the cursor.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  display.setcursor(row, column)  display.setcursor(row, column, style)  row  The row number for the cursor (1 or 2)  column  The active column position to set; row 1 has columns 1 to 20, row 2 has columns 1 to 32  style  Set the cursor to invisible (0, default) or blinking (1)  Details  Sending this command selects the user screen and then moves the cursor to the given location.  The display.clear(), display.setcursor(), and display.settext() functions are overlapped commands. That is, the script does not wait for one of these commands to complete. These functions do not immediately update the display. For performance considerations, they update the display as soon as processing time becomes available.  An out&#8209;of-range parameter for row sets the cursor to row 2. An out&#8209;of&#8209;range parameter for column sets the cursor to column 20 for row 1, or 32 for row 2.  An out&#8209;of&#8209;range parameter for style sets it to 0 (invisible).  A blinking cursor is only visible when it is positioned over displayed text. It cannot be seen when positioned over a space character.  Example  display.clear()  display.setcursor(1, 8)  display.settext(\"Hello\")  display.setcursor(2, 14)  display.settext(\"World\")  This example displays a message on the front panel, approximately center. Note that the top line of text is larger than the bottom line of text.  The front panel of the instrument displays Hello on the top line and World on the second line.  Also see  display.clear()  display.getcursor()  display.gettext()  display.screen  display.settext()  "},{"id":136,"title":"display.settext()","url":"14712.htm","text":"This function displays text on the front&#8209;panel user screen.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  display.settext(\"text\")  text  Text message to be displayed, with optional character codes  Details  This function selects the user display screen and displays the given text.  After the instrument is turned on, the first time you use a display command to write to the display, the message \"User Screen\" is cleared. After the first write, you need to use display.clear() to clear the message.  The display.clear(), display.setcursor(), and display.settext() functions are overlapped commands. That is, the script does not wait for one of these commands to complete. These functions do not immediately update the display. For performance considerations, they update the display as soon as processing time becomes available.  The text starts at the present cursor position. After the text is displayed, the cursor is after the last character in the display message.  Top line text does not wrap to the bottom line of the display automatically. Any text that does not fit on the current line is truncated. If the text is truncated, the cursor remains at the end of the line.  The text remains on the display until replaced or cleared.  The character codes described in the following table can also be included in the text string.  Display character codes  Character Code  Description  $N  Newline, starts text on the next line; if the cursor is already on line 2, text is ignored after the $N is received  $R  Sets text to normal intensity, nonblinking  $B  Sets text to blink  $D  Sets text to dim intensity  $F  Sets the text to background blink  $$  Escape sequence to display a single dollar symbol ($)  Example  display.clear()  display.settext(\"Normal $BBlinking$N\")  display.settext(\"$DDim $FBackgroundBlink$R $$$$ 2 dollars\")  This example sets the display to:  Normal Blinking  Dim BackgroundBlink $$ 2 dollars  with the named effect on each word.  Also see  display.clear()  display.getcursor()  display.gettext()  display.screen  display.setcursor()  "},{"id":137,"title":"display.trigger.EVENT_ID","url":"14716.htm","text":"This constant is the event ID of the event generated when the front&#8209;panel TRIG key is pressed.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = display.trigger.EVENT_ID  eventID  The trigger event number  Details  Set the stimulus of any trigger event detector to the value of this constant to have it respond to front-panel trigger key events.  Example  scan.trigger.channel.stimulus = display.trigger.EVENT_ID  Have the channel action of the trigger model be paced by a user pressing the front&#8209;panel TRIG key.  Also see  scan.trigger.channel.stimulus  "},{"id":138,"title":"display.waitkey()","url":"66558.htm","text":"This function captures the key code value for the next front&#8209;panel action.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  keyCode = display.waitkey()  keyCode  See Details for more information  Details  After you send this function, script execution pauses until a front&#8209;panel action (for example, pressing a key or the navigation wheel @, or turning the navigation wheel @). After the action, the value of the key (or action) is returned.  If the EXIT (LOCAL) key is pressed while this function is waiting for a front&#8209;panel action, the script is not aborted.  A typical use for this function is to prompt the user to press the EXIT (LOCAL) key to abort the script or press any other key to continue. For example, if the keyCode value 67 is returned (the EXIT (LOCAL) key was pressed), the exit() function can be called to abort the script.  The table below lists the keyCode value for each front panel action.  Key codes  Value  Key (or action)  Value  Key (or action)  66  display.KEY_DELETE  84  display.KEY_TRIG  67  display.KEY_EXIT  86  display.KEY_STEP  69  display.KEY_CLOSE  87  display.KEY_CHAN  70  display.KEY_SLOT  90  display.KEY_INSERT  72  display.KEY_DISPLAY  91  display.KEY_MENU  74  display.KEY_ENTER  93  display.KEY_OPEN  76  display.KEY_LOAD  94  display.KEY_PATT  77  display.KEY_SCAN  97  display.WHEEL_ENTER  79  display.KEY_OPENALL  107  display.KEY_LEFT  80  display.KEY_CONFIG  114  display.KEY_RIGHT  83  display.KEY_RUN  @When using this function, use built-in constants, such as display.KEY_STEP (rather than the numeric value of 86). This allows for better forward compatibility with firmware revisions.  Example  key = display.waitkey()  print(key)  Pause script execution until the operator presses a key or the navigation wheel @, or rotates the navigation wheel.  If the output is:  8.600000000e+01  It indicates that the STEP key was pressed.  Also see  Capturing key-press codes  display.getlastkey()  display.sendkey()  display.settext()  "},{"id":139,"title":"dmm.adjustment.count","url":"15967.htm","text":"This attribute indicates the number of times the instrument has been adjusted (calibrated).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Nonvolatile memory  Not applicable  Usage  calibrationCount = dmm.adjustment.count  calibrationCount  The number of times the instrument has been adjusted or calibrated  Details  Calibration (adjustment) may or may not be unlocked for this attribute to read and return a value.  Example  adjustmentCount = dmm.adjustment.count  Queries for the adjustment count.  Also see  dmm.adjustment.date  dmm.calibration.unlock()  "},{"id":140,"title":"dmm.adjustment.date","url":"15968.htm","text":"This attribute sets or queries the calibration adjustment date in Coordinated Universal Time (UTC) format (number of seconds since January 1, 1970).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  DMM nonvolatile memory  Not applicable  Usage  calibrationDate = dmm.adjustment.date  dmm.adjustment.date = os.time({year=yyyy, month=m, day=d})  calibrationDate  The number of seconds since January 1, 1970  os.time{year=yyyy, month=m, day=d}  Specifies the date; if a value is not specified, sets the adjustment date to the present date of the instrument  Details  This attribute can only be set when calibration is unlocked.  For more information about formatting options with os.time or os.date, see the Lua documentation.   Example 1  dmm.adjustment.date = os.time{year=2007, month=7, day = 4}  Sets the adjustment date to July 4, 2007.  Example 2  print(os.date(\"%m/%d/%Y\", dmm.adjustment.date))  Queries the date and formats the response as mm/dd/yyyy:  07/04/2007  Example 3  print(os.date(\"%x\", dmm.adjustment.date))  Queries the date and formats the response as  mm/dd/yy:<br>02/24/09  Also see  dmm.adjustment.count  dmm.calibration.unlock()  "},{"id":141,"title":"dmm.aperture","url":"15969.htm","text":"This attribute determines the aperture setting for the selected function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Function change<br>DMM close<br>Recall DMM configuration<br>Instrument reset<br>DMM reset<br>Recall setup  Save DMM configuration<br>Create configuration script<br>Save setup  See Details  Usage  value = dmm.aperture  dmm.aperture = value  value  Represents the aperture:  For 50&nbsp;Hz line frequency, the range is 10&nbsp;µs to 0.250&nbsp;s  For 60&nbsp;Hz line frequency, the range is 8.33&nbsp;µs to 0.250&nbsp;s  For frequency and period, the range is 0.01&nbsp;s to 0.273&nbsp;s  Details  The dmm.aperture attribute is available for the following functions.  Function  Default value 60 Hz  Default value 50 Hz  \"accurrent\"  1.666667e-02  2.000000e-02  \"acvolts\"  1.666667e-02  2.000000e-02  \"commonsideohms\"  1.666667e-02  2.000000e-02  \"dccurrent\"  1.666667e-02  2.000000e-02  \"dcvolts\"  1.666667e-02  2.000000e-02  \"fourwireohms\"  1.666667e-02  2.000000e-02  \"frequency\"  1.000000e-02  1.000000e-02  \"period\"  1.000000e-02  1.000000e-02  \"temperature\"  1.666667e-02  2.000000e-02  \"twowireohms\"  1.666667e-02  2.000000e-02  The aperture setting is not available for the functions \"continuity\" and \"nofunction\". If you query the aperture when either of these functions is selected, nil is returned. If you write the command when either of these functions is selected, an error is generated.  The aperture value is saved with the dmm.func function setting, so if you use another function, then return to the previous setting, such as \"dcvolts\" or \"frequency\", the aperture value you set previously is retained.  The setting for aperture may be automatically adjusted based on what the DMM supports. Therefore, after setting the aperture, query the value to see if it was adjusted.  If the detector bandwidth (dmm.detectorbandwidth) setting is 30 or less for \"acvolts\" or \"accurrent\", an error message is generated if you try to set the aperture for these functions.  Example  dmm.func = \"dcvolts\"  dmm.aperture = 16.67e-3  Set the aperture to 16.67 milliseconds for DC volts.  Also see  dmm.dbreference  dmm.func  dmm.nplc  "},{"id":142,"title":"dmm.appendbuffer()","url":"15970.htm","text":"This function appends data from the reading buffer to a file on the USB flash drive. If no file exists, this function creates a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.appendbuffer(\"bufferVar\", \"fileName\")  dmm.appendbuffer(\"bufferVar\", \"fileName\", timeFormat)  bufferVar  A string with the name of a DMM reading buffer from which you want to append data to the specified file  fileName  A string with the file name of the file on the USB flash drive to which reading buffer data will be appended  timeFormat  How the date and time information should be saved. The values for timeFormat are:  dmm.buffer.SAVE_RELATIVE_TIME: Saves relative timestamps only  dmm.buffer.SAVE_FORMAT_TIME: Saves dates, times and fractional seconds. This is the default if no time format is specified  dmm.buffer.SAVE_RAW_TIME: Saves seconds and fractional seconds only  dmm.buffer.SAVE_TIMESTAMP_TIME: Saves only timestamps  Details  For options that save more than one item of time information, each item is comma delimited. For example, the default format is <date>, <time>, and <fractional seconds> for each reading, separated by commas.  The file extension .csv is appended to the filename if necessary. Any file extension other than .csv generates errors.  Because dmm.appendbuffer() appends data, it does not include header information. The dmm.savebuffer() function does included header information.  The index column entry starts at 1 for each append operation, which is also what the dmm.savebuffer() command does.  @The reading buffer files saved to the USB flash drive will always have an extension of .csv.  Errors are generated:  If the reading buffer does not exist.  If the reading buffer is not a DMM buffer.  If the destination filename is not specified correctly.  If the file extension is not set to .csv. (You can leave the file extension blank.)  Examples of valid destination file names:  dmm.appendbuffer(\"bufferVar\", \"/usb1/myData\")  dmm.appendbuffer(\"bufferVar\", \"/usb1/myData.csv\")  Invalid destination filename examples:  dmm.appendbuffer(\"bufferVar\", \"/usb1/myData.\")  &#8212; The period is not followed by the .csv extension.  dmm.appendbuffer(\"bufferVar\", \"/usb1/myData.txt\")  &#8212; The only allowed extension is .csv. If .csv is not assigned, it is automatically added.  dmm.appendbuffer(\"bufferVar\", \"/usb1/myData.txt.csv\")  &#8212; Two periods in the file name (myData_txt.csv would be correct).  Example  dmm.appendbuffer(\"bufferVar\", \"/usb1/myData.csv\")  Appends readings from a valid DMM buffer named bufferVar with default time information to a file named myData.csv on the USB flash drive.  dmm.appendbuffer(\"bufferVar\", \"/usb1/myDataRel.csv\", dmm.buffer.SAVE_RELATIVE_TIME)  Appends readings from bufferVar with relative timestamps to a file named myDataRel.csv on the USB flash drive.  Also see  dmm.makebuffer()  dmm.savebuffer()  "},{"id":143,"title":"dmm.autodelay","url":"15975.htm","text":"This attribute enables or disables the automatic delay that occurs before each measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Function change<br>DMM close<br>Recall DMM configuration<br>Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup<br>Save DMM configuration  2 (dmm.AUTODELAY_ONCE)  Usage  value = dmm.autodelay  dmm.autodelay = value  state  Enable autodelay: dmm.ON or 1  Disable autodelay: dmm.OFF or 0  Enable autodelay for the first measurement only: dmm.AUTODELAY_ONCE or 2  Details  The autodelay setting applies to the function selected by dmm.func. It is available for all functions except \"nofunction\".  To have the DMM include a delay before each measurement, set autodelay to dmm.ON or 1.  To have the DMM take a measurement without an automatic delay, set autodelay to dmm.OFF or 0.  When this is enabled, a delay is added after a range or function change to allow the instrument to settle.     An error is generated if you try to set autodelay for \"nofunction\". Error code 1114, \"Setting conflicts with function selected,\" is generated. If you query autodelay for \"nofunction\", nil is returned with the same error.  Example 1  dmm.func = \"twowireohms\"  dmm.autodelay = dmm.ON  dmm.measurecount = 10  ReadingBufferOne = dmm.makebuffer(1000)  dmm.measure(ReadingBufferOne)  An automatic delay is applied to each measurement when the DMM is measuring two-wire ohms. Take 10 measurements and store them in a reading buffer named ReadingBufferOne that can store up to 1000 readings.  Example 2  dmm.func = \"dcvolts\"  dmm.autodelay = dmm.OFF  No delay is applied is applied to the DC volt measurements.  Example 3  dmm.func = \"fourwireohms\"  dmm.autodelay = dmm.AUTODELAY_ONCE  dmm.measurecount = 10  ReadingBufferTwo = dmm.makebuffer(1000)  dmm.measure(ReadingBufferTwo)  Sets an autodelay for the first of the ten four-wire ohm readings. Readings two through ten will occur as quickly as possible, with readings stored in a reading buffer called ReadingBufferTwo that can store up to 1000 readings.  Also see  Autodelay  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.measurecount  "},{"id":144,"title":"dmm.autorange","url":"15976.htm","text":"This attribute specifies the autorange setting for the active function  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1 (dmm.ON)  Usage  value = dmm.autorange  dmm.autorange = value  value  Autorange:  Enable: dmm.ON or 1  Disable: dmm.OFF or 0  Details  Autorange selects the best range in which to measure the signal that is applied to the input terminals of the instrument. When autorange is enabled, the range increases at percent of range. The range decreases occur when the reading is <10&nbsp;percent of nominal range.  The autorange setting applies to the function selected by dmm.func. Autorange is available for the following functions:  \"accurrent\" or dmm.AC_CURRENT  \"acvolts\" or dmm.AC_VOLTS  \"commonsideohms\" or dmm.COMMON_SIDE_OHMS  \"dccurrent\" or dmm.DC_CURRENT  \"dcvolts\" or dmm.DC_VOLTS  \"fourwireohms\" or dmm.FOUR_WIRE_OHMS  \"twowireohms\" or dmm.TWO_WIRE_OHMS  Autorange is not available for any other functions. If you try to set autorange for any other function, an error is returned. If you query the autorange for any other function, nil is returned and an error is generated.  The autorange value is saved with the dmm.func function setting, so if you use another function, then return to the previous setting, such as \"dcvolts\" or \"fourwireohms\", the autorange setting you set previously is retained. With autorange enabled, you can use the dmm.range command to view the range that is presently being used. Using dmm.range to select a fixed range disables autorange.  Example 1  dmm.func = \"twowireohms\"  dmm.autorange = dmm.ON  Enable autoranging for 2-wire ohms.  Example 2  dmm.func = \"dcvolts\"  dmm.reset(\"active\")  print(dmm.autorange, dmm.range)  dmm.range = 50e-3  print(dmm.autorange, dmm.range)  Set DMM function to be DC volts.  Reset only the active DMM function (DC volts).  View the default autorange and range selection.  Select a range suitable for a 50&nbsp;mV reading.  View the default autorange and range selection.  Output:  1.000000000e+00        1.000000000e+01  0.000000000e+00        1.000000000e-01  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.range  "},{"id":145,"title":"dmm.autozero","url":"15977.htm","text":"This attribute enables or disables automatic updates to the internal reference measurements (autozero) of the instrument  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  dmm.ON (1)  Usage  state = dmm.autozero  dmm.autozero = state  state  Enable autozero: dmm.ON or 1  Disable autozero: dmm.OFF or 0  Refresh the reference points once then disable: dmm.AUTOZERO_ONCE or 2  Details  The autozero setting applies to the function selected by dmm.func. It is available for all functions except \"continuity\" and \"nofunction\".  You can send dmm.AUTOZERO_ONCE or 2 to refresh the reference points once. When this command is sent, the reference points are refreshed, and then autozero is set to disabled (dmm.OFF or 0). Querying dmm.autozero after sending dmm.AUTOZERO_ONCE generates a response of 0.  For dmm.nplc settings that are less than 0.2&nbsp;plc, sending dmm.AUTOZERO_ONCE or 2 results in significant delays. For example, the delay time at a NPLC of 0.0005 is 2.75&nbsp;s. The delay time at 0.199 is 5.45&nbsp;s.  An error is generated if:  You try to set dmm.autozero for \"continuity\" or \"nofunction\". Error code 1114, \"Setting conflicts with function selected,\" is generated.  You query dmm.autozero for \"continuity\" or \"nofunction\". nil is returned with error code 1114, \"Setting conflicts with function selected.\"  Example  dmm.func = \"dcvolts\"  dmm.autozero = dmm.ON  dmm.autozero = dmm.AUTOZERO_ONCE  print(dmm.autozero)  timer.reset()<br>dmm.autozero=2<br>time=timer.measure.t()<br>print(time)  Enables autozero for DC volts.  Refreshes the reference points once and sets autozero to dmm.OFF or 0.  Output:  0.000000000e+00  Determines the time delay when autozero is selected.  Also see  Autozero  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.nplc  dmm.reset()  reset()  "},{"id":146,"title":"dmm.buffer.catalog()","url":"15971.htm","text":"This function creates an iterator for the user-created reading buffers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  for name in dmm.buffer.catalog() do...end  name  A string representing the name of a user created DMM reading buffer  Details  You can access the catalog for the user-created local reading buffers so that you can print the names of all reading buffers in the system. The entries are enumerated in no particular order. From this list, you may selectively delete reading buffers from the system.  @Do not delete the reading buffers by sending:     for name in dmm.buffer.catalog() do name = nil end  This locks the system and forces you to stop the command (through the EXIT key on the front panel). It does not delete the reading buffers from the instrument. This occurs because name is a string type variable and not a reading buffer type.  Example  for name in dmm.buffer.catalog() do print(name) end  Print all user-created local reading buffers in the system.  Assume the return is:  buf3  buf5  buf1  buf1 = nil  collectgarbage()  Deletes buf1.  Also see  dmm.buffer.info()  "},{"id":147,"title":"dmm.buffer.info()","url":"15972.htm","text":"This function returns the size and capacity of the reading buffer parameter.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  size, capacity = dmm.buffer.info(bufferVar)  size  Number representing the N (presently stored) attribute of the reading buffer parameter  capacity  Number representing the overall capacity attribute of the reading buffer parameter  bufferVar  String representing the reading buffer name that you want to query for size and capacity  Details  This function uses the specified reading buffer input parameter name to find the corresponding size and capacity to return. Use this function with the dmm.buffer.catalog() function to output the size and capacity for all reading buffers in the system.  Example  for n in dmm.buffer.catalog() do     print(dmm.buffer.info(n))  end  Assume the system has the following reading buffers created: buffer1, buffer2, buffer3, buffer4, and buffer5.  Query the system for the size and capacity of each reading buffer without formatting the results.  The output is:  0.000000000e+00 2.000000000e+03  0.000000000e+00 4.000000000e+03  0.000000000e+00 5.000000000e+03  0.000000000e+00 3.000000000e+03  0.000000000e+00 1.000000000e+03  for n in dmm.buffer.catalog() do    size, cap = dmm.buffer.info(n)    print(n, 'size = ' .. size, 'capacity = ' .. cap)  end  Query the system for the name, size, and capacity of each reading buffer while formatting the results.  The output is:  buffer2 size = 0 capacity = 2000  buffer4 size = 0 capacity = 4000  buffer5 size = 0 capacity = 5000  buffer3 size = 0 capacity = 3000  buffer1 size = 0 capacity = 1000  Also see  dmm.buffer.catalog()  "},{"id":148,"title":"dmm.buffer.maxcapacity","url":"15973.htm","text":"This attribute returns the overall maximum capacity for reading buffers in the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Never  Not applicable  Not applicable  Usage  maximumCapacity = dmm.buffer.maxcapacity  maximumCapacity  A number that represents the overall maximum capacity for the reading buffers  Details  Determines the maximum capacity of the instrument for reading buffer storage. This value represents the total system reading buffer storage size. A single reading buffer may be created with this as its size, or several reading buffers may be created in the instrument that are smaller in size. However, the sum total of all reading buffer sizes in the instrument cannot exceed this maximum.  Example  MaxBuffCap = dmm.buffer.maxcapacity  print(MaxBuffCap)  Reads the maximum reading buffer capacity for the instrument, which is 650,000 readings.  Output:  6.500000000e+05  Also see  dmm.buffer.info()  dmm.buffer.usedcapacity  dmm.makebuffer()  "},{"id":149,"title":"dmm.buffer.usedcapacity","url":"15974.htm","text":"This attribute indicates how much of the maximum capacity for reading buffers in the instrument is used.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Recall setup  Not applicable  Not applicable  Usage  usedCapacity = dmm.buffer.usedcapacity  usedCapacity  The presently used capacity for reading buffers in the instrument  Details  This value represents the sum total capacity of all reading buffers in the instrument.   Example  buf1 = dmm.makebuffer(300000)  buf2 = dmm.makebuffer(300000)  print(dmm.buffer.usedcapacity)  print(dmm.buffer.maxcapacity - dmm.buffer.usedcapacity)  Create buffers.  Reads the used reading buffer capacity for the system.  6.000000000e+05  5.000000000e+04  This shows that there is a capacity of 50,000 available for creating additional reading buffers.  Also see  dmm.buffer.info()  dmm.buffer.maxcapacity  "},{"id":150,"title":"dmm.calibration.ac()","url":"15978.htm","text":"This function begins the specified AC adjustment step on the DMM.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.calibration.ac(step)  dmm.calibration.ac(step, value)  step  The AC adjustment step to perform  value  The value for this adjustment step (if the adjustment step has a value)  Details  This command generates an error if the:  Calibration is locked  Step is out of sequence  Step does not exist  Step does not complete successfully  Value passed is invalid for the step, out of range, or not needed  Example  For detail on how to use dmm.calibration.ac(), see AC volts adjustment, AC current adjustment, and Frequency adjustment.  Also see  dmm.calibration.dc()  dmm.calibration.lock()  dmm.calibration.unlock()  "},{"id":151,"title":"dmm.calibration.dc()","url":"15979.htm","text":"This function begins a DC adjustment step on the DMM.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.calibration.dc(step)  dmm.calibration.dc(step, value)  step  The DC adjustment step to perform  value  The value for this adjustment step (if the adjustment step has a value)  Details  This command generates an error if the:  Calibration is locked  Step is out of sequence  Step does not exist  Step does not complete successfully  Value passed is invalid for the step, out of range, or not needed  Example  For example of use, see DC volts adjustment, Resistance adjustment, and DC current adjustment.  Also see  dmm.calibration.ac()  dmm.calibration.lock()  dmm.calibration.unlock()  "},{"id":152,"title":"dmm.calibration.lock()","url":"15980.htm","text":"This function locks calibration to prevent unintended changes.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.calibration.lock()  Details  Use this command to lock an unlocked calibration. An error is generated if this command is issued when calibration is already locked.  Once locked, you must unlock calibration before you can perform calibration again.  @Save calibration data before locking. Calibration data will be lost if it is not saved before locking.  Example  dmm.calibration.save()  dmm.calibration.lock()  Save calibration, then lock it.  Also see  dmm.calibration.unlock()  dmm.calibration.save()  "},{"id":153,"title":"dmm.calibration.password","url":"16010.htm","text":"This attribute sets the password that must be entered before you can unlock calibration.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (W)  Yes  Not applicable  DMM nonvolatile memory  KI003706  Usage  dmm.calibration.password = \"password\"  password  A string that represents the valid password to unlock calibration  Details  This attribute can only be set when calibration is unlocked.  This attribute generates an error if calibration is locked or if the password string length is greater than ten characters.  @Be sure to record the password; there is no command to query for the password once it is set.  Example  dmm.calibration.unlock(\"KI003706\")  dmm.calibration.password = \"myUnlock\"  dmm.calibration.lock()  To change the default calibration password, unlock the calibration with the default password.  Saves the password as myUnlock.  Lock calibration. Subsequent unlocks will use the password myUnlock.  Also see  dmm.calibration.unlock()  "},{"id":154,"title":"dmm.calibration.save()","url":"16011.htm","text":"This function saves calibration data.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.calibration.save()  Details  This command saves the calibration constants and adjustment date and increases the adjustment count by 1. The adjustment count is the number of times calibration has been saved.  This command does not check for errors in calibration data. Calibration data is saved regardless of calibration data errors.  The calibration date can be specified with dmm.adjustment.date. If it is not specified, the date is based on the system date.  To prevent data loss, you need to send the save command before locking calibration.  An error is generated if this command is issued when calibration is already locked.   Example  dmm.calibration.save()  Saves calibration data.  Also see  dmm.adjustment.date  dmm.calibration.lock()  dmm.calibration.unlock()  "},{"id":155,"title":"dmm.calibration.unlock()","url":"16012.htm","text":"This function unlocks calibration if calibration was locked.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.calibration.unlock(\"password\")  password  A string representing the password to unlock calibration  Details  If the password does not match the saved password, an error is generated. The default password from the factory is \"KI003706\". You can change the default with dmm.calibration.password.  Example  dmm.calibration.unlock(\"KI003706\")  Unlocks calibration using the default password.  Also see  dmm.calibration.lock()  dmm.calibration.password  "},{"id":156,"title":"dmm.calibration.verifydate","url":"16013.htm","text":"This attribute sets or queries the calibration verification date in UTC format (number of seconds since January 1, 1970).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  DMM nonvolatile memory  Not applicable  Usage  calibrationVerificationDate = dmm.calibration.verifydate  dmm.calibration.verifydate = os.time()  calibrationVerificationDate  The number of seconds since January 1, 1970 when the last calibration verify date was set  os.time({year=yyyy, month=m, day=d})  Specifies the date; if a value is not specified, sets the verification date to the present date of the instrument  Details  When using the os.time() function:  If no parameters are specified, the current date and time of the instrument is used. See example&nbsp;4 below.  Use a table with entries for year as yyyy, month as mm and day as dd to specify a date. See example&nbsp;3 below.  See Lua documentation for the formatting options that are available for os.date.   This command can only be set when calibration is unlocked.  Example 1  print(os.date(\"%m/%d/%Y\", dmm.calibration.verifydate))  Assume the system date is July 4, 2007 for this example; queries the calibration verification date and formats the response as mm/dd/yyyy:  07/04/2007  Example 2  print(os.date(\"%x\", dmm.calibration.verifydate))  Assume the system date is July 4, 2007 for this example; queries the date and formats the response as mm/dd/yy:  07/04/07  Example 3  dmm.calibration.verifydate = os.time{year=2007, month=7, day = 4}  Set the calibration verification date to July 4, 2007.  Example 4  dmm.calibration.verifydate = os.time()  Set the calibration verification to the present date of the instrument.  Also see  dmm.adjustment.date  dmm.calibration.unlock()  Lua documentation  "},{"id":157,"title":"dmm.close()","url":"16014.htm","text":"This function closes the specified channel or channel pattern to prepare for a measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.close(\"channelList\")  channelList  A string that lists the channel or channel pattern to close  Details  When you close a channel or channel pattern:  Channels on all slots are opened if they interfere with measurement, including analog backplane relays 1 and 2 and commonside ohm backplane relays. The opening and closing of channels mimics that of channel.exclusiveslotclose(). Therefore, when using a for-loop with dmm.close() command, the last channel on each slot is closed at the end of the for loop execution.  To have additional analog backplane relays 3 through 6 close, use them on an alternate slot. If they need to be on same slot, create a channel pattern.  To have additional channels close, use patterns. When you use patterns, you must specify all items to close, including analog backplane relays. With patterns, there is no auto manipulation of analog backplane relays 1 and 2 as there is with channels.  Any amp channels will open. If you need to have multiple amp channels closed, create a channel pattern.  Associated channels and analog backplane relays will close, which include analog backplane relay 1 and 2, as needed based on configuration associated with channel (see dmm.getconfig()). Analog backplane relays specified by channel.setbackplane() are not used.  The DMM configuration is determined by the configuration associated with the channel or channel pattern being closed. If the configuration is a default name, the function of that configuration will be reset to factory default settings. You must create a unique DMM configuration to avoid using factory default settings when assigning to a channel. For more information on setting DMM configuration, see dmm.configure.set(), dmm.setconfig(), and dmm.getconfig().  This command allows you to separate the closing of channels from measuring. Therefore, you may execute any number of commands between the close and measure commands to satisfy your application needs.  An error is generated if:  The specified channel or channel pattern is invalid.  The channel number does not exist for the slot specified.  The channel pattern does not exist.  The specified channel does not support being closed (like a digital I/O channel).  More than one channel or channel pattern is specified.  The channel is paired with another bank for a multi-wire application.  The channel is an analog backplane relay.  The channel configuration is set to nofunction.  Once an error is detected, the command stops processing. Channels and DMM settings remain unchanged.  Example  dmm.setconfig(\"3003\", \"tempMeasure\")  dmm.close('3003')  Close channel 3 on slot 3 and prepare the DMM for measuring temperature with tempMeasure settings.  dmm.setconfig(\"channelDCV\", \"dcvolts\")  dmm.close(\"channelDCV\")  Close a channel pattern called channelDCV and prepare DMM for measuring DC volts at factory default settings.  Also see  channel.exclusiveslotclose()  channel.getclose()  channel.getstate()  channel.setbackplane()  dmm.getconfig()  dmm.open()  "},{"id":158,"title":"dmm.configure.catalog()","url":"16015.htm","text":"This function creates an iterator for user-created DMM configurations.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  for name in dmm.configure.catalog() do … end  name  A string representing the name of a user-created DMM configuration.  Details  You can access the catalog for user DMM configurations to print or delete all configurations in the runtime environment.  The entries are enumerated in no particular order. This only lists user-created DMM configurations. It does not list the factory default configurations.  Example  for name in dmm.configure.catalog() do   print(name)  end  Prints the names of all user-created DMM configurations in the instrument.  The output will look similar to:  TestDcv  TestTemperature  TestTwoWire  This indicates there are three user-created DMM configurations in the instrument with the names TestDCV, TestTemperature, and TestTwoWire.  for name in dmm.configure.catalog() do   dmm.configure.delete(name)  end  Deletes all user-created DMM configurations from the instrument.  Also see  dmm.configure.delete()  dmm.configure.query()   dmm.configure.recall()  dmm.configure.set()  "},{"id":159,"title":"dmm.configure.delete()","url":"16016.htm","text":"This function deletes a user-created DMM configuration from memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.configure.delete(\"name\")  name  String that contains the name of the DMM configuration to delete  Details  If you delete a DMM configuration that is assigned to channels or channel patterns, those channels and patterns revert back to the factory default DMM configuration of \"nofunction\" (dmm.setconfig()).  If you delete a DMM configuration that is used in a scan list, the scan list is modified and the channel is set to \"nofunction\" for that configuration.  You cannot delete a DMM configuration on a closed channel. If you attempt to delete it, error code 1114, \"Settings conflict with deleting DMM configuration assigned to closed channel,\" is generated.  An error is generated if the name specified does not exist as a user configuration.  Example  dmm.configure.delete(\"DCVDMMConfig\")  Deletes a user configuration called DCVDMMConfig.  Also see  dmm.configure.catalog()  dmm.configure.set()  dmm.configure.query()  dmm.configure.recall()  "},{"id":160,"title":"dmm.configure.query()","url":"16017.htm","text":"This function lists DMM settings associated with a configuration.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  config = dmm.configure.query(\"userConfiguration\")  config = dmm.configure.query(\"userConfiguration\", \"userSeparator\")  config  An output string that represents the DMM attribute settings of userConfiguration  userConfiguration  A string that contains the name for the DMM configuration to be listed; to query the settings for the active function, set this parameter to \"active\"  userSeparator  A string that represents the two-character separator that is inserted between items; the default value is a comma followed by a space (, )  Details  For the specified configuration, this function lists the settings and the corresponding DMM attributes.  If the specified configuration does not exist, a nil response is generated, along with an error message stating that the referenced name does not exist.  If userSeparator is specified, the attributes are delimited by this two-character separator. If more than two characters are specified, an error message is generated.  To query the factory default settings for a function, use the function, such as \"dvolts\" or \"temperature\", for the userConfiguration parameter. See dmm.func for valid functions.  Example  dmm.configure.set(\"DCvConfig\")  DCvConfigItems = dmm.configure.query(\"DCvConfig\")  print(DCvConfigItems)  Creates the configuration DCvConfig. Lists the DMM attributes in DCvConfig, separated by commas.  Output:  function = dcvolts,nplc = 5.000000E-001,aperture = 8.333333E-003,range = 1.000000E+001,auto zero = 0,auto delay = 2,filter enable = 0,filter type = 1,filter count =  10,filter window = 1.000000E-001,rel enable = 0,rel level = 0.000000E+000,display digits =  6,dB reference = 1.000000E+000,input divider = 0,units = 0,line sync = 0,limit 1 enable = 1,limit 1 autoclear = 1,limit 1 low value = -3.000000E+000,limit 1 high value = 5.000000E+000,limit 2 enable = 0,limit 2 autoclear = 1,limit 2 low value = -2.000000E+000,limit 2 high value = 2.000000E+000,math enable = 0,math format = 2,math mxb mfactor = 1.000000E+000,math mxb bfactor = 0.000000E+000,math mxb units = X,math percent = 1.000000E+000  DCvConfigItems = dmm.configure.query(\"DCvConfig\", \"\\n\")  print(DCvConfigItems)  Lists the DMM attributes in DCvConfig separated by new lines.  Output:  function = dcvolts  nplc = 5.000000E-001  aperture = 8.333333E-003  range = 1.000000E+001  auto zero = 0  auto delay = 2  filter enable = 0  filter type = 1  filter count =  10  filter window = 1.000000E-001  rel enable = 0  rel level = 0.000000E+000  display digits =  6  dB reference = 1.000000E+000  input divider = 0  units = 0  line sync = 0  limit 1 enable = 1  limit 1 autoclear = 1  limit 1 low value = -3.000000E+000  limit 1 high value = 5.000000E+000  limit 2 enable = 0  limit 2 autoclear = 1  limit 2 low value = -2.000000E+000  limit 2 high value = 2.000000E+000  math enable = 0  math format = 2  math mxb mfactor = 1.000000E+000  math mxb bfactor = 0.000000E+000  math mxb units = X  math percent = 1.000000E+000  FactoryDCV = dmm.configure.query(\"dcvolts\", \"\\n\")  print(FactoryDCV)  Lists the factory default settings for DC volts separated by new lines.  ActiveFunc = dmm.configure.query(\"active\", \"\\n\")  print(ActiveFunc)  Lists the DMM attributes for the active function separated by new lines.  Also see  dmm.configure.catalog()  dmm.configure.delete()  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":161,"title":"dmm.configure.recall()","url":"16018.htm","text":"This function recalls a user or factory DMM configuration and replaces attributes in the present configuration with attributes from the recalled version.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.configure.recall(\"configuration\")  configuration  A string that represents the name of the DMM configuration to recall  Details  This command recalls the DMM configuration for one function.  When a configuration is recalled, the function associated with the configuration becomes active.  When you recall a DMM configuration, the existing DMM configuration settings for the function are replaced by the settings in the recalled configuration. Settings for other functions are not affected. For example, if the function associated with the configuration was temperature, only temperature settings are recalled. If a factory configuration is recalled, the function's attributes are set to their factory default values.  The DMM configuration can be user-defined or factory-defined.  User-defined DMM configurations are set with dmm.configure.set(). The factory-defined DMM configurations are:  \"accurrent\"  \"acvolts\"  \"commonsideohms\"  \"continuity\"  \"dccurrent\"  \"dcvolts\"  \"fourwireohms\"  \"frequency\"  \"nofunction\"  \"period\"  \"temperature\"  \"twowireohms\"  Example  dmm.func = \"dcvolts\"  dmm.reset(\"active\")   dmm.nplc = 0.5  dmm.range = 10  dmm.configure.set(\"TestDcv\")  dmm.configure.recall(\"dcvolts\")  print(dmm.func, dmm.autorange, dmm.range, dmm.nplc)  dmm.configure.recall(\"TestDcv\")  print(dmm.func, dmm.autorange, dmm.range, dmm.nplc)  dmm.setconfig(\"slot1\", \"TestDcv\")  dmm.setconfig(\"2001:2015\", \"TestDcv\")  dmm.setconfig(\"3005\", \"TestDcv\")  Set the DMM to the dc voltage function.  Reset DC volts back to factory defaults.  Set the NPLC for dc voltage volts to 0.5.  Select the 10 V range for dc voltage and disable autorange.  Save a user DMM configuration for dc voltage called \"TestDcv\".  Recall and configure the DMM for factory dc voltage.  Output the settings for factory-defined dc voltage.  Recall the user DMM configuration called \"TestDcv\".  Output the settings for TestDcv.  Set the DMM configuration for slot 1, channels 2001 to 2005, and channel 3005 to TestDcv.  Output:  dcvolts\t1.000000000e+00\t1.000000000e+01\t1.000000000e+00  dcvolts\t0.000000000e+00\t1.000000000e+01\t5.000000000e-01  Also see  dmm.configure.delete()  dmm.configure.query()  dmm.configure.set()  dmm.func  "},{"id":162,"title":"dmm.configure.set()","url":"16019.htm","text":"This function creates a named DMM configuration for the selected function. The configuration includes pertinent attributes for that function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Reset<br>Recall setup  Create configuration script<br>Save setup  See Details  Usage  dmm.configure.set(\"name\")  name  A string that contains the name of the DMM configuration that you are creating  Details  This command saves the selected function and its pertinent settings. You can recall this configuration using dmm.configure.recall(). You can also apply the configuration using dmm.setconfig() to channels or channel patterns.  dmm.configure.set() stores only pertinent settings. For example, if dmm.func is set to \"dcvolts\", temperature settings are not stored.  DMM configurations are not saved through a power cycle. To save the configuration through a power cycle, use setup.save() or  createconfigscript(). These options save all DMM user configurations.  If the name of the configuration:  Already exists, the existing configuration is overwritten with the new configuration.  Is the same as that of a factory-default configuration, an error is generated.  Is longer than 30 characters, an error is generated.  Any channels that were configured to use that configuration will be evaluated to determine if the new settings are valid for the channels. If they are, the channels will start using the new configuration settings. If not, the configuration associated with that channel will revert to the factory default setting of \"nofunction\".  Some DMM configurations are preset. The factory default configuration names are:  \"accurrent\"  \"acvolts\"  \"commonsideohms\"  \"continuity\"  \"dccurrent\"  \"dcvolts\"  \"fourwireohms\"  \"frequency\"  \"nofunction\"  \"period\"  \"temperature\"  \"twowireohms\"  If you change the settings for an existing DMM configuration, the existing scan list will be updated to use the new settings for the existing DMM configuration. However, if the function or a setting is not valid for a channel in the scan list, the scan list will be reset to the default configuration of \"nofunction\".  Example  dmm.func = \"dcvolts\"  dmm.reset(\"active\")   dmm.nplc = 0.5  dmm.range = 10  dmm.configure.set(\"TestDcv\")  dmm.configure.recall(\"dcvolts\")  print(dmm.func, dmm.autorange, dmm.range, dmm.nplc)  dmm.configure.recall(\"TestDcv\")  print(dmm.func, dmm.autorange, dmm.range, dmm.nplc)   Set the DMM to the dc voltage function.  Reset DC volts back to factory defaults.  Set the NPLC for dc voltage to 0.5.  Select the 10 V range for dc voltage and disable autorange.  Save a user DMM configuration for dc voltage called \"TestDcv\".  Recall and configure the DMM for factory dc voltage.  Output the settings for factory dc voltage.  Recall the user DMM configuration called \"TestDcv\".  Output the settings for the TestDcv configuration.  Output:  dcvolts\t1.000000000e+00\t1.000000000e+01\t1.000000000e+00  dcvolts\t0.000000000e+00\t1.000000000e+01\t5.000000000e-01  Also see  createconfigscript()  dmm.configure.catalog()   dmm.configure.delete()  dmm.configure.query()   dmm.configure.recall()  dmm.func  dmm.setconfig()  setup.save()  "},{"id":163,"title":"dmm.connect","url":"16020.htm","text":"This attribute indicates how the DMM relays should be connected to the analog backplane.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  7 (dmm.CONNECT_ALL)  Usage  value = dmm.connect  dmm.connect = value  value  The DMM relay connection setting. See Details for valid values  Details  @Use of this command is not recommended with the exception of special cases. The default setting should handle most applications.  This setting affects all DMM functions. Valid values are shown in the table below.  Valid values  Value  Relays connected  dmm.CONNECT_NONE or 0  None  dmm.CONNECT_ALL or 7  All  dmm.CONNECT_TWO_WIRE or 1  2-wire  dmm.CONNECT_FOUR_WIRE or 3   2-wire and sense  dmm.CONNECT_TWO_WIRE_AMPS or 5  2-wire & amp  dmm.CONNECT_AMPS or 4  amp  The relays are bitmapped into the lower 3 bits of the value as shown in the following table.  Relay bitmap  Bit  Value  Relays represented  0  1  2-wire  1  2  sense  2  4  amp  To close a relay, set the appropriate bit to 1.  To open a relay, set the appropriate bit to 0.  An error is generated if:  The sense relay bit is set to a 1 and the sense relay with amps is selected. These two settings correspond to a value of 2 or 6, respectively.  The value is less than 0 or greater than 7.  Example  dmm.connect = dmm.CONNECT_TWO_WIRE_AMPS  Connects the DMM 2-wire and amp relays to the analog backplane.  Also see  None  "},{"id":164,"title":"dmm.dbreference","url":"16021.htm","text":"This attribute defines the decibel (dB) reference setting for the DMM in volts.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.000000E+00  Usage  value = dmm.dbreference  dmm.dbreference = value  value  The dB reference in volts (1e-7 to 1000)  Details  The dB reference setting applies only when dmm.func is set to \"dcvolts\" or \"acvolts\". If you query this value for any other function, nil is returned.  An error is generated:  If you send this command for any function other than \"dcvolts\" or \"acvolts\".  If the value is out of range.  The dB reference setting is saved with the dmm.func function setting, so if you use another function, then return to \"dcvolts\" or \"acvolts\", the dB reference setting you set previously are retained.  Example  dmm.func = \"dcvolts\"  dmm.dbreference = 5  Sets the dB reference to 5 volts for DC volts.  Also see  Express DC or AC voltage in decibels  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.aperture  "},{"id":165,"title":"dmm.detectorbandwidth","url":"16022.htm","text":"This attribute sets the AC detector bandwidth setting for the DMM in Hertz.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  300  Usage  value = dmm.detectorbandwidth  dmm.detectorbandwidth = value  value  The detector bandwidth in Hertz  Details  Only applies when dmm.func is set to \"acvolts\" or \"accurrent\".  If you query this value for any other function, nil is returned.  When you send this value, the input value is adjusted as follows:  Write value  Read value   < 30  3  Between 30 and 300   30  ³ 300  300  An error is generated:  If you send this command for any function other than \"accurrent\" or \"acvolts\"  If you set dmm.aperture and the detector bandwidth read value is 30 or less  If the value is below 3  Example  reset()  dmm.func = \"acvolts\"  print(dmm.func, dmm.detectorbandwidth)  dmm.detectorbandwidth = 35  print(dmm.func, dmm.detectorbandwidth)  dmm.func = \"accurrent\"  print(dmm.func, dmm.detectorbandwidth)  dmm.func = \"acvolts\"  print(dmm.func, dmm.detectorbandwidth)  Sets the detector bandwidth to 35 Hz for AC&nbsp;volts. 35 is adjusted to 30. AC current is still at 300&nbsp;Hz.  Output:  acvolts     3.000000000e+02  acvolts     3.000000000e+01  accurrent   3.000000000e+02  acvolts     3.000000000e+01  Also see  dmm.aperture  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":166,"title":"dmm.displaydigits","url":"16023.htm","text":"This attribute determines the number of digits that are displayed for measurements on the front panel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  See Details  Usage  value = dmm.displaydigits  dmm.displaydigits = value  value  7½ display digits: dmm.DIGITS_7_5 or 7  6½ display digits: dmm.DIGITS_6_5 or 6  5½ display digits: dmm.DIGITS_5_5 or 5  4½ display digits: dmm.DIGITS_4_5 or 4   3½ display digits: dmm.DIGITS_3_5 or 3  Details  This is not available for \"nofunction\".   This command affects how the reading for a measurement is displayed on the front panel of the instrument. It does not affect the number of digits returned in a remote command reading. It also does not affect the accuracy or speed of measurements.  The display digits setting is saved with the function setting, so if you use another function, then return to the function for which you set display digits, the display digits setting you set previously is retained.  The change in digits occurs the next time a measurement is made.  To change the number of digits returned in a remote command reading, use format.asciiprecision.  Defaults  If dmm.func is…   The default is…  \"accurrent\", \"acvolts\", \"temperature\"  5  \"commonsideohms\", \"dccurrent\", \"dcvolts\", \"twowireohms\", \"fourwireohms\", \"frequency\", \"period\"  6  \"continuity\"  4  An error is generated:  If the value is invalid  If dmm.func is set to \"nofunction\", if the command is queried, nil is returned   dmm.func is set to \"nofunction\" or \"continuity\", if the command is written, error code 1114, \"Settings conflict with function selected,\" is returned  Example  dmm.func = \"dcvolts\"  dmm.displaydigits = dmm.DIGITS_7_5  Enables display digits to 7½ for DC volts.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  format.asciiprecision  "},{"id":167,"title":"dmm.drycircuit","url":"16024.htm","text":"This attribute enables or disables the dry circuit feature of the 4&#8209;wire resistance measure function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF)  Usage  state = dmm.drycircuit  dmm.drycircuit = state  state  Enable dry circuit: dmm.ON or 1  Disable dry circuit: dmm.OFF or 0  Details  The dry circuit setting only applies when dmm.func is set to \"fourwireohms\" or \"commonsideohms\".   Enabling dry circuit limits the open-circuit voltage to below 20&nbsp;mV, which is often required with low&#8209;glitch measurements, such as measuring switch and relay contact resistance.  When dry circuit is enabled, offset compensation is automatically enabled.  An error is generated if:  You try to set dmm.drycircuit for a function other than \"fourwireohms\" or \"commonsideohms\". Error 1114, \"Setting conflicts with function selected\" is generated.  You query dmm.drycircuit for a function other than \"fourwireohms\" or \"commonsideohms\". nil is returned, along with error 1114.  The state is invalid.  The dry circuit setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the dry circuit setting you set previously is retained.  Example  dmm.func = \"fourwireohms\"  dmm.drycircuit = dmm.ON  Enable dry circuit for 4-wire ohms.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.offsetcompensation  "},{"id":168,"title":"dmm.filter.count","url":"16025.htm","text":"This attribute sets the filter count setting for the selected DMM function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  10  Usage  value = dmm.filter.count  dmm.filter.count = value  value  The filter count setting from 1 to 100  Details  The number of measured readings that will yield one filtered measurement when filtered measurements are enabled.  The filter count setting only applies when dmm.func is set to one of the following:  \"accurrent\"  \"acvolts\"  \"commonsideohms\"  \"dccurrent\"  \"dcvolts\"  \"fourwireohms\"  \"temperature\"  \"twowireohms\"  If you query the setting for any other function, nil is returned.  The filter count setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the filter count setting you set previously is retained.  An error is generated if:  You send the setting for any other function.  The value is out of range.  Example  dmm.func = \"twowireohms\"  dmm.filter.count = 5  dmm.filter.enable = dmm.ON  Sets the filter count for 2-wire ohms to 5 and enables filtered measurements.  Also see  dmm.configure.set()  dmm.configure.recall()  dmm.filter.enable  dmm.filter.type  "},{"id":169,"title":"dmm.filter.enable","url":"16026.htm","text":"This attribute enables or disables the averaging filter for measurements of the selected function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF)  Usage  value = dmm.filter.enable  dmm.filter.enable = value  value  Filter measurements setting:  Enable filter measurements: dmm.ON or 1  Disable filter measurements: dmm.OFF or 0  Details  The filter enable setting only applies when dmm.func is set to one of the following:  \"accurrent\"  \"acvolts\"  \"commonsideohms\"  \"dccurrent\"  \"dcvolts\"  \"fourwireohms\"  \"temperature\"  \"twowireohms\"  Querying the setting for any other function will return nil and an error message.  The filter enable setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the filter enable setting you set previously is retained.  Example  dmm.func = \"twowireohms\"  dmm.filter.type = dmm.FILTER_MOVING_AVG  dmm.filter.count = 3  dmm.filter.enable = dmm.ON  Enable filtered measurements for 2-wire ohms using a moving average filter type with a count of 3 for each measurement.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.filter.count  dmm.filter.type  dmm.filter.window  dmm.func  dmm.reset()  "},{"id":170,"title":"dmm.filter.type","url":"16027.htm","text":"This attribute defines the type of averaging filter that is used for the selected measure function when the measurement filter is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1 (dmm.FILTER_REPEAT_AVG)  Usage  value = dmm.filter.type  dmm.filter.type = value  value  The filter type setting:  Moving filter: dmm.FILTER_MOVING_AVG or 0  Repeating filter: dmm.FILTER_REPEAT_AVG or 1  Details  The filter type setting only applies when dmm.func is set to one of the following:  \"accurrent\"  \"acvolts\"  \"commonsideohms\"  \"dccurrent\"  \"dcvolts\"  \"fourwireohms\"  \"temperature\"  \"twowireohms\"  Querying the setting for any other function returns nil. An error is generated if this setting is written or read for any other function.  You can choose from two averaging filter types: Repeating and moving.  When the repeating average filter is selected, a set of measurements are made. These measurements are stored in a measurement stack and averaged together to produce the averaged sample. Once the averaged sample is produced, the stack is flushed, and the next set of data is used to produce the next averaged sample. This type of filter is the slowest, since the stack must be completely filled before an averaged sample can be produced, but it provides more stable results.  When the moving average filter is selected, the measurements are added to the stack continuously on a first-in, first-out basis. As each measurement is made, the oldest measurement is removed from the stack. A new averaged sample is produced using the new measurement and the data that is now in the stack.  @When the moving average filter is first selected, the stack is empty. When the first measurement is made, it is copied into all the stack locations to fill the stack. A true average is not produced until the stack is filled with new measurements. The size of the stack is determined by the filter count setting.  The filter type setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the filter type setting you set previously is retained.  Example  dmm.func = \"twowireohms\"  dmm.filter.type = dmm.FILTER_MOVING_AVG  dmm.filter.enable = dmm.ON  Set the filter type for 2-wire ohms to moving average and enable filtered measurements.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.filter.count  dmm.filter.enable  dmm.filter.window  dmm.func  "},{"id":171,"title":"dmm.filter.window","url":"16028.htm","text":"This attribute sets the window for the averaging filter that is used for measurements for the selected function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.000000E-01 (0.1)  Usage  value = dmm.filter.window  dmm.filter.window = value  value  The filter window setting; the range is between 0 and 10 to indicate percent of range  Details  The filter window setting only applies when dmm.func is set to one of the following:  \"accurrent\"  \"acvolts\"  \"commonsideohms\"  \"dccurrent\"  \"dcvolts\"  \"fourwireohms\"  \"temperature\"  \"twowireohms\"  Querying the setting for any other function returns nil. An error is generated if this setting is written or read for any other function.  An error is generated if the value is out of range.  The filter window setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the filter window setting you set previously is retained.  Example  dmm.func = \"twowireohms\"  dmm.filter.window = 0.25  dmm.filter.enable = dmm.ON  Set the filter window for 2-wire ohms to 0.25 and enable filtered measurements.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.filter.enable  dmm.filter.count  dmm.filter.type  "},{"id":172,"title":"dmm.fourrtd","url":"16029.htm","text":"This attribute sets the type of 4-wire RTD that is being used.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.RTD_PT100)  Usage  value = dmm.fourrtd  dmm.fourrtd = value  value  The type of four-wire RTD:  dmm.RTD_PT100 or 0 for type PT100  dmm.RTD_D100 or 1 for type D100  dmm.RTD_F100 or 2 for type F100  dmm.RTD_PT385 or 3 for type PT385  dmm.RTD_PT3916 or 4 for type PT3916  dmm.RTD_USER or 5 for user-specified type  Details  This attribute is only valid when dmm.func is set to \"temperature\" and dmm.transducer is set to dmm.TEMP_FOURRTD. For all other transducer types, the attribute is set but is not used until the transducer type is set for four-wire RTD.  All other functions generate an error and return nil when queried. An illegal parameter value error message is generated if the value specified is not a supported RTD type value as listed in the usage table.  The four-wire RTD setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the four-wire RTD settings you set previously are retained.  Example  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_FOURRTD  dmm.fourrtd = dmm.RTD_PT3916  Sets the type of four-wire RTD for PT3916.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.transducer  "},{"id":173,"title":"dmm.func","url":"16030.htm","text":"This attribute selects the active measure function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  dmm.DC_VOLTS  Usage  function = dmm.func  dmm.func = function  function  One of the following DMM functions:  \"accurrent\" or dmm.AC_CURRENT  \"acvolts\" or dmm.AC_VOLTS  \"commonsideohms\" or dmm.COMMON_SIDE_OHMS  \"continuity\" or dmm.CONTINUITY  \"dccurrent\" or dmm.DC_CURRENT  \"dcvolts\" or dmm.DC_VOLTS  \"fourwireohms\" or dmm.FOUR_WIRE_OHMS  \"frequency\" or dmm.FREQUENCY  \"nofunction\" or dmm.NO_FUNCTION  \"period\" or dmm.PERIOD  \"temperature\" or dmm.TEMPERATURE  \"twowireohms\" or dmm.TWO_WIRE_OHMS  Details  This attribute determines the selected DMM function and indicates how the other DMM attributes are to be processed.  When the DMM functionality changes, the attributes for the new DMM function become active. Unless you update these attributes, they will be the factory defaults or the values that were used the last time the function was used. If you want to see settings for a particular function, change to that function with dmm.func, then write or read the settings specifically. To see all attributes at once, use dmm.configure.query with a first parameter value of \"active\" as shown in the example below.  An error is generated:  If the setting does not match one of the ones specified in usage.  If a user DMM configuration name is used to set the function.  If an error is found, no change is made to the function.  Example  dmm.func = \"temperature\"  Makes \"temperature\" the active DMM function.  dmm.func = \"dcvolts\"  dcv_nplc = dmm.nplc  Check the NPLC setting for dc voltage.  dmm.func = dmm.DC_VOLTS  dmm.nplc = 0.5  dmm.range = 10  dmm.func = \"twowireohms\"  dmm.nplc = 0.1  dmm.range = 100000  dmm.func = \"dcvolts\"  print(dmm.nplc)  print(dmm.range)  dmm.func = dmm.TWO_WIRE_OHMS  print(dmm.nplc)  print(dmm.range)  Example showing how the instrument retains values for each function.  Output:  0.5  10  .1  100000  dmm.func = \"dcvolts\"  print(dmm.configure.query(\"active\", \"\\n\"))  Select dc voltage for the DMM function, then query the active settings to see how the dc voltage function is presently configured.  Example output:  function = dcvolts  nplc = 5.000000E-001  aperture = 8.333333E-003  range = 1.000000E+001  auto zero = 1  auto delay = 2  filter enable = 0  filter type = 1  filter count =   3  filter window = 5.300000E+000  rel enable = 0  rel level = 0.000000E+000  display digits =  6  dB reference = 1.000000E+000  input divider = 0  units = 0  line sync = 0  limit 1 enable = 0  limit 1 autoclear = 1  limit 1 low value = -1.000000E+000  limit 1 high value = 1.000000E+000  limit 2 enable = 0  limit 2 autoclear = 1  limit 2 low value = -2.000000E+000  limit 2 high value = 2.000000E+000  math enable = 0  math format = 2  math mxb mfactor = 1.000000E+000  math mxb bfactor = 0.000000E+000  math mxb units = X  math percent = 1.000000E+000  Also see  dmm.configure.query()  dmm.configure.recall()  dmm.configure.set()  "},{"id":174,"title":"dmm.getconfig()","url":"16031.htm","text":"This function queries for the DMM configurations that are associated with the specified channels or channel patterns.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Recall setup  Create configuration script<br>Save setup  \"nofunction\"  Usage  DMMconfiguration = dmm.getconfig(\"channelList\")   DMMconfiguration  A comma-delimited string that lists the DMM configurations associated with items in channelList  channelList  The channels or channel patterns to query  Details  The response is a comma-delimited string that lists the user-defined and factory-defined configurations. They are listed in the same order in which they are specified in channelList.  The configurations indicate how the DMM will be configured when the corresponding channel or channel pattern is closed with the dmm.close() function or used in a scan list without an overriding DMM configuration.  An error is generated if:  A specified channel or channel pattern is invalid.  A channel number does not exist for slot based on installed card.  Channel pattern does not exist.  Channel being specified does not support a configuration setting (for example, a digital I/O channel or analog backplane relay).  Example  slot1_2Configs = dmm.getconfig(\"slot1, slot2\")  print(slot1_2Configs)  Queries channels on slots 1 and 2.  chan3001_3010Configs = dmm.getconfig(\"3001:3010\")  print(chan3001_3010Configs)  Queries channels 1 to 10 on slot 3.  Sample output may be:  dcvolts,dcvolts,dcvolts,dcvolts,dcvolts,temperature,temperature,temperature,temperature,temperature  This shows that channels 3001 to 3005 are configured for \"dcvolts\" and 3006 to 3010 are configured for \"temperature\".  Also see  dmm.close()  dmm.configure.recall()  dmm.configure.set()  dmm.setconfig()  scan.add()  scan.create()  "},{"id":175,"title":"dmm.inputdivider","url":"16032.htm","text":"This attribute determines when the 10&nbsp;MΩ input divider is enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF)  Usage  state = dmm.inputdivider  dmm.inputdivider = state  state  Disable input divider: dmm.OFF or 0  Enable input divider: dmm.ON or 1  Details  This attribute is only valid when dmm.func is set to DC volts.  The input divider setting is saved with the dmm.func function setting, so if you use another function, then return to \"dcvolts\", the input divider setting you set previously is retained.  An error is generated if you try to set input divider for any DMM function other than \"dcvolts\". Error code 1114, \"Setting conflicts with function selected,\" is generated. If you query any DMM function other than \"dcvolts\" for input divider, nil is returned with the same error.  Example  dmm.func = \"dcvolts\"  dmm.inputdivider = dmm.ON  Enables the input divider for DC volts.  Also see  DC volts input divider  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":176,"title":"dmm.limit[Y].autoclear","url":"16034.htm","text":"This attribute indicates if the test result for limit Y should be cleared automatically or not.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1 (dmm.ON)  Usage  value = dmm.limit[Y].autoclear  dmm.limit[Y].autoclear = value  value  The auto clear setting:  Disable: dmm.OFF or 0  Enable: dmm.ON or 1  Y  Limit number: 1 or 2  Details  This attribute is valid for all functions except \"continuity\" and \"nofunction\". A nil response and an error are generated if the command is received when dmm.func is set to either of these functions.  When auto clear is set to on, limit conditions are cleared automatically after each measurement. If you are making a series of measurements, the instrument shows the limit test result of the last measurement for the pass or fail indication for the limit.  If you want to know if any of a series of measurements failed the limit, set the auto clear setting to off. When this is set to off, a failed indication is not cleared automatically. It remains set until it is cleared with the clear command.  The auto clear setting affects both the high and low limits.  Example  dmm.func = \"twowireohms\"  dmm.limit[2].autoclear = dmm.ON  Enables auto clear on limit 2 for two-wire ohms.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.limit[Y].clear()  dmm.measure()  "},{"id":177,"title":"dmm.limit[Y].clear()","url":"16035.htm","text":"This function clears the results of the limit test defined by Y.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.limit[Y].clear()  Y  Limit number: 1 or 2  Details  Use this command to clear the test results of limit Y when the limit auto clear option is turned off. Both the high and low test results are cleared.  To avoid the need to manually clear the test results for a limit, turn the auto clear option on.  Example  dmm.func = \"twowireohms\"  dmm.limit[2].clear()  Clears the test results for the high and low limit 2 for two-wire ohms.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.limit[Y].autoclear  dmm.limit[Y].high.fail  dmm.limit[Y].low.fail  "},{"id":178,"title":"dmm.limit[Y].enable","url":"16036.htm","text":"This attribute enables or disables a limit test on the measurement from the selected measure function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF)  Usage  value = dmm.limit[Y].enable  dmm.limit[Y].enable = value  value  Limit Y testing:  Disable: dmm.OFF or 0  Enable: dmm.ON or 1  Y  Limit number: 1 or 2  Details  This attribute is valid for all functions except \"continuity\" and \"nofunction\". A nil response and an error are generated if the command is received when dmm.func is set to either of these functions.  When this attribute is enabled, the limit Y testing occurs on each measurement taken by the DMM. Limit Y testing compares the measurements to the high and low limit values. If a measurement falls outside these limits, the test fails. The low limit is specified by dmm.limit[Y].low.value and the high limit is specified by dmm.limit[Y].high.value.  When this is enabled, limit testing occurs whether it is requested by the dmm.measure function or as part of a scan sequence. However, if events are not assigned to a trigger stimulus for a digital I/O line, there is no hardware indication of limits. The events that can be assigned to a trigger stimulus include:  dmm.trigger.EVENT_LIMIT1_HIGH  dmm.trigger.EVENT_LIMIT1_LOW  dmm.trigger.EVENT_LIMIT2_HIGH  dmm.trigger.EVENT_LIMIT2_LOW  To see the test results, use the dmm.limit[Y].low.fail and dmm.limit[Y].high.fail attributes.  When limit testing is disabled, no measurements are tested and the status bits are not updated, the fail indication does not get updated, and hardware lines are not generated.  Example  This example enables limits 1 and 2 for DC volt, measurements. Limit 1 is checking for readings to be between 3 and 5 volts while limit 2 is checking for the readings to be between 1 and 7 volts. The auto clear feature is disabled, so if any reading is outside these limits, the corresponding fail will be 1 afterwards. Therefore, if any one of the fails is 1, analyze the reading buffer data to find out which reading failed the limits.  dmm.func = \"dcvolts\"                 -- set the DMM for DC volts functionality   dmm.reset(\"active\")                  -- reset DC volts to default settings   dmm.range = 10                       -- set the range to 10 volts   dmm.nplc = 0.1                       -- set the nplc to 0.1   dmm.limit[1].autoclear = dmm.OFF     -- disable auto clearing for limit 1   dmm.limit[1].high.value = 5          -- set high limit on 1 to fail if reading<br>                                     -- exceeds 5 volts   dmm.limit[1].low.value = 3           -- set low limit on 1 to fail if reading<br>                                     -- is less than 3 volts   dmm.limit[1].enable = dmm.ON         -- enable limit 1 checking for DC volt<br>                                     -- measurements   dmm.limit[2].autoclear = dmm.OFF     -- disable auto clearing for limit 2   dmm.limit[2].high.value = 7          -- set high limit on 2 to fail if reading<br>                                     -- exceeds 7 volts   dmm.limit[2].low.value = 1           -- set low limit on 2 to fail if reading<br>                                     -- is less than 1 volts   dmm.limit[2].enable = dmm.ON         -- enable limit 2 checking for DC volt<br>                                     -- measurements   dmm.measurecount = 50                -- set the measure count to 50   LimitBuffer = dmm.makebuffer(100)    -- create a reading buffer that can store<br>                                     -- 100 readings   dmm.measure(LimitBuffer)             -- take 50 readings and store them in<br>                                     -- LimitBuffer                                        -- then check if any of the 50 readings<br>                                     -- were outside of the limits   print(\"limit 1 high fail = \" .. dmm.limit[1].high.fail)   print(\"limit 1 low fail = \" .. dmm.limit[1].low.fail)   print(\"limit 2 high fail = \" .. dmm.limit[2].high.fail)   print(\"limit 2 low fail = \" .. dmm.limit[2].low.fail)   dmm.limit[1].clear()                 -- clear limit 1 conditions  dmm.limit[2].clear()                 -- clear limit 2 conditions  Sample output that shows all readings are within limit values (all readings between 3 and 5 volts):  limit 1 high fail = 0  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 high values (a 6 volt reading would cause this condition or a reading greater than 5 but less than 7.):  limit 1 high fail = 1  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 and 2 low values (a 0.5 volts reading would cause this condition or a reading less than 1):  limit 1 high fail = 0  limit 1 low fail = 1  limit 2 high fail = 0  limit 2 low fail = 1  Also see  Reading buffers  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.limit[Y].high.fail  dmm.limit[Y].high.value  dmm.limit[Y].low.fail  dmm.limit[Y].low.value  dmm.measure()  "},{"id":179,"title":"dmm.limit[Y].high.fail","url":"16037.htm","text":"This attribute queries for the high test results of limit Y.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0  Usage  value = dmm.limit[Y].high.fail  value  The high fail indication for limit Y:  0: Test passed &#8211; measurement within the high limit  1: Test failed &#8211; measurement has exceeded high limit  Y  Limit number: 1 or 2  Details  This attribute is valid for all functions except \"continuity\" and \"nofunction\". A nil response and an error are generated if the command is received when dmm.func is set to either of these functions.  This attribute returns the results of high limit Y testing. If this is 1 (failed), the measurement was above the high limit (dmm.limit[Y].high.value).  Note that if you are scanning or taking a series of measurements with auto clear (dmm.limit[Y].autoclear) enabled for a limit, the last measurement limit dictates the fail indication for the limit. If autoclear is disabled, you can take a series of readings and read fails to see if any of one of the readings failed.  To use this attribute, you must set the limit to enable.  If autoclear and limit are not set, the high fail value indicates the results of the last limit test that occurred when limits were enabled.  In addition to this attribute, you can see the fail indication by reading the measurement event register of the status model. If the readings are stored in a reading buffer, the values are associated with bufferVar.statuses for the readings.  You can use the digital I/O line trigger stimulus commands to generate a pulse when a limit fails. The events that can be assigned to a trigger stimulus include:  dmm.trigger.EVENT_LIMIT1_HIGH  dmm.trigger.EVENT_LIMIT1_LOW  dmm.trigger.EVENT_LIMIT2_HIGH  dmm.trigger.EVENT_LIMIT2_LOW  Example  This example enables limits 1 and 2 for DC volt, measurements. Limit 1 is checking for readings to be between 3 and 5 volts while limit 2 is checking for the readings to be between 1 and 7 volts. The auto clear feature is disabled, so if any reading is outside these limits, the corresponding fail will be 1 afterwards. Therefore, if any one of the fails is 1, analyze the reading buffer data to find out which reading failed the limits.  dmm.func = \"dcvolts\"                 -- set the DMM for DC volts functionality   dmm.reset(\"active\")                  -- reset DC volts to default settings   dmm.range = 10                       -- set the range to 10 volts   dmm.nplc = 0.1                       -- set the nplc to 0.1   dmm.limit[1].autoclear = dmm.OFF     -- disable auto clearing for limit 1   dmm.limit[1].high.value = 5          -- set high limit on 1 to fail if reading<br>                                     -- exceeds 5 volts   dmm.limit[1].low.value = 3           -- set low limit on 1 to fail if reading<br>                                     -- is less than 3 volts   dmm.limit[1].enable = dmm.ON         -- enable limit 1 checking for DC volt<br>                                     -- measurements   dmm.limit[2].autoclear = dmm.OFF     -- disable auto clearing for limit 2   dmm.limit[2].high.value = 7          -- set high limit on 2 to fail if reading<br>                                     -- exceeds 7 volts   dmm.limit[2].low.value = 1           -- set low limit on 2 to fail if reading<br>                                     -- is less than 1 volts   dmm.limit[2].enable = dmm.ON         -- enable limit 2 checking for DC volt<br>                                     -- measurements   dmm.measurecount = 50                -- set the measure count to 50   LimitBuffer = dmm.makebuffer(100)    -- create a reading buffer that can store<br>                                     -- 100 readings   dmm.measure(LimitBuffer)             -- take 50 readings and store them in<br>                                     -- LimitBuffer                                        -- then check if any of the 50 readings<br>                                     -- were outside of the limits   print(\"limit 1 high fail = \" .. dmm.limit[1].high.fail)   print(\"limit 1 low fail = \" .. dmm.limit[1].low.fail)   print(\"limit 2 high fail = \" .. dmm.limit[2].high.fail)   print(\"limit 2 low fail = \" .. dmm.limit[2].low.fail)   dmm.limit[1].clear()                 -- clear limit 1 conditions  dmm.limit[2].clear()                 -- clear limit 2 conditions  Sample output that shows all readings are within limit values (all readings between 3 and 5 volts):  limit 1 high fail = 0  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 high values (a 6 volt reading would cause this condition or a reading greater than 5 but less than 7.):  limit 1 high fail = 1  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 and 2 low values (a 0.5 volts reading would cause this condition or a reading less than 1):  limit 1 high fail = 0  limit 1 low fail = 1  limit 2 high fail = 0  limit 2 low fail = 1  Also see  Reading buffers  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.limit[Y].autoclear  "},{"id":180,"title":"dmm.limit[Y].high.value","url":"16038.htm","text":"This attribute specifies the upper limit for a limit test.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  limit 1: 1.000000E+00<br>limit 2: 2.000000E+00  Usage  value = dmm.limit[Y].high.value  dmm.limit[Y].high.value = value  value  The high value for limit Y; range is -4294967295 to +4294967295  Y  Limit number: 1 or 2  Details  This attribute is valid for all functions except \"continuity\" and \"nofunction\". A nil response and an error are generated if the command is received when dmm.func is set to either of these functions.  This attribute specifies or queries the high limit value of limit Y. When limit Y testing is enabled (dmm.limit[Y].enable = 1), a fail indication occurs when the measurement value is greater than this value.  You may set or get the value regardless if the limit is set to a digio trigger stimulus:  dmm.trigger.EVENT_LIMIT1_HIGH  dmm.trigger.EVENT_LIMIT1_LOW  dmm.trigger.EVENT_LIMIT2_HIGH  dmm.trigger.EVENT_LIMIT2_LOW  Example  This example enables limits 1 and 2 for DC volt, measurements. Limit 1 is checking for readings to be between 3 and 5 volts while limit 2 is checking for the readings to be between 1 and 7 volts. The auto clear feature is disabled, so if any reading is outside these limits, the corresponding fail will be 1 afterwards. Therefore, if any one of the fails is 1, analyze the reading buffer data to find out which reading failed the limits.  dmm.func = \"dcvolts\"                 -- set the DMM for DC volts functionality   dmm.reset(\"active\")                  -- reset DC volts to default settings   dmm.range = 10                       -- set the range to 10 volts   dmm.nplc = 0.1                       -- set the nplc to 0.1   dmm.limit[1].autoclear = dmm.OFF     -- disable auto clearing for limit 1   dmm.limit[1].high.value = 5          -- set high limit on 1 to fail if reading<br>                                     -- exceeds 5 volts   dmm.limit[1].low.value = 3           -- set low limit on 1 to fail if reading<br>                                     -- is less than 3 volts   dmm.limit[1].enable = dmm.ON         -- enable limit 1 checking for DC volt<br>                                     -- measurements   dmm.limit[2].autoclear = dmm.OFF     -- disable auto clearing for limit 2   dmm.limit[2].high.value = 7          -- set high limit on 2 to fail if reading<br>                                     -- exceeds 7 volts   dmm.limit[2].low.value = 1           -- set low limit on 2 to fail if reading<br>                                     -- is less than 1 volts   dmm.limit[2].enable = dmm.ON         -- enable limit 2 checking for DC volt<br>                                     -- measurements   dmm.measurecount = 50                -- set the measure count to 50   LimitBuffer = dmm.makebuffer(100)    -- create a reading buffer that can store<br>                                     -- 100 readings   dmm.measure(LimitBuffer)             -- take 50 readings and store them in<br>                                     -- LimitBuffer then check if any                                        -- of the 50 readings were<br>                                     -- outside of the limits   print(\"limit 1 high fail = \" .. dmm.limit[1].high.fail)   print(\"limit 1 low fail = \" .. dmm.limit[1].low.fail)   print(\"limit 2 high fail = \" .. dmm.limit[2].high.fail)   print(\"limit 2 low fail = \" .. dmm.limit[2].low.fail)   dmm.limit[1].clear()                 -- clear limit 1 conditions  dmm.limit[2].clear()                 -- clear limit 2 conditions  Sample output that shows all readings are within limit values (all readings between 3 and 5 volts):  limit 1 high fail = 0  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 high values (a 6 volt reading would cause this condition or a reading greater than 5 but less than 7.):  limit 1 high fail = 1  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 and 2 low values (a 0.5 volts reading would cause this condition or a reading less than 1):  limit 1 high fail = 0  limit 1 low fail = 1  limit 2 high fail = 0  limit 2 low fail = 1  Also see  Reading buffers  digio.trigger[N].stimulus  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.limit[Y].enable  dmm.limit[Y].high.fail  dmm.limit[Y].low.value  "},{"id":181,"title":"dmm.limit[Y].low.fail","url":"16039.htm","text":"This attribute queries for the low test results of limit Y.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0  Usage  value = dmm.limit[Y].low.fail  value  The low fail indication of limit Y:  Test passed: 0 (measurement above the low limit)  Test failed: 1 (measurement below the low limit)  Y  1 or 2 for limit number  Details  This attribute is valid for all functions except \"continuity\" and \"nofunction\". A nil response and an error are generated if the command is received when dmm.func is set to either of these functions.  This attribute returns the results of low limit Y testing. If this is 1 (failed) is returned, the measurement was below the low limit.  Note that if you are scanning or taking a series of measurements with auto clear (dmm.limit[Y].autoclear) enabled for a limit, the last measurement limit dictates the fail indication for the limit. If autoclear is disabled, you can take a series of readings and read fails to see if any of one of the readings failed.  To use this attribute, you must set the limit to enable.  If autoclear and limit are not set, the low fail value indicates the results of the last limit test that occurred when limits were enabled.  In addition to this attribute, you can see the fail indication by reading the measurement event register of the status model. If the readings are stored in a reading buffer, the values are associated with bufferVar.statuses for the readings.  Example  This example enables limits 1 and 2 for DC volt measurements. Limit 1 is checking for readings to be between 3 and 5 volts. Limit 2 is checking for the readings to be between 1 and 7 volts. The auto clear feature is disabled, so if any reading is outside these limits, the corresponding fail will be 1 afterwards. Therefore, if any one of the fails is 1, analyze the reading buffer data to find out which reading failed the limits.  dmm.func = \"dcvolts\"                 -- set the DMM for DC volts functionality  dmm.reset(\"active\")                  -- reset DC volts to default settings  dmm.range = 10                       -- set the range to 10 volts  dmm.nplc = 0.1                       -- set the nplc to 0.1  dmm.limit[1].autoclear = dmm.OFF     -- disable auto clearing for limit 1  dmm.limit[1].high.value = 5          -- set high limit on 1 to fail if reading                                       -- exceeds 5 volts  dmm.limit[1].low.value = 3           -- set low limit on 1 to fail if reading                                       -- is less than 3 volts  dmm.limit[1].enable = dmm.ON         -- enable limit 1 checking for DC volt                                       -- measurements  dmm.limit[2].autoclear = dmm.OFF     -- disable auto clearing for limit 2  dmm.limit[2].high.value = 7          -- set high limit on 2 to fail if reading                                       -- exceeds 7 volts  dmm.limit[2].low.value = 1           -- set low limit on 2 to fail if reading                                       -- is less than 1 volts  dmm.limit[2].enable = dmm.ON         -- enable limit 2 checking for DC volt                                       -- measurements  dmm.measurecount = 50                -- set the measure count to 50  LimitBuffer = dmm.makebuffer(100)    -- create a reading buffer that can store                                       -- 100 readings  dmm.measure(LimitBuffer)             -- take 50 readings and store them in                                       -- LimitBuffer                                       -- then check if any of the 50 readings                                       -- were outside of the limits  print(\"limit 1 high fail = \" .. dmm.limit[1].high.fail)  print(\"limit 1 low fail = \" .. dmm.limit[1].low.fail)  print(\"limit 2 high fail = \" .. dmm.limit[2].high.fail)  print(\"limit 2 low fail = \" .. dmm.limit[2].low.fail)  dmm.limit[1].clear()                 -- clear limit 1 conditions  dmm.limit[2].clear()                 -- clear limit 2 conditions  Sample output that shows all readings are within limit values (all readings between 3 and 5 volts):  limit 1 high fail = 0  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 high values (a 6 volt reading would cause this condition or a reading greater than 5 but less than 7.):  limit 1 high fail = 1  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 and 2 low values (a 0.5 volts reading would cause this condition or a reading less than 1):  limit 1 high fail = 0  limit 1 low fail = 1  limit 2 high fail = 0  limit 2 low fail = 1  Also see  Reading buffers  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.limit[Y].autoclear  "},{"id":182,"title":"dmm.limit[Y].low.value","url":"16040.htm","text":"This attribute specifies the lower limit for a limit test.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  limit 1: -1.000000E+00<br>limit 2: -2.000000E+00  Usage  value = dmm.limit[Y].low.value  dmm.limit[Y].low.value = value  value  The low limit value of limit Y; the valid range is -4294967295 to +4294967295  Y  Limit number 1 or 2  Details  This attribute is valid for all functions except \"continuity\" and \"nofunction\". A nil response and an error are generated if the command is received when dmm.func is set to either of these functions.  This command sets the lower limit for the limit Y test for the selected measure function. When limit Y testing is enabled, this causes a fail indication to occur when the measurement value is less than this value.  You may set or get the value regardless if the limit is set to a digital I/O trigger stimulus:  dmm.trigger.EVENT_LIMIT1_HIGH  dmm.trigger.EVENT_LIMIT1_LOW  dmm.trigger.EVENT_LIMIT2_HIGH  dmm.trigger.EVENT_LIMIT2_LOW  Example  This example enables limits 1 and 2 for DC volt, measurements. Limit 1 is checking for readings to be between 3 and 5 volts while limit 2 is checking for the readings to be between 1 and 7 volts. The auto clear feature is disabled, so if any reading is outside these limits, the corresponding fail will be 1 afterwards. Therefore, if any one of the fails is 1, analyze the reading buffer data to find out which reading failed the limits.  dmm.func = \"dcvolts\"                 -- set the DMM for DC volts functionality   dmm.reset(\"active\")                  -- reset DC volts to default settings   dmm.range = 10                       -- set the range to 10 volts   dmm.nplc = 0.1                       -- set the nplc to 0.1   dmm.limit[1].autoclear = dmm.OFF     -- disable auto clearing for limit 1   dmm.limit[1].high.value = 5          -- set high limit on 1 to fail if reading<br>                                     -- exceeds 5 volts   dmm.limit[1].low.value = 3           -- set low limit on 1 to fail if reading<br>                                     -- is less than 3 volts   dmm.limit[1].enable = dmm.ON         -- enable limit 1 checking for DC volt<br>                                     -- measurements   dmm.limit[2].autoclear = dmm.OFF     -- disable auto clearing for limit 2   dmm.limit[2].high.value = 7          -- set high limit on 2 to fail if reading<br>                                     -- exceeds 7 volts   dmm.limit[2].low.value = 1           -- set low limit on 2 to fail if reading<br>                                     -- is less than 1 volts   dmm.limit[2].enable = dmm.ON         -- enable limit 2 checking for DC volt<br>                                     -- measurements   dmm.measurecount = 50                -- set the measure count to 50   LimitBuffer = dmm.makebuffer(100)    -- create a reading buffer that can store<br>                                     -- 100 readings   dmm.measure(LimitBuffer)             -- take 50 readings and store them in<br>                                     -- LimitBuffer then check if any                                       -- of the 50 readings were<br>                                     -- outside of the limits   print(\"limit 1 high fail = \" .. dmm.limit[1].high.fail)   print(\"limit 1 low fail = \" .. dmm.limit[1].low.fail)   print(\"limit 2 high fail = \" .. dmm.limit[2].high.fail)   print(\"limit 2 low fail = \" .. dmm.limit[2].low.fail)   dmm.limit[1].clear()                 -- clear limit 1 conditions  dmm.limit[2].clear()                 -- clear limit 2 conditions  Sample output that shows all readings are within limit values (all readings between 3 and 5 volts):  limit 1 high fail = 0  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 high values (a 6 volt reading would cause this condition or a reading greater than 5 but less than 7.):  limit 1 high fail = 1  limit 1 low fail = 0  limit 2 high fail = 0  limit 2 low fail = 0  Sample output showing at least one reading failed limit 1 and 2 low values (a 0.5 volts reading would cause this condition or a reading less than 1):  limit 1 high fail = 0  limit 1 low fail = 1  limit 2 high fail = 0  limit 2 low fail = 1  Also see  Reading buffers  digio.trigger[N].stimulus  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.limit[Y].enable  dmm.limit[Y].high.value  dmm.limit[Y].low.fail  "},{"id":183,"title":"dmm.linesync","url":"16041.htm","text":"This attribute determines if line synchronization is used during the measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF)  Usage  state = dmm.linesync  dmm.linesync = state  state  Enable line sync: dmm.ON or 1  Disable line sync: dmm.OFF or 0  Details  This attribute is only valid when dmm.func is set to \"commonsideohms\", \"continuity\", \"dccurrent\", \"dcvolts\", \"fourwireohms\", \"temperature\", or \"twowireohms\". All other functions generate an error when written and return nil when queried.  When line synchronization is enabled, measurements are initiated at the first positive&#8209;going zero crossing of the power line cycle after the trigger.  The line sync setting is saved with the dmm.func function setting, so if you use another function, then return to a previous function, the line sync you set previously is retained.  Example  dmm.func = \"fourwireohms\"  dmm.linesync = dmm.ON  Enables line sync for the \"fourwireohms\" function.  Also see  Line cycle synchronization  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":184,"title":"dmm.makebuffer()","url":"16048.htm","text":"This function creates a user buffer for storing readings. Reading buffers are allocated dynamically.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Reset<br>Recall setup  Create configuration script<br>Save setup  None  Usage  bufferVar = dmm.makebuffer(bufferSize)  bufferVar  The variable name for the buffer being created  bufferSize  Maximum number of readings that the buffer can store  Details  To be able to store readings, a reading buffer needs to be created. Once created, the reading buffer can be used to store readings from dmm.measure() command and from scanning (scan.execute() or scan.background())  To delete a buffer, set bufferVar to nil.  Once a buffer is created, the attributes that can be accessed are:  bufferVar.appendmode = 1 (ON) or 0 (OFF); default is zero (0) over a bus interface, and 1 for buffers created on the front panel.  bufferVar.basetimeseconds returns the seconds for reading buffer entry 1 (read-only attribute).  bufferVar.basetimefractional returns the seconds and fractional seconds for reading buffer entry 1 (read-only attribute).  bufferVar.capacity returns the overall buffer size.  bufferVar.collecttimestamps = 1 (ON) or 0 (OFF); default is 1.  bufferVar.collectchannels = 1 (ON) or 0 (OFF); default is 1.  bufferVar.n returns the number of readings currently stored in the buffer.  bufferVar.timestampresolution returns the resolution of the timestamping (read-only attribute).  The following buffer bits indicate buffer statuses:  dmm.buffer.LIMIT1_LOW_BIT or 1  dmm.buffer.LIMIT1_HIGH_BIT or 2  dmm.buffer.LIMIT2_LOW_BIT or 4  dmm.buffer.LIMIT2_HIGH_BIT or 8  dmm.buffer.MEAS_OVERFLOW_BIT or 64  dmm.buffer.MEAS_CONNECT_QUESTION_BIT or 128  To see readings in buffer:  printbuffer(x, y, bufferVar)   Where x and y represent the reading numbers to be returned.  To see readings, channels, and units:  printbuffer(x, y, bufferVar, bufferVar.channels, bufferVar.units)  Where x and y represent reading numbers to be returned.  To see timestamps that are in buffer:  bufferVar.collecttimestamps = 1  print(x, y, bufferVar, bufferVar.timestamps)  Where x and y represent readings and timestamps for elements x to y.  To see seconds, fractional seconds, and relative timestamps:  bufferVar.collecttimestamps = 1  printbuffer(x,y, bufferVar.seconds)  printbuffer(x,y, bufferVar.fractionalseconds)  printbuffer(x,y, bufferVar.relativetimestamps)  @Once you create a reading buffer, using that buffer name for another buffer or variable causes access to the original data to be lost.  Example 1  bufferVar = dmm.makebuffer(300)  Creates a user reading buffer named bufferVar with a capacity of 300.  Example 2  dmm.measurecount = 10   dmm.measure(bufferVar2)  printbuffer(1, bufferVar2.n, bufferVar2)  bufferVar2 = nil  Take ten measurements on the active function and store them in the reading buffer bufferVar2.  View those ten readings.  Delete bufferVar2.  Sample output (actual output depends on how the active function is configured and what you are measuring):  1.134154698e+01, 1.132708486e+01, 1.134213865e+01, 1.134037749e+01, 1.132735758e+01, 1.134099844e+01, 1.133705087e+01, 1.132571507e+01, 1.134000616e+01, 1.133721111e+01  Also see  Reading buffers  dmm.measure()   printbuffer()  scan.background()  scan.execute()  "},{"id":185,"title":"dmm.math.enable","url":"16042.htm","text":"This attribute enables or disables math operations on measurements for the selected measurement function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF)  Usage  value = dmm.math.enable  dmm.math.enable = value  value  The math enable setting:  Disable: dmm.OFF or 0  Enable: dmm.ON or 1  Details  This attribute is not available for \"nofunction\". If you write this attribute for \"nofunction\", an error message is generated.  When this command is set to on, the math operation specified by the math format command is performed before completing a measurement.  Example  dmm.func = \"dcvolts\"  dmm.reset(\"active\")  dmm.measurecount = 5  MathBuffer = dmm.makebuffer(100)  MathBuffer.appendmode = 1  dmm.measure(MathBuffer)  dmm.math.format = dmm.MATH_MXB  dmm.math.mxb.mfactor = 1e6  dmm.math.mxb.bfactor = 0  dmm.math.mxb.units = \"[\"  dmm.math.enable = dmm.ON  Configure the DMM for DC volts.  Reset DC volts to the default settings.  Set the measure count to 5.  Create a reading buffer named MathBuffer that can store 100 readings.  Set the buffer to append readings.  Take 5 readings and store them in MathBuffer with no math operation.  Enable math operations for mx+b operation, with m set to 1e6 and b set to 0, with units set to micro.  dmm.measure(MathBuffer)  printbuffer(1, 5, MathBuffer)  printbuffer(6, MathBuffer.n, MathBuffer)  dmm.measurecount = 1  for x = 1, 3 do       print(dmm.measure())  end  Store the 5 additional readings in MathBuffer with math operations enabled.  View the readings with and without math operation.  Take 3 additional math readings without using the buffer.  Sample output assuming no load was connected to DMM:   Readings with no math operation:  3.898423119e-07, 4.066727213e-07,    5.122452892e-07,<br>   4.724643216e-07,<br>   4.770544332e-07  Readings with math operation:  5.061251403e-01, 4.158529446e-01,    5.504962196e-01,<br>   3.821921259e-01,<br>   6.132277455e-01  5.367258847e-01  6.040475222e-01  6.132277455e-01  Also see  Math calculations  dmm.configure.recall()  dmm.configure.set()  dmm.math.format  "},{"id":186,"title":"dmm.math.format","url":"16043.htm","text":"This attribute specifies which math operation is performed on measurements when math operations are enabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  2 (dmm.MATH_PERCENT)  Usage  state = dmm.math.format  dmm.math.format = state  state  Math operation to be performed on measurements:  dmm.MATH_NONE or 0  dmm.MATH_MXB or 1  dmm.MATH_PERCENT or 2  dmm.MATH_RECIPROCAL or 3  Details  This is not available for \"nofunction\". If this command is queried when \"nofunction\" is selected, nil is returned. If it is written when \"nofunction\" is selected, an error is returned.  If you set this attribute to dmm.MATH_NONE, math operation is disabled, even if math operation (dmm.math.enable) is enabled.  Use a setting of dmm.MATH_MXB to have  where:  Y is the result  X is the normal measurement  m is the user-entered constant for scale factor (dmm.math.mxb.mfactor)  b is the user-entered constant for offset (dmm.math.mxb.bfactor)  If you are using relative offset measurement control (dmm.rel.enable), the relative offset reading is used for X.  Use a setting of dmm.MATH_PERCENT to have:  where:  Percent is the result  Input is the normal measurement (if using dmm.rel.enable, it will be the relative offset value)  Reference is user entered constant (dmm.math.percent)  Use a setting of dmm.MATH_RECIPROCAL for 1/X operation, where X is normal or the measurement value with relative offset applied.  The math operation is performed before any of the enabled limit testing.  Example  dmm.math.format = dmm.MATH_RECIPROCAL  dmm.math.enable = dmm.ON  Enables the reciprocal operation on measurements.  Also see  Math calculations  dmm.configure.recall()  dmm.configure.set()  dmm.math.enable  dmm.math.percent  dmm.math.mxb.bfactor  dmm.math.mxb.mfactor  dmm.rel.enable  "},{"id":187,"title":"dmm.math.mxb.bfactor","url":"16044.htm","text":"This attribute specifies the offset, b, for the y = mx + b operation.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0.000000e+00  Usage  offset = dmm.math.mxb.bfactor  dmm.math.mxb.bfactor = offset  offset  The valid range is -4294967295 to +4294967295  Details  This is not available for \"nofunction\". If command is queried when \"nofunction\" is selected, nil is returned. If it is written when \"nofunction\" is selected, an error is returned.  This attribute specifies the offset (b) for an mx + b operation.  The mx + b math operation lets you manipulate normal display readings (x) mathematically based on the calculation:  y = mx + b  Where:  y is the displayed result  m is a user-defined constant for the scale factor  x is the measurement reading (if you are using a relative offset, this is the measurement with relative offset applied)  b is the user-defined constant for the offset factor.  Example  dmm.math.mxb.bfactor = 50  Sets the offset for mx +b operation to 50.  Also see  Math calculations  dmm.configure.recall()  dmm.configure.set()  dmm.math.format  dmm.math.mxb.mfactor  "},{"id":188,"title":"dmm.math.mxb.mfactor","url":"16045.htm","text":"This attribute specifies the scale factor, m, for the y = mx + b math operation.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.000000E+00  Usage  scaleFactor = dmm.math.mxb.mfactor  dmm.math.mxb.mfactor = scaleFactor  scaleFactor  The scale factor; valid range is -4294967295 to +4294967295  Details  This is not available for \"nofunction\". If command is queried when \"nofunction\" is selected, nil is returned. If it is written when \"nofunction\" is selected, an error is returned.  This command sets the scale factor (m) for an mx + b operation for the selected measurement function.  The mx + b math operation lets you manipulate normal display readings (x) mathematically according to the following calculation:  y = mx + b  Where:   y is the displayed result  m is a user-defined constant for the scale factor  x is the measurement reading (if you are using a relative offset, this is the measurement with relative offset applied)  b is the user-defined constant for the offset factor  Example  dmm.math.mxb.mfactor = 0.80  Sets the scale factor for the mx +b operation to 0.80.  Also see  Math calculations  dmm.configure.recall()  dmm.configure.set()  dmm.math.format  dmm.math.mxb.bfactor  "},{"id":189,"title":"dmm.math.mxb.units","url":"16046.htm","text":"This attribute specifies the unit character for the y = mX + b operation.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  X  Usage  value = dmm.math.mxb.units  dmm.math.mxb.units = value  value  The unit character for the y = mx + b operation. Valid values are:  A to Z  [ (left bracket) for the micro (µ) symbol  ] (right bracket) for the ohm (Ω) symbol  \\\\ (two backslashes) for the degree (°) symbol  Details  This attribute is not available for the \"nofunction\" selection. If the command is queried when \"nofunction\" is selected, nil is returned. If it is written when \"nofunction\" is selected, an error is returned.  This attribute represents the unit character to use when the math format is set for mx + b (dmm.math.format = dmm.MATH_MXB).  Example  dmm.math.mxb.units = \"Q\"  Sets the units for the mX +b operation to \"Q\".  Also see  Math calculations  dmm.configure.recall()  dmm.configure.set()  dmm.math.format  "},{"id":190,"title":"dmm.math.percent","url":"16047.htm","text":"This attribute specifies the reference constant that is used when math operations are set to percent.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.000000E+00  Usage  value = dmm.math.percent  dmm.math.percent = value  value  The constant for the percent operation; the range is -4294967295 to +4294967295  Details  This is not available for \"nofunction\". If command is queried when \"nofunction\" is selected, nil is returned. If it is written when \"nofunction\" is selected, an error is returned.  This attribute represents the constant to use for percent when dmm.math.format = dmm.MATH_PERCENT.  Example 1  dmm.math.percent = 1250  Set constant for percent operation to 1250.  dmm.math.percent = dmm.measure()  Acquire the percent constant.  Example 2  dmm.func = \"dcvolts\"  dmm.reset(\"active\")  dmm.math.format = dmm.MATH_PERCENT  dmm.measurecount = 1  dmm.math.percent = dmm.measure()  dmm.math.enable = dmm.ON    dmm.measurecount = 5  MathBuffer = dmm.makebuffer(100)  dmm.measure(MathBuffer)  printbuffer(1, MathBuffer.n, MathBuffer)   dmm.measurecount = 1  for x = 1, 3 do       print(dmm.measure())  end  Configure the DMM for dc voltage measurement and reset the dc voltage function to the default settings.  Set math format to percent.   Acquire 1 reading to use as the relative percent value.  Take 5 readings with percent math enabled and store them in a buffer called MathBuffer that can store 100 readings.  Take three additional readings without using the reading buffer.  Sample output assuming no load was connected to DMM:  2.717115286e+01, 1.259150986e+01, 1.259150986e+01, 9.277954635e+00, 3.313555227e+01  1.292338066e+01  2.452080209e+01  1.557421984e+01  Also see  Math calculations  dmm.configure.recall()  dmm.configure.set()  dmm.math.format  "},{"id":191,"title":"dmm.measure()","url":"16049.htm","text":"This function returns the last reading of the measurement process without using the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  reading = dmm.measure()  reading = dmm.measure(bufferVar)  reading  The last reading of the measurement process  bufferVar  A previously created reading buffer where all readings are stored  Details  This is not available for \"nofunction\". If the command is queried when \"nofunction\" is selected, nil is returned. If it is written when \"nofunction\" is selected, an error is returned.  When you use a reading buffer with a command or action that makes multiple readings, all readings are available in the reading buffer. However, only the last reading is returned as a reading with the command.  If you define a specific reading buffer, the reading buffer must exist before you make the measurement.  You can also use a reading buffer to store additional information that is acquired while making a measurement.  The dmm.measurecount attribute determines how many measurements are performed. When you use a buffer, it also determines if the reading buffer has enough room to store the requested readings. The amount of room is based on readings already stored in the buffer (bufferVar.n), the capacity of the buffer (bufferVar.capacity), and the append mode of the reading buffer (bufferVar.appendmode). If the append mode is set to 0, any stored readings in the buffer are cleared before new ones are stored. If append mode is set to 1, any stored readings remain in the buffer and new ones are added to the buffer after the stored ones.  Example  DCVBuffer = dmm.makebuffer(100)  dmm.func = \"dcvolts\"  dmm.measurecount = 100  dmm.measure(DCVBuffer)  Performs 100 DC voltage measurements and stores them in a buffer called DCVBuffer.  Also see  Reading buffers  bufferVar.appendmode  bufferVar.capacity  bufferVar.n  dmm.makebuffer()  dmm.measurecount  dmm.measurewithtime()  "},{"id":192,"title":"dmm.measurecount","url":"16050.htm","text":"This attribute sets the number of measurements to take when a measurement is requested by a DMM measure command.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1  Usage  count = dmm.measurecount  dmm.measurecount = count  count  The number of measurements to take when a DMM measure function is used (maximum 450,000)  Details  This attribute controls the number of measurements taken any time a measurement is requested (through dmm.measure, dmm.measurewithtime, or the front panel MEASURE menu option). When using a reading buffer with a measure command, the count also controls the number of readings to be stored.  It has no effect on the trigger model, and the trigger model does not affect this setting.  This setting is applied to all functions (the setting is not related to a specific function).  Example  DMMbuffer = dmm.makebuffer(500)  dmm.measure(bufferVar)  dmm.measurecount = 50  Create a reading buffer called DMMbuffer that can store 500 readings.  Store 50 readings in DMMbuffer.  Set the measure count of the DMM to&nbsp;50.  Also see  Reading buffers  dmm.autodelay  dmm.makebuffer()  dmm.measure()  dmm.measurewithtime()  "},{"id":193,"title":"dmm.measurewithtime()","url":"16051.htm","text":"This function returns the last actual measurement and time information in UTC format without using the trigger model. You can also use a reading buffer to store additional information that is acquired while making a measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  reading, seconds, fractional = dmm.measurewithtime()  reading, seconds, fractional = dmm.measurewithtime(bufferVar)  reading  The last reading of the measurement process  seconds  Seconds in UTC format  fractional  Fractional seconds  bufferVar  A previously created reading buffer variable in which all readings are stored  Details  This is not available for \"nofunction\". If the command is queried when \"nofunction\" is selected, nil is returned. If it is written when \"nofunction\" is selected, an error is returned.  When a reading buffer is used with a command or action that involves taking multiple readings, such as dmm.measure or scanning, all readings are available in the reading buffer. However, only the last reading and time information (seconds and fractional seconds) is returned as a reading with the command.  You can also use a reading buffer to store additional information that is acquired while making a measurement.  The dmm.measurecount attribute determines how many measurements are performed. When you use a buffer, it also determines if the reading buffer has enough room to store the requested readings. The amount of room is based on readings already stored in the buffer (bufferVar.n), the capacity of the buffer (bufferVar.capacity), and the append mode of the reading buffer (bufferVar.appendmode). If the append mode is set to 0, any stored readings in the buffer are cleared before new ones are stored. If append mode is set to 1, any stored readings remain in the buffer and new ones are added to the buffer after the stored ones.  Example  DCVbuffer = dmm.makebuffer(100)  dmm.func = \"dcvolts\"  dmm.measurecount = 100  reading, seconds, fractional = dmm.measurewithtime(DCVbuffer)  print(reading, seconds, fractional)  Create a reading buffer.  Perform 100 DC voltage measurements.  Store the measurements in a buffer called DCVbuffer.  Print the last measurement and time information in UTC format, which will look similar to:  -1.064005867e-02   1.779155900e+07&nbsp;&nbsp;&nbsp;1.245658350e-01  Also see  Reading buffers  dmm.makebuffer()  dmm.measure()  dmm.measurecount  "},{"id":194,"title":"dmm.measurewithptp()","url":"20200.htm","text":"This function returns the last actual measurement and time information in PTP format without using the trigger model. You can also use a reading buffer to store additional information that is acquired while making a measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  reading, seconds, fractional = dmm.measurewithptp()  reading, seconds, fractional = dmm.measurewithptp(bufferVar)  reading  The last reading of the measurement process  seconds  Seconds in PTP format  fractional  Fractional seconds  bufferVar  A previously created reading buffer variable in which all readings are stored  Details  This is not available for \"nofunction\". If the command is queried when \"nofunction\" is selected, nil is returned. If it is written when \"nofunction\" is selected, an error is returned.  When a reading buffer is used with a command or action that involves taking multiple readings, such as dmm.measure or scanning, all readings are available in the reading buffer. However, only the last reading and time information (seconds and fractional seconds) is returned as a reading with the command.  You can also use a reading buffer to store additional information that is acquired while making a measurement.  The dmm.measurecount attribute determines how many measurements are performed. When you use a buffer, it also determines if the reading buffer has enough room to store the requested readings. The amount of room is based on readings already stored in the buffer (bufferVar.n), the capacity of the buffer (bufferVar.capacity), and the append mode of the reading buffer (bufferVar.appendmode). If the append mode is set to 0, any stored readings in the buffer are cleared before new ones are stored. If append mode is set to 1, any stored readings remain in the buffer and new ones are added to the buffer after the stored ones.  Example  DCVbuffer = dmm.makebuffer(100)  dmm.func = \"dcvolts\"  dmm.measurecount = 100  reading, seconds, fractional = dmm.measurewithptp(DCVbuffer)  print(reading, seconds, fractional)  Create a reading buffer.  Perform 100 DC voltage measurements.  Store the measurements in a buffer called DCVbuffer.  Print the last measurement and time information in PTP format, which will look similar to:  -1.064005867e-02   1.779155900e+07&nbsp;&nbsp;&nbsp;1.245658350e-01  Also see  Reading buffers  dmm.makebuffer()  dmm.measure()  dmm.measurecount  "},{"id":195,"title":"dmm.nplc","url":"16052.htm","text":"This attribute sets the integration rate in line cycles for the DMM for the function selected by dmm.func.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.000000E+000  Usage  value = dmm.nplc  dmm.nplc = value  value  The integration rate in line cycles:  60 Hz: 0.0005 to 15  50 Hz: 0.0005 to 12  Details  This attribute is not applicable for \"frequency\", \"period\", and \"nofunction\". If you query this attribute for one of these functions, nil is returned. Note that \"continuity\" is fixed at 6.000000E-003 and cannot be changed.  The setting for NPLC may be adjusted based on what the DMM supports. Therefore, after setting the NPLC, query the value to see if it was adjusted.  @For dmm.nplc settings that are less than 0.2, sending dmm.AUTOZERO_ONCE results in significant delays. For example, the delay time at an NPLC of 0.0005 is 2.75&nbsp;s. The delay time at 0.199 is 5.45&nbsp;s.  An error is generated if the command is used when dmm.func is set to \"frequency\", \"period\", \"continuity\", or \"nofunction\".  The NPLC setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the NPLC setting you set previously is retained.  Example  dmm.func = \"twowireohms\"  dmm.nplc = 0.5  dmm.func = \"dcvolts\"  dmm.nplc = 0.1  Set the NPLC for 2-wire ohms to 0.5, then set the NPLC for DC volts to 0.1.  Also see  dmm.aperture  dmm.autozero  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":196,"title":"dmm.offsetcompensation","url":"16053.htm","text":"This attribute specifies the offset compensation setting for the DMM for the function selected by dmm.func.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF) for \"commonsideohms\" and \"fourwireohms\"  1 (dmm.ON) for \"temperature\"  Usage  state = dmm.offsetcompensation  dmm.offsetcompensation = state  state  The offset compensation setting:  Enable: dmm.ON or 1  Disable: dmm.OFF or 0  Details  The command applies when dmm.func is set to \"fourwireohms\", \"commonsideohms\" or \"temperature\".  When dmm.func = \"temperature\", this attribute applies only when the transducer type is 3- or 4-wire RTD. Set this command as you would for 4-wire ohm measurements.  This command is automatically set to dmm.ON when dmm.drycircuit is set to dmm.ON and dmm.func = \"fourwireohms\" or \"commonsideohms\".  The offset compensation setting is saved with the dmm.func function setting, so if you use another function, then return to  \"fourwireohms\", \"commonsideohms\" or \"temperature\", the offset compensation setting you set previously is retained.  If you query this attribute and the function is not \"fourwireohms\", \"commonsideohms\", or \"temperature\", nil is returned.  Example 1  dmm.func = \"fourwireohms\"  dmm.offsetcompensation = dmm.ON  Enable offset compensation for 4-wire ohms.  Example 2  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THREERTD  dmm.offsetcompensation = dmm.OFF  Disable offset compensation for 3-wire RTD temperature measurements.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":197,"title":"dmm.open()","url":"16054.htm","text":"Opens the specified channel or channel pattern.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.open(\"channelList\")  channelList  A string that lists the channel or channel pattern to open  Details  This command allows you to separate the opening and closing of channels and analog backplane relays when measuring. You can execute any number of commands between the open and close commands to meet your application needs.  The configuration (dmm.getconfig()) associated with the specified channel dictates whether a paired channel is open or not. For channel patterns, the channels associated with it are opened. A channel pattern includes a paired channel for multi-wire measurement if a channel is configured that way when the pattern is created (see commands channel.setpole() and channel.pattern.setimage()).  The configuration (dmm.getconfig()) dictates whether analog backplane relays 1 and 2 are opened and if a paired channel is opened. The dmm.open() function does not use the analog backplane relays specified by the channel.setbackplane() function or pole settings set by the channel.setpole() function.  An error is generated and the channels do not open if:  An empty parameter string is specified.  The specified channel or channel pattern is invalid.  A channel number does not exist for installed card in slot specified.  A slot is empty.  The channel pattern does not exist.  The channel does not support being closed (for example, a digital I/O channel).  The channel is paired with another bank for a multi-wire application.  The channel configuration is \"nofunction\".  More than one channel or channel pattern is specified in the parameter.  Example 1  reset()                                                           channel.setpole(\"slot2\" , 4)    channel.pattern.setimage(\"2005, 2911, 2922\", \"Chan5_4W\")    dmm.setconfig(\"Chan5_4W\", \"fourwireohms\")    dmm.open(\"Chan5_4W\")    print(channel.pattern.getimage(\"Chan5_4W\"))  Assume a Model 3721 is installed in slot 2.  Reset the instrument.  Configure the slot 2 channels for 4-pole operation.  Create a pattern called Chan5_4W.  Assign 4-wire ohms configuration to the Chan5_4W pattern.  Open the channels associated with Chan5_4W and display image of the Chan5_4W.  Output:  2005(2025),2911,2922  Example 2  dmm.setconfig(\"slot3\", \"dcvolts\")   dmm.close(\"3030\")   print(channel.getclose(\"slot3\"))   dmm.open(\"3030\")   print(channel.getclose(\"slot3\"))   dmm.close(\"3031\")   print(channel.getclose(\"slot3\"))   dmm.open(\"3031\")   print(channel.getclose(\"slot3\"))  Assume a 3720 installed in slot 3.  Set the configuration for DC volts.  Close and open the channels.  Output:  3030;3911  nil  3031;3921  nil  Also see  channel.getclose()  channel.pattern.getimage()  channel.pattern.setimage()  channel.setbackplane()  channel.setpole()  dmm.close()  dmm.getconfig()  "},{"id":198,"title":"dmm.opendetector","url":"16055.htm","text":"This attributes determines if the detection of open leads is enabled or disabled.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF) for \"commonsideohms\"  1 (dmm.ON) for \"fourwireohms\" and \"temperature\"  Usage  state = dmm.opendetector  dmm.opendetector = state  state  Disable open lead detector: dmm.OFF or 0  Enable open lead detector: dmm.ON or 1  Details  The command applies when dmm.func is set to \"fourwireohms\", \"commonsideohms\", or \"temperature\".  When dmm.func is set to temperature, the open detector setting is only used when the transducer type is thermocouple. For all other transducer types, it is set, but not used until the transducer type is set to thermocouple.  The open detector setting is saved with the dmm.func function setting, so if you use another function, then return to \"fourwireohms\", \"commonsideohms\", or \"temperature\", the open detector setting you set previously is retained.  An error is generated if dmm.func is set to any function other than \"fourwireohms\", \"commonsideohms\", or \"temperature\". If you query the setting for any other function, nil is returned.  Example  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THERMOCOUPLE  dmm.opendetector = dmm.ON  Enable the thermocouple open detector.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":199,"title":"dmm.range","url":"16056.htm","text":"Indicates the range of DMM for the selected function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  See Details  Usage  value = dmm.range  dmm.range = value  value  The range for the function selected by dmm.func  Details  Set this value to the expected measurement value and the instrument will select the range appropriate to measure that value. Setting the range with this attribute will automatically disable the autorange setting (dmm.autorange command).  The instrument selects the range to best match the expected measure value for the functions, as shown below.  Ranges and defaults  If dmm.func is…   The range is…  The default is…  \"dcvolts\"  0 to 303  303  \"acvolts\"  0 to 303  10  \"dccurrent\"  0 to 3.1  3.1  \"accurrent\"  0 to 3.1  3.1  \"twowireohms\"  0 to 120e6  1000  \"fourwireohms\"  0 to 120e6  1000  \"commonsideohms\"  0 to 120e6  1000  The range setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the range settings you set previously are retained.  If you query the range when the selected function does not have a range associated with it, nil is returned.  An error is generated if:  The dmm.range is received when dmm.func is \"temperature\", \"frequency\", \"period\", \"continuity\", or \"nofunction\".  If value does not make sense for selected function.  Example  dmm.func = \"dcvolts\"  dmm.range = 5  dmm.func = \"twowireohms\"  dmm.range = 35000  print(dmm.range)  Set the range for DC volts to 10. Select a range on 2-wire&nbsp;ohms suitable for measuring 35000. View the selected range.  Output:  1.000000000e+05  Also see  dmm.autorange  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.reset()  "},{"id":200,"title":"dmm.refjunction","url":"16057.htm","text":"This attribute defines the type of the thermocouple reference junction.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1 (dmm.REF_JUNCTION_INTERNAL) for \"temperature\"  Usage  state = dmm.refjunction  dmm.refjunction = state  state  The reference junction type:  dmm.REF_JUNCTION_SIMULATED or 0  dmm.REF_JUNCTION_INTERNAL or 1  dmm.REF_JUNCTION_EXTERNAL or 2  Details  This attribute is only valid when dmm.func is set to \"temperature\". All other functions generate an error and return nil when queried.  This attribute only applies when the transducer type is set to thermocouple. For all other transducer types, the reference junction may be set, but it is not used until the transducer type is set to thermocouple.  The reference junction setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the reference junction settings you set previously are retained.  Example  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THERMOCOUPLE  dmm.refjunction = dmm.REF_JUNCTION_SIMULATED  Enables the simulated thermocouple reference junction.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.transducer  "},{"id":201,"title":"dmm.rel.acquire()","url":"16058.htm","text":"This function acquires a measurement and stores it as the relative offset value.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  relativeValue = dmm.rel.acquire()  relativeValue  The internal measurement acquired for the relative offset level value  Details  This attribute is not applicable for \"continuity\" and \"nofunction\".  This command triggers the instrument to make a new measurement for the selected function. This measurement is then stored as the new relative offset level.  When you send this command, the instrument does not apply any math, limit test, or filter settings to the measurement, even if they are set. It is a measurement that is made as if these settings are disabled.  If an error event occurs during the measurement, nil is returned and the relative offset level remains at the last valid setting.  You must change to the function for which you want to acquire a value before sending this command.  The instrument must have relative offset enabled to use the acquired relative offset value.  After executing this command, use the dmm.rel.level attribute to see the last relative level value that was acquired or set by the user.   If error occurs during the reading, nil is returned.  An error is generated if:  dmm.func is set to \"continuity\" or \"nofunction\".  The DMM is unable to take the measurement.  When an error occurs, the relative offset level setting maintains the last valid setting.  Example  dmm.func = \"temperature\"  rel_value = dmm.rel.acquire()  Acquires a relative offset level value for temperature.  Also see  dmm.func  dmm.rel.level  "},{"id":202,"title":"dmm.rel.enable","url":"16059.htm","text":"Enables or disables relative measurement control for the function selected by dmm.func.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.OFF)  Usage  value = dmm.rel.enable  dmm.rel.enable = value  value  The setting:  Enable: dmm.ON or 1  Disable: dmm.OFF or 0  Details  This attribute is not available if dmm.func is set to \"continuity\" or \"nofunction\". If you query this attribute when either of these functions is selected, nil is returned.  When relative measurements are enabled, all subsequent measured readings are offset by the relative offset specified by dmm.rel.level. Each returned measured relative reading will be the result of the following calculation:  Relative reading = Actual measured reading &#8211; Relative offset value  If you change functions with dmm.func, the relative enable setting changes to the enable setting for that function.  The relative enable setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the relative enable settings you set previously are retained.  An error is generated if:  dmm.func is set to \"continuity\" or \"nofunction\".  If the value is out of range for the selected function.  Example  dmm.func = \"accurrent\"  dmm.rel.acquire()  dmm.rel.enable = dmm.ON  Enables the relative measurements for AC current and uses the acquire command to set the relative level attribute.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.rel.acquire()  dmm.rel.level  "},{"id":203,"title":"dmm.rel.level","url":"16060.htm","text":"The offset value for relative measurements for the function selected by dmm.func.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0.000000E+000  Usage  value = dmm.rel.level  dmm.rel.level = value  value  The relative offset level setting  Details  This attribute is not available if dmm.func is set to \"continuity\" or \"nofunction\". If you query this attribute when either of these functions is selected, nil is returned.  When relative measurements are enabled (as set by dmm.rel.enable), all subsequent measured readings are offset by the specified relative offset value. Specifically, each returned measured relative reading is the result of the following calculation:  Relative reading = Actual measured reading &#8211; Relative offset value  Changing functions with dmm.func reflects the relative level offset setting for that function.  The relative offset level setting is saved with the dmm.func function setting, so if you use another function, then return to the previous function, the relative offset level settings you set previously are retained.  @To set the relative offset level to include math, limits, and filter operations (if enabled) set dmm.rel.level to dmm.measure(). However, these operations are not used if you use the dmm.rel.acquire() function to set the relative offset level, even if the operations are enabled.  An error is generated:  If dmm.func is set to \"continuity\" or \"nofunction\".  If the value is out of range for the selected function.  Example  dmm.func = \"accurrent\"  dmm.rel.level = dmm.measure()  rel_value = dmm.measure()  dmm.rel.level = rel_value  dmm.func = \"temperature\"  rel_value = dmm.rel.acquire()  Perform an AC current measurement and use it as the relative offset value.  Take a measurement and store it in the variable rel_value.  Use the rel_value to set the relative level attribute.  Acquire a relative offset level value for temperature.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.measure()  dmm.rel.acquire()  dmm.rel.enable  "},{"id":204,"title":"dmm.reset()","url":"16061.htm","text":"Resets the DMM functions and attributes in the instrument, as indicated by the parameter.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.reset(scope)  scope  A string equaling \"active\" to set the active function only to factory default settings or \"all\" to set all functions back to factory default settings  Details  When the scope is set to active, this command resets the DMM attributes for the active function to factory default values. The settings for other functions are unchanged.  When the scope is set to all, this command resets the DMM functions and attributes to factory default settings.  This function does not affect the DMM configurations (dmm.setconfig() and dmm.getconfig()).  The factory default settings are:  The selected DMM function is set to \"dcvolts\".  The DMM settings are set to the defaults for \"dcvolts\".  All attribute settings for other functions are set to factory default settings.  @To reset the entire instrument to factory default settings, use the reset command.  Example  dmm.func = \"temperature\"  dmm.reset(\"active\")  print(dmm.func)  dmm.reset(\"all\")  print(dmm.func)  Set the DMM function to temperature.  Perform a reset on temperature only.  Check the function after resetting only temperature.  Perform a reset on all DMM functions.  Check the function after resetting all DMM functions.  Output:  temperature  dcvolts  Also see  dmm.func  dmm.getconfig()  dmm.setconfig()  reset()  "},{"id":205,"title":"dmm.rtdalpha","url":"16062.htm","text":"This attribute contains the alpha value of a user-defined RTD.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  3.850550E-03  Usage  value = dmm.rtdalpha  dmm.rtdalpha = value  value  The RTD alpha value; the range is 0 to 0.01  Details  This attribute is only valid when dmm.func is set to \"temperature\". All other functions generate an error and return nil when queried.  This setting only applies when the transducer type is set to 3 or 4-wire RTD. For other transducer types, the setting is set but not used until the transducer type is set to an RTD type.  The RTD alpha setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the RTD alpha setting you set previously is retained.  @The following attributes share common settings and apply to both 3 and 4-wire RTDs: dmm.rtdalpha, dmm.rtdbeta, dmm.rtddelta, and dmm.rtdzero. Therefore, when both 3 and 4-wire RTDs are set to USER type for RTD, switching transducers between 3 and 4 will cause both to use the same settings (for example, dmm.rtdalpha, dmm.rtdbeta). If unique settings are needed, they must be changed, or use two different DMM configurations.  An error is generated if the value is out of range.  Example 1  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THREERTD  dmm.rtdalpha = 0.005  dmm.transducer = dmm.TEMP_FOURRTD  dmm.rtdalpha = 0.007  dmm.transducer = dmm.TEMP_THREERTD  print(dmm.rtdalpha)  Set an alpha constant for RTD to 0.005 for 3-wire RTD.  Change to 4-wire RTD and change the alpha constant to 0.007.  Switch back to 3-wire RTD. The value has been updated to 0.007.  Output:  7.000000000e-03  Example 2  dmm.func = \"temperature\"   dmm.transducer = dmm.TEMP_THREERTD   dmm.rtdalpha = 0.005   dmm.configure.set(\"RTD_3wire\")  dmm.transducer = dmm.TEMP_FOURRTD   dmm.rtdalpha = 0.007   dmm.configure.set(\"RTD_4wire\")  dmm.configure.recall(\"RTD_3wire\")  print(dmm.transducer, dmm.rtdalpha)   dmm.configure.recall(\"RTD_4wire\")  print(dmm.transducer, dmm.rtdalpha)  This example sets unique alpha constants for 3-wire and 4-wire RTDs by creating two DMM configurations with the settings.  Output:  3.000000000e+00\t5.000000000e-03  4.000000000e+00\t7.000000000e-03  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.rtdbeta  dmm.rtddelta  dmm.rtdzero  dmm.transducer  "},{"id":206,"title":"dmm.rtdbeta","url":"16063.htm","text":"This attribute contains the beta value of a user-defined RTD.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.086300E-01  Usage  value = dmm.rtdbeta  dmm.rtdbeta = value  value  The RTD beta value: 0 to 1  Details  This attribute is only valid when dmm.func is set to \"temperature\". All other functions generate an error and return nil when queried.  This setting only applies when the transducer type is set to 3 or 4-wire RTD. For other transducer types, the setting is set but not used until the transducer type is set to an RTD type.  The RTD beta setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the RTD beta setting you set previously is retained.  @The following attributes share common settings and apply to both 3 and 4-wire RTDs: dmm.rtdalpha, dmm.rtdbeta, dmm.rtddelta, and dmm.rtdzero. Therefore, when both 3 and 4-wire RTDs are set to USER type for RTD, switching transducers between 3 and 4 will cause both to use the same settings (for example, dmm.rtdalpha, dmm.rtdbeta). If you need unique settings, the settings must be changed, or use two different DMM configurations.  An error is generated if the value is out of range.  Example 1  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THREERTD  dmm.rtdbeta = 0.3  dmm.transducer = dmm.TEMP_FOURRTD  dmm.rtdbeta = 0.5  dmm.transducer = dmm.TEMP_THREERTD  print(dmm.rtdbeta)  Set a beta constant for RTD to 0.3 for 3-wire RTD.  Change to 4-wire RTD.  Change the beta constant to 0.5.  Switch back to 3-wire RTD. The value is 0.5.  Output:  5.000000000e-01  Example 2  dmm.func = \"temperature\"   dmm.transducer = dmm.TEMP_THREERTD   dmm.rtdbeta = 0.3   dmm.configure.set(\"RTD_3wire\")  dmm.transducer = dmm.TEMP_FOURRTD   dmm.rtdbeta = 0.5   dmm.configure.set(\"RTD_4wire\")  dmm.configure.recall(\"RTD_3wire\")  print(dmm.transducer, dmm.rtdbeta)   dmm.configure.recall(\"RTD_4wire\")  print(dmm.transducer, dmm.rtdbeta)  This example sets unique beta constants for 3-wire and 4-wire RTDs by creating two DMM configurations with the settings.  Output:  3.000000000e+00\t3.000000000e-01  4.000000000e+00\t5.000000000e-01  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.rtdalpha  dmm.rtddelta  dmm.rtdzero  "},{"id":207,"title":"dmm.rtddelta","url":"16064.htm","text":"This attribute contains the delta value of a user-defined RTD.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.499900E+00  Usage  value = dmm.rtddelta   dmm.rtddelta = value  value  The user type RTD delta value; valid range is 0 to 5  Details  This attribute is only valid when dmm.func is set to \"temperature\". All other functions generate an error and return nil when queried.  This setting only applies when the transducer type is set to 3 or 4-wire RTD. For other transducer types, the setting is set but not used until the transducer type is set to an RTD type.  The RTD alpha setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the RTD alpha setting you set previously is retained.  @The following attributes share common settings and apply to both 3 and 4-wire RTDs: dmm.rtdalpha, dmm.rtdbeta, dmm.rtddelta, and dmm.rtdzero. Therefore, when both 3 and 4-wire RTDs are set to USER type for RTD, switching transducers between 3 and 4 will cause both to use the same settings (for example, dmm.rtdalpha, dmm.rtdbeta). If unique settings are needed, they must be changed, or use two different DMM configurations.  An error is generated if the value is out of range.  Example 1  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THREERTD  dmm.rtddelta = 3  dmm.transducer = dmm.TEMP_FOURRTD  dmm.rtddelta = 5  dmm.transducer = dmm.TEMP_THREERTD  print(dmm.rtddelta)  Set a delta constant for RTD to 3 for 3-wire RTD.  Change to 4-wire RTD.  Change the delta constant to 5.  Switch back to 3-wire RTD. The value is 5.  Output:  5.000000000e+00  Example 2  dmm.func = \"temperature\"   dmm.transducer = dmm.TEMP_THREERTD   dmm.rtddelta = 3   dmm.configure.set(\"RTD_3wire\")  dmm.transducer = dmm.TEMP_FOURRTD   dmm.rtddelta = 5   dmm.configure.set(\"RTD_4wire\")  dmm.configure.recall(\"RTD_3wire\")  print(dmm.transducer, dmm.rtddelta)   dmm.configure.recall(\"RTD_4wire\")  print(dmm.transducer, dmm.rtddelta)  This example sets unique delta constants for 3-wire and 4-wire RTDs by creating two DMM configurations.  Output:  3.000000000e+00\t3.000000000e+00  4.000000000e+00\t5.000000000e+00  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.rtdalpha  dmm.rtdbeta  dmm.rtdzero  "},{"id":208,"title":"dmm.rtdzero","url":"16065.htm","text":"This attribute contains the zero value of a user-defined RTD.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.000000E+02  Usage  value = dmm.rtdzero  dmm.rtdzero = value  value  The zero value of the RTD: 0 to 10000  Details  This attribute is only valid when dmm.func is set to \"temperature\". All other configurations generate an error and return nil when queried.  This setting only applies when the transducer type is set to 3 or 4-wire RTD. For other transducer types, the setting is set but not used until the transducer type is set to an RTD type.  The RTD zero setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the RTD zero settings you set previously are retained.  @The following attributes share common settings and apply to both 3 and 4-wire RTDs: dmm.rtdalpha, dmm.rtdbeta, dmm.rtddelta, and dmm.rtdzero. Therefore, when both 3 and 4-wire RTDs are set to USER type for RTD, switching transducers between 3 and 4 will cause both to use the same settings (for example, dmm.rtdalpha, dmm.rtdbeta). If unique settings are needed, they must be changed, or use two different DMM configurations.  An error is generated if the value is out of range.  Example 1  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THREERTD  dmm.rtdzero = 300  dmm.transducer = dmm.TEMP_FOURRTD  dmm.rtdzero = 500  dmm.transducer = dmm.TEMP_THREERTD  print(dmm.rtdzero)  Set a zero constant for RTD to 300 for 3-wire RTD.  Change to 4-wire RTD.  Change the zero constant to 500.  Switch back to 3-wire RTD. The value is 500.  Output:  5.000000000e+02  Example 2  dmm.func = \"temperature\"   dmm.transducer = dmm.TEMP_THREERTD   dmm.rtdzero = 300  dmm.configure.set(\"RTD_3wire\")  dmm.transducer = dmm.TEMP_FOURRTD   dmm.rtdzero = 500  dmm.configure.set(\"RTD_4wire\")  dmm.configure.recall(\"RTD_3wire\")  print(dmm.transducer, dmm.rtdzero)   dmm.configure.recall(\"RTD_4wire\")  print(dmm.transducer, dmm.rtdzero)  This example sets unique zero constants for 3-wire and 4-wire RTDs by creating two DMM configurations.  Output:  3.000000000e+00\t3.000000000e+02  4.000000000e+00\t5.000000000e+02  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.rtdalpha  dmm.rtdbeta  dmm.rtddelta  "},{"id":209,"title":"dmm.savebuffer()","url":"16066.htm","text":"Saves data from the specified reading buffer to a USB flash drive using the specified filename.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  dmm.savebuffer(\"bufferVar\", \"fileName\")  dmm.savebuffer(\"bufferVar\", \"fileName\", timeFormat)  bufferVar  A string that specifies the name of the DMM reading buffer that was created by dmm.makebuffer()  fileName  A string that indicates the name of the file on the USB flash drive in which to save the reading buffer  timeFormat  How date and time information from the buffer is saved in the file on the USB flash drive; the values are:  dmm.buffer.SAVE_FORMAT_TIME: The default. When this is selected, dates, times, and fractional seconds are saved  dmm.buffer.SAVE_RELATIVE_TIME: Relative timestamps are saved  dmm.buffer.SAVE_RAW_TIME: Seconds and fractional seconds are saved  dmm.buffer.SAVE_TIMESTAMP_TIME: Timestamps are saved  Details  The file name must specify the full path (including /usb1/). If included, the file extension must be set to .csv. If no file extension is specified, .csv is added.  For options that save more than one item of time information, each item is comma-delimited. For example, the default format is date, time, and fractional seconds for each reading.  You use dmm.makebuffer() to create a buffer.  Examples of valid destination file names:  dmm.savebuffer(\"bufferVar\", \"/usb1/myData\")  dmm.savebuffer(\"bufferVar\", \"/usb1/myData.csv\")  Invalid destination filename examples:  dmm.savebuffer(\"bufferVar\", \"/usb1/myData.\")  &#8212; The period is not followed by the csv extension.  dmm.savebuffer(\"bufferVar\", \"/usb1/myData.txt\")  &#8212; The only allowed extension is .csv. If .csv is not assigned, it is automatically added.  dmm.savebuffer(\"bufferVar\", \"/usb1/myData.txt.csv\")  &#8212; Two periods in the file name (myData_txt.csv would be correct).  An error is generated if:  The reading buffer does not exist or is not a DMM buffer.   The destination filename is not specified correctly.  The file extension is not .csv (or blank).  Example  dmm.savebuffer(\"bufferVar\", \"/usb1/myData.csv\")  Saves readings from a DMM buffer named bufferVar with default time information to a file named myData.csv on the USB flash drive.  dmm.savebuffer(\"bufferVar\", \"/usb1/myDataRel.csv\", dmm.buffer.SAVE_RELATIVE_TIME)  Saves readings from bufferVar with relative timestamps to a file named myDataRel.csv on the USB flash drive.  Also see  dmm.appendbuffer()  dmm.makebuffer()  "},{"id":210,"title":"dmm.setconfig()","url":"16067.htm","text":"Associates a DMM configuration with items specified in parameter channel list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Reset<br>Channel reset<br>Recall setup  Created configuration script<br>Save setup  \"nofunction\"  Usage  dmm.setconfig(\"channelList\", \"dmmConfiguration\")  channelList  A string that lists the channels and channel patterns to change  dmmConfiguration  A string with the name of the DMM configuration that will be assigned to items in channelList  Details  dmmConfiguration can be the name of a configuration that was saved with dmm.configure.set(). If you use a saved configuration, the function of the configuration and the supporting DMM attributes for that function are associated with the channelList parameter items. These supporting DMM attributes may have user-defined or default values associated with them.  dmmConfiguration can also be a DMM configuration name that matches the DMM function name. If you use a default DMM configuration name, be aware that the supporting function attribute settings are the default values and not user-specified (as they may be in a user-defined saved configuration). The DMM function names are:  \"accurrent\"  \"acvolts\"  \"commonsideohms\"  \"continuity\"  \"dccurrent\"  \"dcvolts\"  \"fourwireohms\"  \"frequency\"  \"nofunction\"  \"period\"  \"temperature\"  \"twowireohms\"  To use a channel with the dmm.close() function, dmm.setconfig() cannot be set to \"nofunction\".  The configuration being assigned determines whether analog backplane relay 1 or 2 get used, based on the function associated with the configuration when being assigned to a channel. For channel patterns, the pattern image must include the analog backplane relays and the channels. This command has no effect on the poles setting for a channel (channel.setpole()) or analog backplane relays specified by channel.setbackplane() function.  An error is generated if:  There is more than one DMM configuration specified.  A DMM configuration is specified that does not exist.  The DMM functionality is not supported on a specified channel.  An analog backplane relay is specified.  A specified channel does not exist for the card installed on the slot specified.  A specified channel is forbidden to close.  A matrix channel is in channel list parameter (for example, the Model 3730 is 6 x 16 high density matrix card, so an error is generated if a Model 3730 channel is included in the channel list parameter).  Once an error is detected, the command stops processing and no channels or channel patterns are modified.  Example  dmm.setconfig(\"1001:3100\", \"myDcv\")  Assigns myDcv to all the channels on slots&nbsp;1 and 2 and channels 1 to 100 on slot 3.  dmm.setconfig(\"slot5\", \"dcvolts\")  Assigns the factory default settings for dcvolts to channels on slot 5.  Also see  channel.setbackplane()  channel.setpole()  dmm.close()  dmm.configure.recall()  dmm.configure.set()  dmm.getconfig()  "},{"id":211,"title":"dmm.simreftemperature","url":"16068.htm","text":"This attribute sets the simulated reference temperature of the thermocouple reference junction.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Restore configuration<br>Instrument reset<br>Power cycle<br>Measure configuration list  Configuration script<br>Measure configuration list  Celsius: 23<br>Kelvin: 296.15<br>Fahrenheit: 73.4  Usage  value = dmm.simreftemperature  dmm.simreftemperature = value  value  The simulated reference temperature:  Celsius: 0 to 65  Kelvin: 273.15 to 338.15  Fahrenheit: 32 to 149  Details  This attribute applies to the temperature function when the transducer type is set to thermocouple and the reference junction is set to simulated. It allows you to set the simulated reference temperature value.  This attribute is only valid when dmm.func is set to \"temperature\". All other functions generate an error and return nil when queried.  The simulated reference temperature is only used when the transducer type is thermocouple, as set by dmm.transducer. For all other transducer types, the value is set but not used until the transducer type is set for thermocouple.  The simulated reference temperature setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\" with the transducer type set to thermocouple, the simulated reference temperature setting you set previously is retained.  Example  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THERMOCOUPLE  dmm.units = dmm.UNITS_CELSIUS  dmm.simreftemperature = 30  Sets 30 degrees Celsius as the simulated reference temperature for thermocouples.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.transducer  dmm.units  "},{"id":212,"title":"dmm.thermistor","url":"16069.htm","text":"This attribute describes the type of thermistor.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  5000  Usage  value = dmm.thermistor  dmm.thermistor = value  value  The thermistor type in ohms, 2252, 5000 or 10000; if you enter any other value, it is converted as shown in the following table:  Parameter  Converted value   >= 1950 and < 3500  2252  >= 3500 and < 7500  5000  >= 7500 and <= 10050  10000  Details  This attribute is only valid when dmm.func is set to \"temperature\". All other functions generate an error and return nil when queried. If you use a parameter outside of the ranges listed in the usage table, a parameter out of range error message is generated.  The thermistor attribute is only used when the transducer type is set for thermistor. For all other transducer types, the setting is set but not used until thermistor is selected for the transducer type (see dmm.transducer).  The thermistor setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the thermistor setting you set previously is retained.  Example  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THERMISTOR  dmm.thermistor = 3000  Sets thermistor type to 2252. Note that the original value is set to 3000, but is automatically converted to 2252.  print(dmm.thermistor)  2252  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.transducer  "},{"id":213,"title":"dmm.thermocouple","url":"16070.htm","text":"This attribute indicates the thermocouple type.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1 (dmm.THERMOCOUPLE_K)  Usage  value = dmm.thermocouple  dmm.thermocouple = value  value  The thermocouple type:  dmm.THERMOCOUPLE_J or 0  dmm.THERMOCOUPLE_K or 1  dmm.THERMOCOUPLE_T or 2  dmm.THERMOCOUPLE_E or 3  dmm.THERMOCOUPLE_R or 4  dmm.THERMOCOUPLE_S or 5  dmm.THERMOCOUPLE_B or 6  dmm.THERMOCOUPLE_N or 7  Details  This attribute is only valid when dmm.func is set to \"temperature\". All other functions generate an error and return nil when queried. An illegal parameter value error message is generated if the value specified is not a supported thermocouple type value listed in the usage table.  The thermocouple attribute is only used when the transducer type is thermocouple. For all other transducer types, the value is set but not used until the transducer type is set for thermocouple.  The thermocouple setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the thermocouple value you set previously is retained.  Example  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THERMOCOUPLE  dmm.thermocouple = dmm.THERMOCOUPLE_J  Sets the thermocouple type to J.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.transducer  "},{"id":214,"title":"dmm.threertd","url":"16071.htm","text":"This attribute defines the type of three-wire RTD that is being used.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0 (dmm.RTD_PT100)  Usage  value = dmm.threertd  dmm.threertd = value  value  The type for 3-wire RTD:  PT100: dmm.RTD_PT100 or 0  D100: dmm.RTD_D100 or 1  F100: dmm.RTD_F100 or 2  PT385: dmm.RTD_PT385 or 3   PT3916: dmm.RTD_PT3916 or 4   User-specified type: dmm.RTD_USER or 5  Details  This attribute is only valid when dmm.func is set to \"temperature\" and dmm.transducer is set to dmm.TEMP_THREERTD. For all other transducer types, the attribute is set but is not used until the transducer type is set for three-wire RTD. All other functions generate an error and return nil when queried.  An illegal parameter value error message is generated if the value specified is not a supported RTD type value as listed in the usage table.  The three-wire RTD setting is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the three-wire RTD setting you set previously is retained.  Example  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THREERTD  dmm.threertd = dmm.RTD_PT3916  Sets the type of three-wire RTD to PT3916.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  dmm.transducer  "},{"id":215,"title":"dmm.threshold","url":"16072.htm","text":"This attribute determines the signal level where the instrument makes frequency or period measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1.000000E+01  Usage  value = dmm.threshold  dmm.threshold = value  value  The threshold setting. The range for:  Continuity is from 1 to 1000&nbsp;Ω  Frequency and period is from 0 to 303&nbsp;V  Details  This attribute is only valid when dmm.func is set to \"frequency\", \"period\", or \"continuity\". All other functions generate an error and return nil when queried.  The range setting conditions the signal. The instrument automatically selects the most sensitive threshold range for the value you enter. For example, if you specify the expected input voltage to be 90&nbsp;mV, the instrument automatically selects the&nbsp;100 mV threshold range.  Errors are generated if the parameter value does not make sense for selected function.  The threshold value is saved with the dmm.func function setting, so if you use another function, then return to \"frequency\", \"period\", or \"continuity\", the threshold value you set previously is retained.  Example  dmm.func = \"frequency\"  dmm.threshold = 30  Sets the threshold range for frequency to 30.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":216,"title":"dmm.transducer","url":"16073.htm","text":"This attribute contains the transducer type.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  1 (dmm.TEMP_THERMOCOUPLE)  Usage  value = dmm.transducer  dmm.transducer = value  value  The transducer type:  Thermocouple: dmm.TEMP_THERMOCOUPLE or 1  Thermistor: dmm.TEMP_THERMISTOR or 2  3&#8209;wire RTD: dmm.TEMP_THREERTD or 3  4&#8209;wire RTD: dmm.TEMP_FOURRTD or 4  Details  This attribute is only valid when dmm.func is set to \"temperature\". All other functions generate an error and return nil when queried.  @The setting of this attribute affects which other temperature-supported attributes get used. There are various attributes that are only applicable when the transducer type is a certain type. Although the transducer type needs to match for the attribute setting to be used, the transducer type does not need to match to change the setting or read the setting. For example, the transducer type does not need to be set to dmm.TEMP_FOURRTD to change the dmm.fourrtd attribute setting.  The transducer value is saved with the dmm.func function setting, so if you use another function, then return to \"temperature\", the transducer value you set previously is retained.  Example  dmm.func = \"temperature\"  dmm.transducer = dmm.TEMP_THERMISTOR  Sets transducer to thermistor type.  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.fourrtd  dmm.func  "},{"id":217,"title":"dmm.units","url":"16074.htm","text":"This attribute contains the units that are used for voltage and temperature measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>DMM reset<br>Recall setup  Create configuration script<br>Save setup  0  (dmm.UNITS_VOLTS) for \"acvolts\" and \"dcvolts\"  2 (dmm.UNITS_CELSIUS) for \"temperature\"  Usage  state = dmm.units  dmm.units = state  value  For DC volts and AC volts, select from the following units:  dmm.UNITS_VOLTS or 0  dmm.UNITS_DECIBELS or 1  For temperature, select from the following units:  dmm.UNITS_CELSIUS or 2  dmm.UNITS_KELVIN or 3  dmm.UNITS_FAHRENHEIT or 4  Details  This attribute is only valid when dmm.func is set to \"dcvolts\", \"acvolts\", or \"temperature\".   All other functions generate an error and return nil when queried.  The units value is saved with the dmm.func function setting, so if you use another function, then return to \"dcvolts\", \"acvolts\", or \"temperature\", the units setting you set previously is retained.  Errors are generated if the parameter value does not make sense for the selected function.  Example  dmm.func = \"temperature\"  dmm.units = dmm.UNITS_FAHRENHEIT  Sets units for temperature measurements to Fahrenheit (°F).  Also see  dmm.configure.recall()  dmm.configure.set()  dmm.func  "},{"id":218,"title":"errorqueue.clear()","url":"14749.htm","text":"This function clears all entries out of the error queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  errorqueue.clear()  Details  See Error Available Bit (error or event queue) for additional information about the error queue.  Also see  errorqueue.count  errorqueue.next()  "},{"id":219,"title":"errorqueue.count","url":"14750.htm","text":"This attribute gets the number of entries in the error queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Power cycle<br>Clearing error queue<br>Reading error messages  Not applicable  Not applicable  Usage  count = errorqueue.count  count  The number of entries in the error queue  Example  count = errorqueue.count  print(count)  Returns the number of entries in the error queue.  The output below indicates that there are four entries in the error queue:  4.00000e+00  Also see  Error Available Bit (Error or Event Queue)  errorqueue.clear()  errorqueue.next()  "},{"id":220,"title":"errorqueue.next()","url":"17242.htm","text":"This function reads the oldest entry from the error queue and removes it from the queue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  errorCode, message, severity, errorNode = errorqueue.next()  errorCode  The error code number for the entry  message  The message that describes the error code  severity  The severity level (0, 10, 20, 30, or 40); see Details for more information  errorNode  The node number where the error originated  Details  Entries are stored in a first-in, first-out (FIFO) queue. This function reads the oldest entry and removes it from the queue.  Error codes and messages are listed in the Error summary list.  If there are no entries in the queue, code 0, Queue is Empty, is returned.  Returned severity levels are described in the following table.  Severity level descriptions  Number  Level  Description  0   Informational  Indicates that there are no entries in the queue.  10   Informational  Indicates a status message or minor error.  20  Recoverable  Indicates possible invalid user input; operation continues but you should take action to correct the error.  30  Serious  Indicates a serious error that may require technical assistance, such as corrupted data.  40  Fatal  Instrument is not operational.  In an expanded system, each TSP&#8209;Link enabled instrument is assigned a node number. The variable errorNode stores the node number where the error originated.   Example  errorcode, message = errorqueue.next()  print(errorcode, message)  Reads the oldest entry in the error queue. The output below indicates that the queue is empty.  Output:  0.00000e+00 Queue Is Empty  Also see  Error Available Bit (Error or Event queue)  errorqueue.clear()  errorqueue.count  Error summary list  "},{"id":221,"title":"eventlog.all()","url":"14756.htm","text":"This function returns all entries from the event log as a single string and removes them from the event log.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  logString = eventlog.all()  logString  A listing of all event log entries  Details  This function returns all events in the event log. Logged items are shown from oldest to newest. The response is a string that has the messages delimited with a new line character.  This function also clears the event log.  If there are no entries in the event log, this function returns the value nil.  Example  print(eventlog.all())  Get and print all entries from the event log and remove the entries from the log.  Output:  17:26:35.690 10 Oct 2019, LAN0, 192.168.1.102, LXI, 0, 1570728395,<br>   1192037155.733269000, 0, 0x0  17:26:39.009 10 Oct 2019, LAN5, 192.168.1.102, LXI, 0, 1570728399,<br>   1192037159.052777000, 0, 0x0  Also see  eventlog.clear()  eventlog.count  eventlog.enable  eventlog.next()  eventlog.overwritemethod  "},{"id":222,"title":"eventlog.clear()","url":"14758.htm","text":"This function clears the event log.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  eventlog.clear()  Details  This command removes all messages from the event log.  Also see  eventlog.all()  eventlog.count  eventlog.enable  eventlog.next()  eventlog.overwritemethod  "},{"id":223,"title":"eventlog.count","url":"14757.htm","text":"This attribute returns the number of unread events in the event log.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Clearing event log<br>Reading event log  Not applicable  Not applicable  Usage  N = eventlog.count  N  The number of events in the event log  Example  print(eventlog.count)  Displays the present number of events in the instrument event log.  Output looks similar to:  3.00000e+00  Also see  eventlog.all()  eventlog.clear()  eventlog.enable  eventlog.next()  eventlog.overwritemethod  "},{"id":224,"title":"eventlog.enable","url":"14760.htm","text":"This attribute enables or disables the event log.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  eventlog.ENABLE  Usage  status = eventlog.enable  eventlog.enable = status  status  The enable status of the event log:  1 or eventlog.ENABLE: Event log enable  0 or eventlog.DISABLE: Event log disable  Details  When the event log is disabled (eventlog.DISABLE or 0), no new events are added to the event log. You can, however, read and remove existing events.  When the event log is enabled, new events are logged.  Example  print(eventlog.enable)  eventlog.enable = eventlog.DISABLE  print(eventlog.enable)  Displays the present status of the Series 3700A event log.  Output:  1.00000e+00  0.00000e+00  Also see  eventlog.all()  eventlog.clear()  eventlog.count  eventlog.next()  eventlog.overwritemethod  "},{"id":225,"title":"eventlog.next()","url":"14761.htm","text":"This function returns the oldest unread event message from the event log and removes it from the event log.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  logString = eventlog.next()  logString  The next log entry  Details  Returns the next entry from the event log and removes it from the log.  If there are no entries in the event log, returns the value nil.  Example 1  print(eventlog.next())  Get the oldest message in the event log and remove that entry from the log.  Output:  17:28:22.085 10 Oct 2019, LAN2, 192.168.1.102, LXI, 0, 1570728502, <no time>, 0, 0x0  Example 2  print(eventlog.next())  If you send this command when there is nothing in the event log, you get the following output:  nil  Also see  eventlog.all()  eventlog.clear()  eventlog.count  eventlog.enable  eventlog.overwritemethod  "},{"id":226,"title":"eventlog.overwritemethod","url":"14759.htm","text":"This attribute controls how the event log processes events if the event log is full.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  1 (eventlog.DISCARD_OLDEST)  Usage  method = eventlog.overwritemethod  eventlog.overwritemethod = method  method  Set to one of the following values:  0 or eventlog.DISCARD_NEWEST: New entries are not logged  1 or eventlog.DISCARD_OLDEST: Old entries are deleted as new events are logged  Details  When this attribute is set to eventlog.DISCARD_NEWEST, new entries are not logged.  When this attribute is set to eventlog.DISCARD_OLDEST, the oldest entry is discarded when a new entry is added.  Example  eventlog.overwritemethod = 0  When the log is full, the event log ignores new entries.  Also see  eventlog.all()  eventlog.clear()  eventlog.count  eventlog.enable  eventlog.next()  "},{"id":227,"title":"exit()","url":"14769.htm","text":"This function stops a script that is presently running.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  exit()  Details  Terminates script execution when called from a script that is being executed.  This command does not wait for overlapped commands to complete before terminating script execution. If overlapped commands are required to finish, use the waitcomplete() function before calling exit().  Also see  waitcomplete()  "},{"id":228,"title":"fileVar:close()","url":"14772.htm","text":"This function closes the file that is represented by the fileVar variable.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  fileVar:close()  fileVar  The file descriptor variable to close  Details  This command is equivalent to io.close(fileVar).  Note that files are automatically closed when the file descriptors are garbage collected.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  print(\"\\n*** fileVar:close\")  do  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  end  myfile, myfile_err, myfile_errnum = io.open(fileName, \"r\")  myfile:close()  os.remove(fileName)  Opens file myfile.txt for writing. If no errors were found while opening, writes Removing file and closes the file.  Also see  File I/O  fileVar:flush()  fileVar:read()  fileVar:seek()  fileVar:write()  io.close()  io.open()  "},{"id":229,"title":"fileVar:flush()","url":"14786.htm","text":"This function writes buffered data to a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  fileVar:flush()  fileVar  The file descriptor variable to flush  Details  The fileVar:write() or io.write() functions buffer data, which may not be written immediately to the USB flash drive. Use fileVar:flush() to flush this data. Using this function removes the need to close a file after writing to it, allowing the file to be left open to write more data. Data may be lost if the file is not closed or flushed before a script ends.   If there is going to be a time delay before more data is written to a file, and you want to keep the file open, flush the file after you write to it to prevent loss of data.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** io.read\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\\n\")  myfile:flush()  myfile:close()  do  fileHandle = io.input(fileName)  value = io.read(\"*a\")  print(value)  end  fileHandle:close()  print(errorqueue.next())  Writes data to a USB flash drive.  Also see  File I/O  fileVar:write()  io.open()  io.write()  "},{"id":230,"title":"fileVar:read()","url":"14787.htm","text":"This function reads data from a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  data1 = fileVar:read()\t  data1 = fileVar:read(format1)  data1, data2 = fileVar:read(\"format1\", \"format2\")  data1, ..., datan = fileVar:read(\"format1\", ..., \"formatn\")  data1  First data read from the file  data2  Second data read from the file  datan  Last data read from the file  fileVar  The descriptor of the file to be read  format1  A string or number indicating the first type of data to be read  format2  A string or number indicating the second type of data to be read  formatn  A string or number indicating the last type of data to be read  ...  One or more entries (or values) separated by commas  Details  The format parameters may be any of the following:  \"*n\": Returns a number.  \"*a\": Returns the whole file, starting at the current position (returns an empty string if the current file position is at the end of the file).  \"*l\": Returns the next line, skipping the end of line; returns nil if the current file position is at the end of file.  n: Returns a string with up to n characters; returns an empty string if n is zero; returns nil if the current file position is at the end of file.  If no format parameters are provided, the function performs as if the function is passed the value \"*l\".  Any number of format parameters may be passed to this command, each corresponding to a returned data value.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  print(\"fileVar:read\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  myfile, myfile_err, myfile_errnum = io.open(fileName, \"r\")  contents = myfile:read(\"*a\")  print(contents)  end  myfile:close()  os.remove(fileName)  Reads data from the input file.  Also see  File I/O  fileVar:write()  io.input()  io.open()  "},{"id":231,"title":"fileVar:seek()","url":"14788.htm","text":"This function sets and gets the present position of a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  position, errorMsg = fileVar:seek()  position, errorMsg = fileVar:seek(\"whence\")  position, errorMsg = fileVar:seek(\"whence\", offset)  position  The new file position, measured in bytes from the beginning of the file  errorMsg  A string containing the error message  fileVar  The file descriptor variable  whence  A string indicating the base against which offset is applied; the default is&nbsp;\"cur\"  offset  The intended new position, measured in bytes from a base indicated by whence (default is 0)  Details  The whence parameters may be any of the following:  \"set\": Beginning of file  \"cur\": Current position  \"end\": End of file  If an error is encountered, it is logged to the error queue, and the command returns nil and the error&nbsp;string.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** fileVar:seek\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  myfile, myfile_err, myfile_errnum = io.open(fileName, \"r\")  position = myfile:seek(\"end\", -1)  print(position)  end  myfile:close()  os.remove(fileName)  Get the present position of a file.  Also see  File I/O  io.open()  "},{"id":232,"title":"fileVar:write()","url":"14789.htm","text":"This function writes data to a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  fileVar:write(data)  fileVar:write(data1, data2)  fileVar:write(data1, ..., datan)  fileVar  The file descriptor variable  data  Write all data to the file  data1  The first data to write to the file  data2  The second data to write to the file  datan  The last data to write to the file  ...  One or more entries (or values) separated by commas  Details  This function may buffer data until a flush (fileVar:flush() or io.flush()) or close (fileVar:close() or io.close()) operation is performed.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** fileVar:write\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  do  myfile:write(\"Line 1\")  end  myfile:close()  os.remove(fileName)  Write data to a file.  Also see  File I/O  fileVar:close()  fileVar:flush()  io.close()  io.flush()  io.open()  "},{"id":233,"title":"format.asciiprecision","url":"14797.htm","text":"This attribute sets the precision (number of digits) for all numbers returned in the ASCII format.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  6  Usage  precision = format.asciiprecision  format.asciiprecision = precision  precision  A number representing the number of digits to be printed for numbers printed with the print(), printbuffer(), and printnumber() functions; must be a number between 1 and 16  Details  This attribute specifies the precision (number of digits) for numeric data printed with the print(), printbuffer(), and printnumber() functions. The format.asciiprecision attribute is only used with the ASCII format. The precision value must be a number from 0 to 16.  Note that the precision is the number of significant digits printed. There is always one digit to the left of the decimal point; be sure to include this digit when setting the precision.  Example  format.asciiprecision = 10  x = 2.54  printnumber(x)  format.asciiprecision = 3  printnumber(x)  Output:  2.540000000e+00  2.54e+00  Also see  format.byteorder  format.data  print()  printbuffer()  printnumber()  "},{"id":234,"title":"format.byteorder","url":"14801.htm","text":"This attribute sets the binary byte order for the data that is printed using the printnumber() and printbuffer() functions.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset  Create configuration script  format.LITTLEENDIAN  Usage  order = format.byteorder  format.byteorder = order  order  Byte order value as follows:  Most significant byte first: 0, format.NORMAL, format.NETWORK, or format.BIGENDIAN  Least significant byte first: 1, format.SWAPPED or format.LITTLEENDIAN  Details  This attribute selects the byte order in which data is written when you are printing data values with the printnumber() and printbuffer() functions. The byte order attribute is only used with the format.SREAL, format.REAL, format.REAL32, and format.REAL64 data formats.  format.NORMAL, format.BIGENDIAN, and format.NETWORK select the same byte order. format.SWAPPED and format.LITTLEENDIAN select the same byte order. Selecting which to use is a matter of preference.  Select the format.SWAPPED or format.LITTLEENDIAN byte order when sending data to a computer with a Microsoft Windows operating system.  Example  x = 1.23  format.data = format.REAL32  format.byteorder = format.LITTLEENDIAN  printnumber(x)  format.byteorder = format.BIGENDIAN  printnumber(x)  The output depends on the terminal program you use, but it looks something like:  #0¤p??  #0??p¤  Also see  format.asciiprecision  format.data  printbuffer()  printnumber()  "},{"id":235,"title":"format.data","url":"14803.htm","text":"This attribute sets the data format for data that is printed using the printnumber() and printbuffer() functions.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Instrument reset<br>Recall setup  Create configuration script<br>Saved setup  1 (format.ASCII)  Usage  value = format.data  format.data = value  value  The format to use for data, set to one of the following values:  ASCII format: 1 or format.ASCII  Single&#8209;precision IEEE Std 754 binary format: 2, format.SREAL, or format.REAL32  Double&#8209;precision IEEE Std 754 binary format: 3, format.REAL, format.REAL64, or format.DREAL  Details  The precision of numeric values can be controlled with the format.asciiprecision attribute. The byte order of format.SREAL, format.REAL, format.REAL32, and format.REAL64 can be selected with the format.byteorder attribute.  REAL32 and SREAL select the same single precision format. REAL and REAL64 select the same double&#8209;precision format. They are alternative identifiers. Selecting which to use is a matter of preference.  The IEEE Std 754 binary formats use four bytes for single&#8209;precision values and eight bytes for double&#8209;precision values.  When data is written with any of the binary formats, the response message starts with #0 and ends with a new line. When data is written with the ASCII format, elements are separated with a comma and space.  @Binary formats are not intended to be interpreted by humans.  Example  format.asciiprecision = 10  x = 3.14159265  format.data = format.ASCII  printnumber(x)  format.data = format.REAL64  printnumber(x)  Output a number represented by x in ASCII using a precision of 10, then output the same number in binary using double&#8209;precision format.  Output:  3.141592650e+00  #0ñÔÈSû!   @  Also see  format.asciiprecision  format.byteorder  printbuffer()  printnumber()  "},{"id":236,"title":"fs.chdir()","url":"14808.htm","text":"This function sets the current working directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  workingDirectory = fs.chdir(\"path\")  workingDirectory  Returned value containing the working path  path  A string indicating the new working directory path  Details  The new working directory path may be absolute or relative to the current working directory.  An error is logged to the error queue if the given path does not exist.  Example  if fs.is_dir(\"/usb1/temp\") == true then  &nbsp; fs.chdir(\"/usb1/temp\")  &nbsp; testPath = fs.cwd()  &nbsp; print(testPath)  else  &nbsp; testPath = fs.cwd()  &nbsp; print(testPath)  end  Insert a USB flash drive into the front panel of the instrument.  Verify that /usb1/temp is a directory and change it to be the current working directory.  Set the variable for the current working directory to be testPath.  The return should be:  /usb1/temp  If /usb1/temp is not a directory, set the variable for the current working directory to be testPath.  The return is:  /usb1  Also see  None  "},{"id":237,"title":"fs.cwd()","url":"14810.htm","text":"This function returns the absolute path of the current working directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  path = fs.cwd()  path  The absolute path of the current working directory  Example  if fs.is_dir(\"/usb1/temp\") == true then  &nbsp; fs.chdir(\"/usb1/temp\")  &nbsp; testPath = fs.cwd()  &nbsp; print(testPath)  else  &nbsp; testPath = fs.cwd()  &nbsp; print(testPath)  end  Insert a USB flash drive into the front panel of the instrument.  Verify that /usb1/temp is a directory and change it to be the current working directory.  Set the variable for the current working directory to be testPath.  The return should be:  /usb1/temp  If /usb1/temp is not a directory, set the variable for the current working directory to be testPath.  The return is:  /usb1  Also see  File I/O  "},{"id":238,"title":"fs.is_dir()","url":"14811.htm","text":"This function tests whether or not the specified path refers to a directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  status = fs.is_dir(\"path\")  status  Whether or not the given path is a directory (true or false)  path  The path of the file system entry to test  Details  The file system path may be absolute or relative to the current working system path.  An error is logged to the error queue if the given path does not exist.  Example 1  print(\"Is directory: \", fs.is_dir(\"/usb1/\"))  Because /usb1/ is always the root directory of an inserted flash drive, you can use this command to verify that USB flash drive is inserted.  Example 2  if fs.is_dir(\"/usb1/temp\") == false then  &nbsp;&nbsp;&nbsp; fs.mkdir(\"/usb1/temp\")  end  Insert a USB flash drive into the front panel of the instrument.  Check to see if the temp directory exists.  If it does not exist, create a directory named temp.  Also see  File I/O  fs.is_file()  "},{"id":239,"title":"fs.is_file()","url":"14824.htm","text":"Tests whether the specified path refers to a file (as opposed to a directory).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  status = fs.is_file(\"path\")  status  true if the given path is a file; otherwise, false  path  The path of the file system entry to test  Details  The file system path may be absolute or relative to the current working system path.  An error is logged to the error queue if the given path does not exist.  Example  rootDirectory = \"/usb1/\"  print(\"Is file: \", fs.is_file(rootDirectory))  Insert a USB flash drive into the front panel of the instrument.  Set rootDirectory to be the USB port.  Check to see if rootDirectory is a file. Because rootDirectory was set up as a directory, the return is false.  Also see  File I/O  fs.is_dir()  "},{"id":240,"title":"fs.mkdir()","url":"14812.htm","text":"This function creates a directory at the specified path.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  path = fs.mkdir(\"newPath\")  path  The returned path of the new directory  newpath  Location (path) of where to create the new directory  Details  The directory path may be absolute or relative to the current working directory.  An error is logged to the error queue if the parent folder of the new directory does not exist, or if a file system entry already exists at the given path.  Example  if fs.is_dir(\"/usb1/temp\") == false then  &nbsp;&nbsp;&nbsp; fs.mkdir(\"/usb1/temp\")  end  Insert a USB flash drive into the front panel of the instrument.  Check to see if the temp directory exists.  If it does not exist, create a directory named temp.  Also see  File I/O  fs.rmdir()  "},{"id":241,"title":"fs.readdir()","url":"14814.htm","text":"This function returns a list of the file system entries in the directory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  files = fs.readdir(\"path\")  files  A table containing the names of all the file system entries in the specified directory  path  The directory path  Details  The directory path may be absolute or relative to the current working directory.  This command is nonrecursive. For example, entries in subfolders are not returned.  An error is logged to the error queue if the given path does not exist or does not represent a directory.  Example  rootDirectory = \"/usb1/\"  entries = fs.readdir(rootDirectory)  count = table.getn(entries)  print(\"Found a total of \"..count..\" files and directories\")  for i = 1, count do     print(entries[i])  end  Insert a USB flash drive into the front panel of the instrument.  Set rootDirectory to be the USB port.  Set entries as the variable for the file system entries in rootDirectory.  Return the number of files and directories in the directory.  Also see  File I/O  "},{"id":242,"title":"fs.rmdir()","url":"14815.htm","text":"This function removes a directory from the file system.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  fs.rmdir(\"path\")  path  The path of the directory to remove  Details  This path may be absolute or relative to the present working directory.  An error is logged to the error queue if the given path does not exist or does not represent a directory. An error is also logged if the directory is not empty.  Example  rootDirectory = \"/usb1/\"  tempDirectoryName = \"temp\"  if fs.is_dir(rootDirectory..tempDirectoryName) == false then  &nbsp;&nbsp;&nbsp; fs.mkdir(rootDirectory..tempDirectoryName)  end  fs.rmdir(rootDirectory..tempDirectoryName)  Insert a USB flash drive into the front panel of the instrument.  Set rootDirectory to be the USB port.  Set tempDirectoryName to be equivalent to temp.  Check to see if tempDirectoryName exists.  If it does not exist, create a directory named temp.  Remove the directory.  Also see  File I/O  fs.mkdir()  "},{"id":243,"title":"gettimezone()","url":"15011.htm","text":"This function retrieves the local time zone.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  timeZone = gettimezone()  timeZone  The local time zone of the instrument  Details  See settimezone() for additional details about the time zone format and a description of the fields.  timeZone can be in either of the following formats:  If one parameter was used with settimezone(), the format used is:<br>GMThh:mm:ss  If four parameters were used with settimezone(), the format used is:<br>GMThh:mm:ssGMThh:mm:ss,Mmm.w.dw/hh:mm:ss,Mmm.w.dw/hh:mm:ss  Example  timezone = gettimezone()  Reads the value of the local time zone.  Also see  settimezone()  "},{"id":244,"title":"gpib.address","url":"14860.htm","text":"This attribute contains the GPIB address.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Not applicable  Nonvolatile memory  16  Usage  address = gpib.address  gpib.address = address  address  The GPIB address of the instrument (1 to 30)  Details  The address can be set to any address value from 1 to 30. However, the address must be unique in the system. It cannot conflict with an address that is assigned to another instrument or to the GPIB controller.  A new GPIB address takes effect when the command to change it is processed. If there are response messages in the output queue when this command is processed, they must be read at the new address.  If command messages are being queued (sent before this command has executed), the new settings may take effect in the middle of a subsequent command message, so use care when setting this attribute from the GPIB interface.  You should allow sufficient time for the command to be processed before attempting to communicate with the instrument again.  The reset() function does not affect the GPIB address.  Example  gpib.address = 26  address = gpib.address  print(address)  Sets the GPIB address and reads the address.  Output:  26  Also see  GPIB setup  "},{"id":245,"title":"io.close()","url":"14868.htm","text":"This function closes a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes (see Details)  Usage  io.close()  io.close(file)  file  The descriptor of the file to close  Details  If a file is not specified, the default output file closes.  Only io.close(), used without specifying a parameter, can be accessed from a remote node.  Example  testFile, testError = io.open(\"testfile.txt\", \"w\")  if nil == testError then     testFile:write(\"This is my test file\")     io.close(testFile)  end  Opens file testfile.txt for writing. If no errors were found while opening, writes \"This is my test file\" and closes the file.  Also see  fileVar:close  Script examples  io.open()  "},{"id":246,"title":"io.flush()","url":"14870.htm","text":"This function saves buffered data to a file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  io.flush()  Details  You must use the io.flush() or io.close() functions to write data to the file system.  @Data is not automatically written to a file when you use the io.write() function. The io.write() function buffers data; it may not be written to the USB flash drive immediately. Use the io.flush() function to immediately write buffered data to the drive.  This function only flushes the default output file.  Using this command removes the need to close a file after writing to it and allows it to be left open to write more data. Data may be lost if the file is not closed or flushed before an application ends. To prevent the loss of data if there is going to be a time delay before more data is written (and when you want to keep the file open and not close it), flush the file after writing to it.  Also see  Script examples  fileVar:flush()  fileVar:write()  io.write()  "},{"id":247,"title":"io.input()","url":"66560.htm","text":"This function assigns a previously opened file, or opens a new file, as the default input file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes (see Details)  Usage  fileVar = io.input()  fileVar = io.input(\"newfile\")  fileVar  The descriptor of the input file or an error message (if the function fails)  newfile  A string representing the path of a file to open as the default input file, or the file descriptor of an open file to use as the default input file  Details  The newfile path may be absolute or relative to the current working directory.  When using this function from a remote TSP-Link&reg; node, this command does not accept a file descriptor and does not return a value.  If the function fails, an error message is returned.  Also see  Script examples  io.open()  io.output()  "},{"id":248,"title":"io.open()","url":"14872.htm","text":"This function opens a file for later reference.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  fileVar, errorMsg = io.open(\"path\")  fileVar, errorMsg = io.open(\"path\", \"mode\")  fileVar  The descriptor of the opened file  errorMsg  Indicates whether an error was encountered while processing the function  path  The path of the file to open  mode  A string representing the intended access mode (\"r\" = read, \"w\"&nbsp;=&nbsp;write, and \"a\" = append)  Details  The path to the file to open may be absolute or relative to the current working directory. If you successfully open the file, errorMsg is nil and fileVar has the descriptor used to access the file.  If an error is encountered, the command returns nil for fileVar and an error string.  Example  testFile, testError = io.open(\"testfile.txt\", \"w\")  if testError == nil then     testFile:write(\"This is my test file\")     io.close(testFile)  end  Opens file testfile.txt for writing. If no errors were found while opening, writes \"This is my test file\" and closes the file.  Also see  Script examples  fileVar:close()  io.close()  "},{"id":249,"title":"io.output()","url":"14873.htm","text":"This function assigns a previously opened file or opens a new file as the default output file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes (see Details)  Usage  fileVar = io.output()  fileVar = io.output(\"newfile\")  fileVar  The descriptor of the output file or an error message (if the function fails)  newfile  A file descriptor to assign (or the path of a file to open) as the default output&nbsp;file  Details  The path of the file to open may be absolute or relative to the current working directory.  When accessed from a remote node using the TSP-Link network, this command does not accept a file descriptor parameter and does not return a value.  If the function fails, an error message is returned.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** io.output\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  fileHandle = io.output(fileName)  print(fileHandle)  end  io.close(fileHandle)  print(fileHandle)  os.remove(fileName)  Assign the file to be the default output file.  Also see  Script examples  io.input()  io.open()  "},{"id":250,"title":"io.read()","url":"14874.htm","text":"This function reads data from the default input file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data1 = io.read()  data1 = io.read(\"format1\")  data1, data2 = io.read(\"format1\", \"format2\")  data1, ..., dataN = io.read(\"format1\", ..., \"formatN\")  data1  The data read from the file  data2  The data read from the file  dataN  The data read from the file; the number of return values matches the number of format values given  format1  A string or number indicating the type of data to be read  format2  A string or number indicating the type of data to be read  formatN  A string or number indicating the type of data to be read  ...  One or more entries (or values) separated by commas  Details  The format parameters may be any of the following:  Format parameter  Description  \"*n\"  Returns a number  \"*a\"  Returns the whole file, starting at the present position; returns an empty string if it is at the end of file  \"*l\"  Default setting; returns the next line, skipping the end of line; returns nil if the present file position is at the end of file  N  Returns a string with up to N characters; returns an empty string if N is zero (0); returns nil if the present file position is at the end of file  Any number of format parameters may be passed to this command, each corresponding to a returned data value.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  -- io.read  print(\"\\n*** io.read\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\\n\")  myfile:flush()  myfile:close()  do  fileHandle = io.input(fileName)  value = io.read(\"*a\")  print(value)  end  fileHandle:close()  print(errorqueue.next())  Read data from the default input file.  Also see  fileVar:read()  Script examples  "},{"id":251,"title":"io.type()","url":"14875.htm","text":"This function checks whether or not a given object is a file handle.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  type = io.type(obj)  type  Indicates whether the object is an open file handle  obj  Object to check  Details  Returns the string \"file\" if the object is an open file handle. If it is not an open file handle, nil is returned.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** io.type\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  fileHandle = io.output(fileName)  state = io.type(fileHandle)  print(state)  end  io.close(fileHandle)  local state = io.type(fileHandle)  print(state)  os.remove(fileName)  Check whether or not fileName is a file handle.  Also see  Script examples  io.open()  "},{"id":252,"title":"io.write()","url":"14877.htm","text":"This function writes data to the default output file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  io.write()  io.write(data1)  io.write(data1, data2)  io.write(data1, ..., dataN)  data1  The data to be written  data2  The data to be written  dataN  The data to be written  ...  One or more values separated by commas  Details  All data parameters must be either strings or numbers.  @Data is not immediately written to a file when you use the io.write() function. The io.write() function buffers data; it may not be written to the USB flash drive immediately. Use the io.flush() function to immediately write buffered data to the drive.  Example  local fileName = \"/usb1/myfile.txt\"  if fs.is_file(fileName) then  \tos.remove(fileName)  \tprint(\"Removing file\")  else  \tprint(\"Nothing removed\")  end  errorqueue.clear()  print(\"\\n*** io.write\")  myfile, myfile_err, myfile_errnum = io.open(fileName, \"w\")  myfile:write(\"Line 1\")  myfile:close()  do  fileHandle = io.output(fileName)  io.write(\"Line 2\")  end  io.close(fileHandle)  os.remove(fileName)  Writes data to the default output file.  Also see  Script examples  io.flush()  "},{"id":253,"title":"lan.applysettings()","url":"14890.htm","text":"This function re-initializes the LAN interface with new settings.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.applysettings()  Details  Disconnects all existing LAN connections to the instrument and re-initializes the LAN with the present configuration&nbsp;settings.  This function initiates a background operation. LAN configuration could be a lengthy operation. Although the function returns immediately, the LAN initialization continues to run in the background.  Even though the LAN configuration settings may not have changed since the LAN was last connected, new settings may take effect due to the dynamic nature of dynamic host configuration protocol (DHCP) or dynamic link local addressing (DLLA) configuration.  Re-initialization takes effect even if the configuration has not changed since the last time the instrument connected to the&nbsp;LAN.  Example  lan.applysettings()  Re-initialize the LAN interface with new settings.  Also see  None  "},{"id":254,"title":"lan.config.dns.address[N]","url":"14898.htm","text":"Configures DNS server IP addresses.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"0.0.0.0\"  Usage  dnsAddress = lan.config.dns.address[N]  lan.config.dns.address[N] = \"dnsAddress\"  dnsAddress  DNS server IP address  N  Entry index (1 or 2)  Details  This attribute is an array of Domain Name System (DNS) server addresses. These addresses take priority for DNS lookups and are consulted before any server addresses that are obtained using DHCP. This allows local DNS servers to be specified that take priority over DHCP&#8209;configured global DNS servers.  You can specify up to two addresses. The address specified by 1 is consulted first for DNS lookups. dnsAddress must be a string specifying the IP address of the DNS server in dotted decimal notation.  Unused entries are returned as \"0.0.0.0\" when read. To disable an entry, set its value to \"0.0.0.0\" or the empty string&nbsp;\"\".  Although only two addresses may be manually specified here, the instrument uses up to three DNS server addresses. If two are specified here, only one that is given by a DHCP server is used. If no entries are specified here, up to three addresses that are given by a DHCP server are used.  Example  dnsaddress = \"164.109.48.173\"  lan.config.dns.address[1] = dnsaddress  Set the DNS address 1 to 164.109.48.173.  Also see  lan.config.dns.domain  lan.config.dns.dynamic  lan.config.dns.hostname  lan.config.dns.verify  lan.restoredefaults()  "},{"id":255,"title":"lan.config.dns.domain","url":"14899.htm","text":"Configures the dynamic DNS domain.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"\"  Usage  domain = lan.config.dns.domain  lan.config.dns.domain = \"domain\"  domain  Dynamic DNS registration domain; use a string of 255 characters or less  Details  This attribute holds the domain to request during dynamic DNS registration. Dynamic DNS registration works with DHCP to register the domain specified in this attribute with the DNS server.  The length of the fully qualified host name (combined length of the domain and host name with separator characters) must be less than or equal to 255 characters. Although up to 255 characters are allowed, you must make sure the combined length is also no more than 255 characters.  Example  print(lan.config.dns.domain)  Outputs the present dynamic DNS domain. For example, if the domain is \"Matrix\", the response is:  Matrix  Also see  lan.config.dns.dynamic  lan.config.dns.hostname  lan.config.dns.verify  lan.restoredefaults()  "},{"id":256,"title":"lan.config.dns.dynamic","url":"14900.htm","text":"Enables or disables the dynamic DNS registration.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  1 (lan.ENABLE)  Usage  state = lan.config.dns.dynamic  lan.config.dns.dynamic = state  state  The dynamic DNS registration state. It may be one of the following values:  1 or lan.ENABLE: Enabled  0 or lan.DISABLE: Disabled  Details  Dynamic DNS registration works with DHCP to register the host name with the DNS server. The host name is specified in the lan.config.dns.hostname attribute.  Example  print(lan.config.dns.dynamic)  Outputs the dynamic registration state.  If dynamic DNS registration is enabled, the response is:  1.00000e+00  Also see  lan.config.dns.hostname  lan.restoredefaults()  "},{"id":257,"title":"lan.config.dns.hostname","url":"66559.htm","text":"This attribute defines the dynamic DNS host name.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  Instrument specific (see Details)  Usage  hostName = lan.config.dns.hostname  lan.config.dns.hostname = \"hostName\"  hostName  The host name to use for dynamic DNS registration; the host name must:  be a string of 15 characters or less  start with a letter  end with a letter or digit  contain only letters, digits, and hyphens  Details  This attribute holds the host name to request during dynamic DNS registration. Dynamic DNS registration works with DHCP to register the host name specified in this attribute with the DNS&nbsp;server.  The factory default value for hostName is \"K&#8209;<model number>&#8209;<serial number>\", where <model number> and <serial number> are replaced with the actual model number and serial number of the instrument (for example, \"K&#8209;3706A&#8209;1234567\"). Note that hyphens separate the characters of hostName.   The length of the fully qualified host name (combined length of the domain and host name with separator characters) must be less than or equal to 255 characters. Although up to 15 characters can be entered here, you must make sure the combined length is no more than 255 characters.  Setting this attribute to an empty string (in other words, setting this attribute to a string of length zero or a string that consists entirely of whitespace characters) reverts the host name to the factory default value.  Example  print(lan.config.dns.hostname)  Outputs the present dynamic DNS host name.  Also see  lan.config.dns.domain  lan.config.dns.dynamic  lan.restoredefaults()  "},{"id":258,"title":"lan.config.dns.verify","url":"14902.htm","text":"This attribute defines the DNS host name verification state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  1 (lan.ENABLE)  Usage  state = lan.config.dns.verify  lan.config.dns.verify = state  state  DNS hostname verification state:  1 or lan.ENABLE: DNS host name verification enabled  0 or lan.DISABLE: DNS host name verification disabled  Details  When this is enabled, the instrument performs DNS lookups to verify that the DNS host name matches the value specified by lan.config.dns.hostname.  Example  print(lan.config.dns.verify)  Outputs the present DNS host name verification state.  If it is enabled, the output is:  1.00000e+00  Also see  lan.config.dns.hostname  lan.restoredefaults()  "},{"id":259,"title":"lan.config.gateway","url":"14904.htm","text":"This attribute contains the LAN default gateway address.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"0.0.0.0\"  Usage  gatewayAddress = lan.config.gateway  lan.config.gateway = \"gatewayAddress\"  gatewayAddress  LAN default gateway address; must be a string specifying the default IP address of the gateway in dotted decimal notation  Details  This attribute specifies the default gateway IP address to use when manual or DLLA configuration methods are used to configure the LAN. If DHCP is enabled, this setting is ignored.  This attribute does not indicate the actual setting that is presently in effect. Use the lan.status.gateway attribute to determine the present operating state of the&nbsp;LAN.  The IP address must be formatted in four groups of numbers, each separated by a&nbsp;decimal.  Example  print(lan.config.gateway)  Outputs the default gateway address. For example, you might see the output:  192.168.0.1  Also see  lan.restoredefaults()  lan.status.gateway  "},{"id":260,"title":"lan.config.ipaddress","url":"14905.htm","text":"This command specifies the LAN IP address.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"192.168.0.2\"  Usage  ipAddress = lan.config.ipaddress  lan.config.ipaddress = \"ipAddress\"  ipAddress  LAN IP address; must be a string specifying the IP address in dotted decimal notation  Details  This command specifies the LAN IP address to use when the LAN is configured using the manual configuration method. This setting is ignored when DLLA or DHCP is used.   This attribute does not indicate the actual setting that is presently in effect. Use the lan.status.ipaddress attribute to determine the present operating state of the LAN.  Example  ipaddress = lan.config.ipaddress  Retrieves the presently set LAN IP address.  Also see  lan.restoredefaults()  lan.status.ipaddress  "},{"id":261,"title":"lan.config.method","url":"14906.htm","text":"This attribute contains the LAN settings configuration method.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  0 (lan.AUTO)  Usage  method = lan.config.method  lan.config.method = method  method  The method for configuring LAN settings; it can be one of the following values:  0 or lan.AUTO: Selects automatic sequencing of configuration methods  1 or lan.MANUAL: Use only manually specified configuration settings  Details  This attribute controls how the LAN IP address, subnet mask, default gateway address, and DNS server addresses are&nbsp;determined.  When method is lan.AUTO, the instrument first attempts to configure the LAN settings using dynamic host configuration protocol (DHCP). If DHCP fails, it tries dynamic link local addressing (DLLA). If DLLA fails, it uses the manually specified&nbsp;settings.  When method is lan.MANUAL, only the manually specified settings are used. Neither DHCP nor DLLA are attempted.  Example  print(lan.config.method)  Outputs the present method.  For example:  1.00000e+00  Also see  lan.restoredefaults()  "},{"id":262,"title":"lan.config.subnetmask","url":"14908.htm","text":"This attribute contains the LAN subnet mask.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  \"255.255.255.0\"  Usage  mask = lan.config.subnetmask  lan.config.subnetmask = \"mask\"  mask  String that specifies the LAN subnet mask value in dotted decimal notation  Details  This attribute specifies the LAN subnet mask that is used when the manual configuration method is used to configure the LAN. This setting is ignored when DLLA or DHCP is used.  This attribute does not indicate the actual setting presently in effect. Use the lan.status.subnetmask attribute to determine the present operating state of the LAN.  Example  print(lan.config.subnetmask)  Outputs the LAN subnet mask, such as:  255.255.255.0  Also see  lan.restoredefaults()  lan.status.subnetmask  "},{"id":263,"title":"lan.lxidomain","url":"14893.htm","text":"This attribute contains the LXI domain.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  LAN restore defaults  Nonvolatile memory  0  Usage  domain = lan.lxidomain  lan.lxidomain = domain  domain  The LXI domain number (0 to 255)  Details  This attribute sets the LXI domain number.  All outgoing LXI packets are generated with this domain number. All inbound LXI packets are ignored unless they have this domain number.  Example  print(lan.lxidomain)  Displays the LXI domain.  Also see  None  "},{"id":264,"title":"lan.nagle","url":"14894.htm","text":"This attribute controls the state of the LAN Nagle algorithm.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Power cycle  Not saved  0 (lan.DISABLE)  Usage  state = lan.nagle  lan.nagle = state  state  The state of the Nagle algorithm:  1 or lan.ENABLE: Enable the LAN Nagle algorithm for TCP&nbsp;connections  0 or lan.DISABLE: Disable the Nagle algorithm for TCP&nbsp;connections  Details  This attribute enables or disables the use of the LAN Nagle algorithm on transmission control protocol (TCP) connections.  Also see  lan.restoredefaults()  "},{"id":265,"title":"lan.reset()","url":"14895.htm","text":"This function resets the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.reset()  Details  This function resets the LAN interface. It performs the commands lan.restoredefaults() and lan.applysettings(). It also resets the LAN password.  Also see  lan.applysettings()  lan.restoredefaults()  localnode.password  "},{"id":266,"title":"lan.restoredefaults()","url":"14896.htm","text":"This function resets LAN settings to default values.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.restoredefaults()  Details  The settings that are restored are shown in the following table.  Settings that are restored to default  Attribute  Default setting  lan.config.dns.address[N]  \"0.0.0.0\"  lan.config.dns.domain  \"\"  lan.config.dns.dynamic  lan.ENABLE  lan.config.dns.hostname  \"K-<model number>-<serial number>\"  lan.config.dns.verify  lan.ENABLE  lan.config.gateway  \"0.0.0.0\"  lan.config.ipaddress  \"0.0.0.0\"  lan.config.method  lan.AUTO  lan.config.subnetmask  \"255.255.255.0\"  lan.lxidomain  0  localnode.password  \"admin\"  The lan.restoredefaults() function does not reset the LAN password. The localnode.password attribute controls the web password, which can be reset separately.  This command is run when lan.reset() is sent.  Example  lan.restoredefaults()  Restores the LAN defaults.  Also see  lan.reset()  localnode.password  "},{"id":267,"title":"lan.status.dns.address[N]","url":"14909.htm","text":"This attribute contains the DNS server IP addresses.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  dnsAddress = lan.status.dns.address[N]  dnsAddress  DNS server IP address  N  Entry index (1, 2, or 3)  Details  This attribute is an array of DNS server addresses. The instrument can use up to three addresses.  Unused or disabled entries are returned as \"0.0.0.0\" when read. The dnsAddress returned is a string specifying the IP address of the DNS server in dotted decimal notation.  You can only specify two addresses manually. However, the instrument uses up to three DNS server addresses. If two are specified, only the one given by a DHCP server is used. If no entries are specified, up to three address given by a DHCP server are used.  The value of lan.status.dns.address[1] is referenced first for all DNS lookups. The values of lan.status.dns.address[2] and lan.status.dns.address[3] are referenced second and third, respectively.  Example  print(lan.status.dns.address[1])  Outputs DNS server address 1, for&nbsp;example:  164.109.48.173  Also see  lan.status.dns.name  "},{"id":268,"title":"lan.status.dns.name","url":"14910.htm","text":"This attribute contains the present DNS fully qualified host name.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  hostName = lan.status.dns.name  hostName  Fully qualified DNS host name that can be used to connect to the instrument  Details  A fully qualified domain name (FQDN) specifies its exact location in the tree hierarchy of the Domain Name System (DNS).  A FQDN is the complete domain name for a specific computer or host on the LAN. The FQDN consists of two parts: The host name and the domain name.  If the DNS host name for an instrument is not found, this attribute stores the IP address in dotted decimal notation.  Example  print(lan.status.dns.name)  Outputs the dynamic DNS host name.  Also see  lan.config.dns.address[N]  lan.config.dns.hostname  "},{"id":269,"title":"lan.status.duplex","url":"14911.htm","text":"This attribute contains the duplex mode presently in use by the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  duplex = lan.status.duplex  duplex  LAN duplex setting can be one of the following values:  0 or lan.HALF: half-duplex operation  1 or lan.FULL: full-duplex operation  Example  print(lan.status.duplex)  Outputs the present LAN duplex mode, such as:  1.00000e+00  Also see  None  "},{"id":270,"title":"lan.status.gateway","url":"14912.htm","text":"This attribute contains the gateway address presently in use by the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  gatewayAddress = lan.status.gateway  gatewayAddress  LAN gateway address presently being used  Details  The value of gatewayAddress is a string that indicates the IP address of the gateway in dotted decimal notation.  Example  print(lan.status.gateway)  Outputs the gateway address, such as:  192.168.0.1  Also see  lan.config.gateway  "},{"id":271,"title":"lan.status.ipaddress","url":"14913.htm","text":"This attribute contains the LAN IP address presently in use by the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  ipAddress = lan.status.ipaddress  ipAddress  LAN IP address specified in dotted decimal notation  Details  The IP address is a character string that represents the IP address assigned to the instrument.  Example  print(lan.status.ipaddress)  Outputs the LAN IP address currently in use, such as:  192.168.0.2  Also see  lan.config.ipaddress  "},{"id":272,"title":"lan.status.macaddress","url":"14914.htm","text":"This attribute contains the LAN MAC address.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  macAddress = lan.status.macaddress  macAddress  The instrument MAC address  Details  The MAC address is a character string representing the MAC address of the instrument in hexadecimal notation. The string includes colons that separate the address octets (see&nbsp;Example).  Example  print(lan.status.macaddress)  Outputs the MAC address of the instrument, for example:  08:00:11:00:00:57  Also see  None  "},{"id":273,"title":"lan.status.port.dst","url":"14915.htm","text":"This attribute contains the LAN dead socket termination port number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  port = lan.status.port.dst  port  Dead socket termination socket port number  Details  This attribute holds the TCP port number used to reset all other LAN socket connections.  To reset all LAN connections, open a connection to the DST port number.  Example  print(lan.status.port.dst)  Outputs the LAN dead socket termination port number, such&nbsp;as:  5.03000e+03  Also see  None  "},{"id":274,"title":"lan.status.port.rawsocket","url":"14916.htm","text":"This attribute contains the LAN raw socket connection port number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  port = lan.status.port.rawsocket  port  Raw socket port number  Details  The TCP port number used to connect the instrument and to control the instrument over a raw socket communication interface.  Example  print(lan.status.port.rawsocket)  Outputs the LAN raw socket port number, such&nbsp;as:  5.02500e+03  Also see  None  "},{"id":275,"title":"lan.status.port.telnet","url":"14917.htm","text":"This attribute contains the LAN Telnet connection port number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  port = lan.status.port.telnet  port  Telnet port number  Details  This attribute holds the TCP port number used to connect to the instrument to control it over a Telnet interface.  Example  print(lan.status.port.telnet)  Get the LAN Telnet connection port number.  Output:  2.30000e+01  Also see  None  "},{"id":276,"title":"lan.status.port.vxi11","url":"14918.htm","text":"This attribute contains the LAN VXI-11 connection port number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  port = lan.status.port.vxi11  port  LAN VXI-11 port number  Details  This attribute stores the TCP port number used to connect to the instrument over a VXI-11 interface.  Example  print(lan.status.port.vxi11)  Outputs the VXI-11 number, such as:  1.02400e+03  Also see  None  "},{"id":277,"title":"lan.status.speed","url":"14919.htm","text":"This attribute contains the LAN speed.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  speed = lan.status.speed  speed  LAN speed in Mbps, either 10 or 100  Details  This attribute indicates the transmission speed currently in use by the LAN interface.  Example  print(lan.status.speed)  Outputs the transmission speed of the instrument presently in use, such as:  1.00000e+02  Also see  None  "},{"id":278,"title":"lan.status.subnetmask","url":"14920.htm","text":"This attribute contains the LAN subnet mask that is presently in use by the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  mask = lan.status.subnetmask  mask  A string specifying the subnet mask in dotted decimal notation  Details  Use this attribute to determine the present operating state of the LAN. This attribute returns the present LAN subnet mask value if the LAN is manually configured, or when DLLA or DHCP is used.  Example  print(lan.status.subnetmask)  Outputs the subnet mask of the instrument that is presently in use, such as:  255.255.255.0  Also see  lan.config.subnetmask  "},{"id":279,"title":"lan.trigger[N].assert()","url":"14921.htm","text":"This function simulates the occurrence of the trigger and generates the corresponding event ID.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.trigger[N].assert()  N  The LAN event number (1 to 8)  Details  Generates and sends a LAN trigger packet for the LAN event number specified.  Sets the pseudo line state to the appropriate state.  The following indexes provide the listed LXI events:  1:LAN0  2:LAN1  3:LAN2  …  8:LAN7  Example  lan.trigger[5].assert()  Creates a trigger with LAN packet 5.  Also see  lan.lxidomain  lan.trigger[N].clear()  lan.trigger[N].mode  lan.trigger[N].overrun  lan.trigger[N].stimulus  lan.trigger[N].wait()  "},{"id":280,"title":"lan.trigger[N].clear()","url":"14922.htm","text":"This function clears the event detector for a LAN trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.trigger[N].clear()  N  The LAN event number (1 to 8) to clear  Details  The trigger event detector enters the detected state when an event is detected. This function clears a trigger event detector and discards the history of the trigger packet.  This function clears all overruns associated with this LAN trigger.  Example  lan.trigger[5].clear()  Clears the event detector with LAN packet 5.  Also see  lan.trigger[N].assert()  lan.trigger[N].overrun  lan.trigger[N].stimulus  lan.trigger[N].wait()  "},{"id":281,"title":"lan.trigger[N].connect()","url":"14923.htm","text":"This function prepares the event generator for outgoing trigger events.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.trigger[N].connect()  N  The LAN event number (1 to 8)  Details  This command prepares the event generator to send event messages. For TCP connections, this opens the TCP connection.  The event generator automatically disconnects when either the protocol or IP address for this event is changed.  Example  lan.trigger[1].protocol = lan.MULTICAST  lan.trigger[1].connect()  lan.trigger[1].assert()  Set the protocol for LAN trigger&nbsp;1 to be multicast when sending LAN triggers. Then, after connecting the LAN trigger, send a message on LAN trigger&nbsp;1 by asserting it.  Also see  lan.trigger[N].assert()  lan.trigger[N].ipaddress  lan.trigger[N].overrun  lan.trigger[N].protocol  lan.trigger[N].stimulus  lan.trigger[N].wait()  "},{"id":282,"title":"lan.trigger[N].connected","url":"14924.htm","text":"This attribute stores the LAN event connection state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  connected = lan.trigger[N].connected  connected  The LAN event connection state:  true: Connected  false: Not connected  N  The LAN event number (1 to 8)  Details  This read-only attribute is set to true when the LAN trigger is connected and ready to send trigger events following a successful lan.trigger[N].connect() command; if the LAN trigger is not ready to send trigger events, this value is false.  This attribute is also false when either lan.trigger[N].protocol or lan.trigger[N].ipaddress attributes are changed or the remote connection closes the connection.  Example  lan.trigger[1].protocol = lan.MULTICAST  print(lan.trigger[1].connected)  Outputs true if connected, or false if not&nbsp;connected.  Example output:  false  Also see  lan.trigger[N].connect()  lan.trigger[N].ipaddress  lan.trigger[N].protocol  "},{"id":283,"title":"lan.trigger[N].disconnect()","url":"14925.htm","text":"This function disconnects the LAN trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  lan.trigger[N].disconnect()  N  The LAN event number (1 to 8)  Details  For TCP connections, this closes the TCP connection.  The LAN trigger automatically disconnects when either the lan.trigger[N].protocol or lan.trigger[N].ipaddress attributes for this event are changed.  Also see  lan.trigger[N].ipaddress  lan.trigger[N].protocol  "},{"id":284,"title":"lan.trigger[N].EVENT_ID","url":"14926.htm","text":"This constant is the event identifier used to route the LAN trigger to other subsystems (using stimulus properties).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  lan.trigger[N].EVENT_ID  N  The LAN event number (1 to 8)  Details  Set the stimulus of any trigger event detector to the value of this constant to have it respond to incoming LAN trigger packets.  Example  digio.trigger[14].stimulus = lan.trigger[1].EVENT_ID  Route occurrences of triggers on LAN trigger&nbsp;1 to digital I/O trigger&nbsp;14.  Also see  None  "},{"id":285,"title":"lan.trigger[N].ipaddress","url":"14927.htm","text":"This attribute specifies the address (in dotted&#8209;decimal format) of UDP or TCP listeners.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>LAN trigger N reset<br>Recall setup  Create configuration script<br>Save setup   \"0.0.0.0\"  Usage  ipAddress = lan.trigger[N].ipaddress  lan.trigger[N].ipaddress = \"ipAddress\"  ipAddress  The LAN address for this attribute as a string in dotted decimal notation  N  The LAN event number (1 to 8)  Details  Sets the IP address for outgoing trigger events.  Set to \"0.0.0.0\" for multicast.  After changing this setting, the lan.trigger[N].connect() command must be called before outgoing messages can be sent.  Example  lan.trigger[3].protocol = lan.TCP  lan.trigger[3].ipaddress = \"192.168.1.100\"  lan.trigger[3].connect()  Set the protocol for LAN trigger&nbsp;3 to be lan.TCP when sending LAN triggers.  Use IP address \"192.168.1.100\" to connect the LAN trigger.  Also see  lan.trigger[N].connect()  "},{"id":286,"title":"lan.trigger[N].mode","url":"14928.htm","text":"This attribute sets the trigger operation and detection mode of the specified LAN event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>LAN trigger N reset<br>Recall setup  Create configuration script<br>Save setup   0 (lan.TRIG_EITHER)  Usage  mode = lan.trigger[N].mode  lan.trigger[N].mode = mode  mode  A number representing the trigger mode (0 to 7); see the Details section for more&nbsp;information  N  A number representing the LAN event number (1 to 8)  Details  This command controls how the trigger event detector and the output trigger generator operate on the given trigger. These settings are intended to provide behavior similar to the digital I/O triggers.  LAN trigger mode values  Mode  Number  Trigger packets detected as input  LAN trigger packet generated for output with a…  lan.TRIG_EITHER  0  Rising or falling edge (positive or negative state)  negative state  lan.TRIG_FALLING  1  Falling edge (negative state)  negative state  lan.TRIG_RISING  2  Rising edge (positive state)  positive state  lan.TRIG_RISINGA  3  Rising edge (positive state)  positive state  lan.TRIG_RISINGM  4  Rising edge (positive state)  positive state  lan.TRIG_SYNCHRONOUS  5  Falling edge (negative state)  positive state  lan.TRIG_SYNCHRONOUSA  6  Falling edge (negative state)  positive state  lan.TRIG_SYNCHRONOUSM  7  Rising edge (positive state)  negative state  lan.TRIG_RISING and lan.TRIG_RISINGA are the same.  lan.TRIG_RISING and lan.TRIG_RISINGM are the same.  Use of either lan.TRIG_SYNCHRONOUSA or lan.TRIG_SYNCHRONOUSM instead of lan.TRIG_SYNCHRONOUS is preferred. Use of lan.TRIG_SYNCHRONOUS is provided for compatibility with older products and other Keithley Instruments products.  Example  print(lan.trigger[1].mode)  Outputs the present LAN trigger mode of LAN event&nbsp;1.  Also see  Digital I/O  TSP-Link system expansion interface  "},{"id":287,"title":"lan.trigger[N].overrun","url":"14929.htm","text":"This attribute contains the overrun status of the LAN event detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  LAN trigger N clear<br>LAN trigger N reset<br>Instrument reset<br>Recall setup  Not applicable  Not applicable  Usage  overrun = lan.trigger[N].overrun  overrun  The trigger overrun state for the specified LAN packet (true or false)  N  The LAN event number (1 to 8)  Details  This command indicates whether an event has been ignored because the event detector was already in the detected state when the event occurred.  This is an indication of the state of the event detector built into the synchronization line itself. It does not indicate if an overrun occurred in any other part of the trigger model, or in any other construct that is monitoring the event.  It also is not an indication of an output trigger overrun.Example  overrun = lan.trigger[5].overrun  print(overrun)  Checks the overrun status of a trigger on LAN5 and outputs the value, such as:  false  Also see  lan.trigger[N].assert()  lan.trigger[N].clear()  lan.trigger[N].stimulus  lan.trigger[N].wait()  "},{"id":288,"title":"lan.trigger[N].protocol","url":"14930.htm","text":"This attribute sets the LAN protocol to use for sending trigger messages.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>LAN trigger N reset<br>Recall setup  Create configuration script<br>Save setup   0 (lan.TCP)  Usage  protocol = lan.trigger[N].protocol  lan.trigger[N].protocol = protocol  protocol  The protocol to use for messages from the trigger:  0 or lan.TCP  1 or lan.UDP  2 or lan.MULTICAST  N  The LAN event number (1 to 8)  Details  The LAN trigger listens for trigger messages on all supported protocols, but uses the designated protocol for sending outgoing messages. After changing this setting, lan.trigger[N].connect() must be called before outgoing event messages can be&nbsp;sent.  When the lan.MULTICAST protocol is selected, the lan.trigger[N].ipaddress attribute is ignored and event messages are sent to the multicast address 224.0.23.159.  Example  print(lan.trigger[1].protocol)  Get LAN protocol to use for sending trigger messages for LAN event 1.  Also see  lan.trigger[N].connect()  lan.trigger[N].ipaddress  "},{"id":289,"title":"lan.trigger[N].pseudostate","url":"14931.htm","text":"This attribute sets the simulated line state for the LAN trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>LAN trigger N reset<br>Recall setup  Create configuration script<br>Save setup   1  Usage  pseudostate = lan.trigger[N].pseudostate  lan.trigger[N].pseudostate = pseudostate  pseudostate  The simulated line state (0 or 1)  N  A number representing the LAN event number (1 to 8)  Details  This attribute can be set to initialize the pseudo line state to a known value.  Setting this attribute does not cause the LAN trigger to generate any events or output packets.  Example  print(lan.trigger[1].pseudostate)  Get the present simulated line state for the LAN event 1.  Also see  None  "},{"id":290,"title":"lan.trigger[N].stimulus","url":"20595.htm","text":"This attribute specifies events that cause this trigger to assert.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>LAN trigger N reset<br>Recall setup  Create configuration script<br>Recall setup  0  Usage  triggerStimulus = lan.trigger[N].stimulus  lan.trigger[N].stimulus = triggerStimulus  triggerStimulus  The LAN event identifier used to trigger the event  N  A number specifying the trigger packet over the LAN for which to set or query the trigger source (1 to 8)  Details  This attribute specifies which event causes a LAN trigger packet to be sent for this trigger. Set triggerStimulus to one of the existing trigger event IDs shown in the following table.  Trigger event IDs  Trigger event ID  Description  channel.trigger[N].EVENT_ID or 41 to 48  The trigger event generated by the channel trigger N.  digio.trigger[N].EVENT_ID or 1 to 14  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID or 39  The trigger key (TRIG) on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH or 53  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW or 52  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH or 55  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW or 54  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 2.  trigger.EVENT_ID or 40  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID or 58 to 59  A combination of events has occurred.  trigger.timer[N].EVENT_ID or 20 to 23  A delay expired.  tsplink.trigger[N].EVENT_ID or 17 to 19  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID or 29 to 36  A LAN trigger event has occurred.  scan.trigger.EVENT_SCAN_READY or 24  Scan ready event.  scan.trigger.EVENT_SCAN_START or 25  Scan start event.  scan.trigger.EVENT_CHANNEL_READY or 28  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP or 56  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP or 50  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP or 26  Scan complete event.  scan.trigger.EVENT_IDLE or 27  Idle event.  schedule.alarm[N].EVENT_ID or 37 to 38  Trigger event generated by the alarm N.  @Use one of the text trigger event IDs (for example, digio.trigger[N].EVENT_ID) to set the stimulus value rather than the numeric value. Doing this will make the code compatible for future upgrades.  Setting this attribute to zero disables automatic trigger generation.  If any events are detected prior to calling lan.trigger[N].connect(), the event is ignored and the action overrun is set.  Example  lan.trigger[5].stimulus = trigger.timer[1].EVENT_ID  Use timer 1 trigger event as the source for LAN packet 5 trigger stimulus.  Also see  lan.trigger[N].assert()  lan.trigger[N].clear()  lan.trigger[N].connect()  lan.trigger[N].overrun  lan.trigger[N].wait()  "},{"id":291,"title":"lan.trigger[N].wait()","url":"14933.htm","text":"This function waits for an input trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = lan.trigger[N].wait(timeout)  triggered  Trigger detection indication (true or false)  N  The trigger packet over LAN to wait for (1 to 8)  timeout  Maximum amount of time in seconds to wait for the trigger event  Details  If one or more trigger events have been detected since the last time lan.trigger[N].wait() or lan.trigger[N].clear() was called, this function returns immediately.  After waiting for a LAN trigger event with this function, the event detector is automatically reset and rearmed regardless of the number of events detected.  Example  triggered = lan.trigger[5].wait(3)  Wait for a trigger with LAN packet 5 with a timeout of 3 seconds.  Also see  lan.trigger[N].assert()  lan.trigger[N].clear()  lan.trigger[N].overrun  lan.trigger[N].stimulus  "},{"id":292,"title":"localnode.define.*","url":"17697.htm","text":"These constants indicate the number of available features (of each feature type) for each local node instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  CONSTANT (R)  - -  .MAX_TIMERS  Yes  .MAX_DIO_LINES  Yes  .MAX_TSPLINK_TRIGS  Yes  .MAX_BLENDERS  Yes  .MAX_BLENDER_INPUTS  Yes  .MAX_LAN_TRIGS  Yes  Usage  maxNumber = localnode.define.MAX_TIMERS  maxNumber = localnode.define.MAX_DIO_LINES  maxNumber = localnode.define.MAX_TSPLINK_TRIGS  maxNumber = localnode.define.MAX_BLENDERS  maxNumber = localnode.define.MAX_BLENDER_INPUTS  maxNumber = localnode.define.MAX_LAN_TRIGS  maxNumber = localnode.define.MAX_CHANNEL_TRIGS  maxNumber  A variable assigned the value of the constant; the constant equals the maximum number available for the specified&nbsp;feature on the local node instrument  Details  These read-only constants indicate the maximum number of each feature type that is available. Feature types are timers, digital input/output lines, triggers, and blenders.  When using this command from a remote node, localnode should be replaced with the node reference, for example, node[5].define.MAX_TIMERS.  Example  maxNumber = localnode.define.MAX_TIMERS  Reads the maximum number of timers that are available for the presently active instrument.  Also see  None  "},{"id":293,"title":"localnode.description","url":"15008.htm","text":"This attribute stores a user-defined description and mDNS service name of the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  Instrument specific (see Details)  Usage  localnode.description = \"description\"  description = localnode.description  description  User-defined description and mDNS service name of the instrument; use a string of 63 characters or less  Details  This attribute stores a string that contains a description of the instrument. This value appears on LXI welcome page of the instrument. The value of this attribute is also used as the mDNS service name of the instrument.  The default value of this attribute contains Keithley ModelNumber #SSSSSSSS, where: ModelNumber  is the model number of the instrument and #SSSSSSSS is the eight-digit serial number of the instrument. You can change it to a value that makes sense for your system. Setting this attribute to an empty string (in other words, setting this attribute to a string of length zero or a string consisting entirely of whitespace characters) reverts the description to the factory default value.  When using this command from a remote node, replace localnode with the node reference, for example node[5].description.  Example  description = \"System in Lab 05\"  localnode.description = description  Set description to System in Lab 05.  Also see  None  "},{"id":294,"title":"localnode.emulation","url":"20571.htm","text":"This attribute sets the instrument to report the model number as 3706 instead of 3706A.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Not applicable  Nonvolatile memory  localnode.OFF  Usage  value = localnode.emulation  localnode.emulation = value  value  0 or localnode.OFF: No emulation (model number is reported as 3706A)  1 or localnode.EMULATION_3706: Reports the model number as 3706  Details  This command needs to be set if you replace a Model 3706 with a Model 3706A in a system where computer drivers may be querying the model. This can occur if you replace a Model 3706 with a Model 3706A in an existing system, or if you duplicate a system but use a Model 3706A instead of a Model 3706.  When this command is set to localnode.EMULATION_3706, the model number is reported as a 3706 when you send a request with a command such as localnode.model or *idn?. This allows drivers that query the model number to continue to operate normally.  @All other Model 3706A behavior is the same. Emulation mode does not affect the changes to the IEEE-1588 features or the response times that occurred with the update from the Model 3706 to the Model 3706A.  This setting is preserved through a power cycle and instrument reset.  Example  localnode.emulation = localnode.EMULATION_3706  Sets the Model 3706A for Model 3706 emulation.  Also see  localnode.model  "},{"id":295,"title":"localnode.license","url":"92667.htm","text":"This attribute returns the product license agreements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Nonvolatile memory  Not applicable  Usage  license_agreement = localnode.license  license_agreement  The text of the license agreements  Example  print(localnode.license)  Returns the license agreements for the Series 3700A.  Also see  None  "},{"id":296,"title":"localnode.linefreq","url":"20578.htm","text":"This attribute contains the power line frequency setting used for NPLC calculations.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  60  Usage  frequency = localnode.linefreq  frequency  An integer representing the instrument's detected line frequency  Details  When using this command from a remote node, localnode should be replaced with the node reference, for example node[5].linefreq.  Example  frequency = localnode.linefreq  Reads line frequency setting.  Also see  None  "},{"id":297,"title":"localnode.model","url":"15013.htm","text":"This attribute stores the model number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  model = localnode.model  model  The model number of the instrument  Example  print(localnode.model)  Outputs the model number of the local node. For example:  <CT2470_only_start_***Set CT2470 variable****>2470 <CT2470_only_end_***Set CT2470 variable****>3700A   Also see  localnode.serialno  "},{"id":298,"title":"localnode.password","url":"15014.htm","text":"This attribute stores the remote access password.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (W)  Yes  LAN reset  Nonvolatile memory  \"admin\"  Usage  localnode.password = \"password\"  password  A string that contains the remote interface password, up to 255 characters  Details  This write-only attribute stores the password that is set for any remote interface. When password usage is enabled (localnode.passwordmode), you must supply a password to change the configuration or to control an instrument from a remote command interface.  The instrument continues to use the old password for all interactions until the command to change it executes. When changing the password, give the instrument time to execute the command before attempting to use the new password.  You can retrieve the password from the front panel through MENU > LAN > STATUS > PASSWORD.  You can reset the password by resetting the LAN from the front panel or by sending the lan.reset() command.  When using this command from a remote node, localnode should be replaced with the node reference, for example, node[5].password.  Example  localnode.password = \"N3wpa55w0rd\"  Changes the remote interface password to N3wpa55w0rd.  Also see  lan.reset()  localnode.passwordmode  "},{"id":299,"title":"localnode.passwordmode","url":"15015.htm","text":"This attribute stores the password enable mode for remote access to the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  1 (localnode.PASSWORD_WEB)  Usage  mode = localnode.passwordmode  localnode.passwordmode = mode  mode  The remote password enable mode  Details  This attribute controls if and where remote access passwords are required. Set this attribute to one of the values below to enable password checking:  localnode.PASSWORD_NONE or 0: Disable passwords everywhere  localnode.PASSWORD_WEB or 1: Use passwords on the web interface only  localnode.PASSWORD_LAN or 2: Use passwords on the web interface and all LAN interfaces  localnode.PASSWORD_ALL or 3: Use passwords on the web interface and all remote command interfaces  When using this command from a remote node, replace localnode with the node reference, for example node[5].passwordmode.  If you enable password mode, you must also assign a password.  Example  mode = localnode.PASSWORD_WEB  localnode.passwordmode = mode  localnode.password = \"SMU1234\"  Sets value of mode to PASSWORD_WEB.  Allows use of passwords on the web interface only.  Set the password to SMU1234.  Also see  localnode.password  "},{"id":300,"title":"localnode.prompts","url":"15016.htm","text":"This attribute determines if the instrument generates prompts in response to command messages.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Power cycle  Not saved  0 (disabled)  Usage  prompting = localnode.prompts  localnode.prompts = prompting  prompting  Prompting mode:  Do not generate prompts: 0  Generate prompts: 1  Details  When the prompting mode is enabled, the instrument generates prompts when the instrument is ready to take another command. Because the prompt is not generated until the previous command completes, enabling prompts provides handshaking with the instrument to prevent buffer overruns.  When prompting is enabled, the instrument might generate the following prompts:  TSP>. The standard prompt, which indicates that the previous command completed normally.  TSP?. The prompt that is issued if there are unread entries in the error queue when the prompt is issued. Like the TSP> prompt, it indicates that processing of the command is complete. It does not mean the previous command generated an error, only that there were still errors in the queue when the command processing was complete.  >>>>. The continuation prompt, which occurs when downloading scripts. When downloading scripts, many command messages must be sent as a group. The continuation prompt indicates that the instrument is expecting more messages as part of the present command.  Commands do not generate prompts. The instrument generates prompts in response to command completion.  Prompts are enabled or disabled only for the remote interface that is active when you send the command. For example, if you enable prompts when the LAN connection is active, they are not enabled for a subsequent USB connection.  @Do not disable prompting when using Test Script Builder. Test Script Builder requires prompts and sets the prompting mode automatically. If you disable prompting, the instrument stops responding when you communicate using Test Script Builder because it is waiting for a common complete prompt from Test Script Builder.  Example  localnode.prompts = 1  Enable prompting.  Also see  localnode.prompts4882  localnode.showerrors  tsplink.reset()  "},{"id":301,"title":"localnode.prompts4882","url":"15017.htm","text":"This attribute enables and disables the generation of prompts for IEEE Std 488.2 common commands.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Power cycle  Not saved  1 (enabled)  Usage  prompting = localnode.prompts4882  localnode.prompts4882 = prompting  prompting  IEEE Std 488.2 prompting mode:  Disable prompting: 0  Enable prompting: 1  Details  When this attribute is enabled, the IEEE Std 488.2 common commands generate prompts if prompting is enabled with the localnode.prompts attribute. If localnode.prompts4882 is enabled, limit the number of *trg commands sent to a running script to 50 regardless of the setting of the localnode.prompts attribute.  When this attribute is disabled, IEEE Std 488.2 common commands do not generate prompts. When using the *trg command with a script that executes trigger.wait() repeatedly, disable prompting to avoid problems associated with the command interface input queue filling.  Example  localnode.prompts4882 = 0  Disables IEEE Std 488.2 common command prompting.  Also see  localnode.prompts  "},{"id":302,"title":"localnode.reset()","url":"16978.htm","text":"This function resets the local node instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  localnode.reset()  Details  If you want to reset a specific instrument or a subordinate node, use the node[X].reset() command.  A local node reset includes a channel.reset(\"allslots\"), dmm.reset(\"all\") and a scan.reset(). In addition:  Other settings are restored to factory default settings  Existing channel patterns and DMM configurations are deleted  All channels and backplane relays are opened  The dmm function is \"dcvolts\"  User-created reading buffers are deleted  A localnode.reset() is different than a reset() because reset() resets the entire system.   When using this command from a remote node, localnode should be replaced with the node reference, for example node[5].reset().  Example  localnode.reset()  Resets the local node.  Also see  channel.reset()  dmm.reset()  reset()  scan.reset()  "},{"id":303,"title":"localnode.revision","url":"15018.htm","text":"This attribute stores the firmware revision level.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  revision = localnode.revision  revision  Firmware revision level  Details  This attribute indicates the revision number of the firmware that is presently running in the instrument.  When using this command from a remote node, replace localnode with the node reference. For example, node[5].revision.  Example  print(localnode.revision)  Outputs the present revision level.  Sample output:  01.50b  Also see  localnode.description  localnode.model  localnode.serialno  "},{"id":304,"title":"localnode.serialno","url":"15019.htm","text":"This attribute stores the serial number of the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  serialno = localnode.serialno  serialno  The serial number of the instrument  Details  This indicates the instrument serial number.  Example  display.clear()  display.settext(localnode.serialno)  Clears the instrument display.  Places the serial number of the instrument on the top line of its display.  Also see  localnode.description  localnode.model  localnode.revision  "},{"id":305,"title":"localnode.showerrors","url":"15022.htm","text":"This attribute sets whether or not the instrument automatically sends generated errors.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Power cycle  Not saved  0 (disabled)  Usage  errorMode = localnode.showerrors  localnode.showerrors = errorMode  errorMode  Show error setting:  Show errors: 1  Do not show errors: 0  Details  If this attribute is set to 1, the instrument automatically sends any generated errors stored in the error queue, and then clears the queue. Errors are processed after executing a command message (just before issuing a prompt if prompts are enabled).  If this attribute is set to 0, errors are left in the error queue and must be explicitly read or cleared.  When using this command from a remote node, replace localnode with the node reference, for example, node[5].showerrors.  Example  localnode.showerrors = 1  Enables sending of generated errors.  Also see  localnode.prompts  "},{"id":306,"title":"makegetter()","url":"15041.htm","text":"This function creates a function to get the value of an attribute.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  getter = makegetter(table, \"attributeName\")  getter  The return value  table  Read&#8209;only table where the attribute is located  attributeName  A string representing the name of the attribute  Details  This function is useful for aliasing attributes to improve execution speed. Calling the function created with makegetter() executes more quickly than accessing the attribute directly.  Creating a getter function is only useful if it is going to be called several times. Otherwise, the overhead of creating the getter function outweighs the overhead of accessing the attribute directly.  Example  getrange = makegetter(dmm, \"range\")  -- (intervening code)  r = getrange()  Create a getter function called getrange.  When getrange() is called, it returns the value of dmm.range and assigns it to the variable r.   Also see  makesetter()  "},{"id":307,"title":"makesetter()","url":"15042.htm","text":"This function creates a function that, when called, sets the value of an attribute.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  setter = makesetter(table, \"attributeName\")  setter  Function that sets the value of the attribute  table  Read-only table where the attribute is located  attributeName  The string name of the attribute  Details  This function is useful for aliasing attributes to improve execution speed. Calling the setter function execute more quickly than accessing the attribute directly.  Creating a setter function is only useful if it is going to be called several times. If you are not calling the setter function several times, it is more efficient to access the attribute directly.   Example  setrange = makesetter(dmm, \"range\")  setrange(5)  Use setrange with a value of 5 to set dmm.range for the currently selected function.  Also see  makegetter()  "},{"id":308,"title":"memory.available()","url":"15045.htm","text":"This function reads and returns the amount of memory that is available in the instrument overall for storing user scripts and channel patterns and for user-defined DMM configurations.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  memoryAvailable = memory.available()  memoryAvailable  Comma-delimited string with percentages for available memory; the format is systemMemory, scriptMemory, patternMemory, configurationMemory, where:  systemMemory: The percentage of memory available in the instrument  scriptMemory: The percentage of memory available in the instrument to store user scripts  patternMemory: The percentage of memory available in the instrument to store channel patterns  configurationMemory: The percentage of memory available to store DMM configurations  Details  Use this function to view the available memory in the overall instrument as well as the memory available for storing user scripts, channel patterns, and user DMM configurations.  The response to this function is a single string that returns the overall instrument memory available, script memory available, channel pattern memory available, and DMM configuration memory available as comma-delimited percentages.  Example: Available memory  memoryAvailable = memory.available()  print(memoryAvailable)  Reads and returns the amount of memory available in the instrument.  Output:  51.56, 92.84, 100.00, 100.00  You can also use:  print(memory.available())  Example: After recalling a setup  setup.recall(1)  print(memory.available())  Reads and returns the amount of memory available in the instrument after a setup is recalled.  Output:  11.13, 92.84, 0.16, 97.03  Example: Used and available memory  print(\"Memory used:\", memory.used())  print(\"Memory available: \", memory.available())   Reads and returns the amount memory used and memory available percentages.  Output:  Memory used: 69.14, 0.16, 12.74,  1.04  Memory available: 30.86, 99.84, 87.26, 98.96  Also see  memory.used()  "},{"id":309,"title":"memory.used()","url":"15046.htm","text":"This function reports the amount of memory used in the instrument overall and for user scripts, storing channel patterns, and storing user DMM configurations.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  memoryUsed = memory.used()  memoryUsed  A comma-delimited string with percentages for used memory; the format is systemMemory, scriptMemory, patternMemory, configurationMemory, where:  systemMemory: The percentage of memory used in the instrument  scriptMemory: The percentage of memory used in the instrument to store user scripts  patternMemory: The percentage of memory used in the instrument to store channel patterns  configurationMemory: The percentage of memory used to store DMM configurations  Details  Use this function to view the used memory in the overall instrument, as well as the memory used for storing user scripts, channel patterns, and user DMM configurations.  The response to this function is a single string that shows the overall instrument memory used, as well as the script memory used, channel pattern memory used, and DMM configuration memory used as comma-delimited percentages.  Example  MemUsed = memory.used()  print(MemUsed)  Reads the memory used in the instrument and returns the percentages.  Output:  69.14, 0.16, 12.74, 1.04  Also see  memory.available()  "},{"id":310,"title":"node[N].execute()","url":"15009.htm","text":"This function starts test scripts on a remote TSP&#8209;Link node.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes (see Details)  Usage  node[N].execute(\"scriptCode\")  N  The node number of this instrument (1 to 63)  scriptCode  A string containing the source code  Details  This command is only applicable to TSP&#8209;Link systems. You can use this command to use the remote master node to run a script on the specified node. This function does not run test scripts on the master node; only on the subordinate node when initiated by the master node.  This function may only be called when the group number of the node is different than the node of the master.  This function does not wait for the script to finish execution.  Example 1  node[2].execute(sourcecode)  Runs script code on node 2. The code is in a string variable called sourcecode.  Example 2  node[3].execute(\"x = 5\")  Runs script code in string constant (x = 5) to set x equal to 5 on node 3.  Example 3  node[32].execute(TestDut.source)  Runs the test script stored in the variable TestDut (previously stored on the master node) on node 32.  Also see  TSP advanced features  tsplink.group  "},{"id":311,"title":"node[N].getglobal()","url":"15010.htm","text":"This function returns the value of a global variable.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  value = node[N].getglobal(\"name\")  value  The value of the variable  N  The node number of this instrument (1 to 64)  name  The global variable name  Details  This function retrieves the value of a global variable from the runtime environment of this node.  Do not use this command to retrieve the value of a global variable from the local node. Instead, access the global variable directly. This command should only be used from a remote master when controlling this instrument over a TSP-Link network.  Example  print(node[5].getglobal(\"test_val\"))  Retrieves and outputs the value of the global variable named test_val from node 5.  Also see  node[N].setglobal()  TSP advanced features  "},{"id":312,"title":"node[N].setglobal()","url":"15020.htm","text":"This function sets the value of a global variable.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  node[N].setglobal(\"name\", value)  N  The node number of this instrument (1 to 64)  name  The global variable name to set  value  The value to assign to the variable  Details  From a remote node, use this function to assign the given value to a global variable.  Do not use this command to create or set the value of a global variable from the local node (set the global variable directly instead). This command should only be used from a remote master when controlling this instrument over a TSP-Link network.  Example  node[3].setglobal(\"x\", 5)  Sets the global variable x on node 3 to the value of 5.  Also see  node[N].getglobal()  TSP advanced features  "},{"id":313,"title":"opc()","url":"15054.htm","text":"This function sets the operation complete status bit when all overlapped commands are completed.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  opc()  Details  This function causes the operation complete bit in the Standard Event Status Register to be set when all previously started local overlapped commands are complete.   Note that each node independently sets its operation complete bits in its own status model. Any nodes that are not actively performing overlapped commands set their bits immediately. All remaining nodes set their own bits as they complete their own overlapped commands.  Example  opc()  waitcomplete()  print(\"1\")  Output:  1  Also see  Status model  waitcomplete()  "},{"id":314,"title":"os.time()","url":"25959.htm","text":"This function generates a time value in UTC time.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  utcTime = os.time()  utcTime = os.time(timespec)  utcTime  Time value in UTC time  timespec  The date and time (year, month, day, hour, and minute)  Details  The timespec is a table using the fields listed in the table below.  year  The year (1970 or later)  month  The month (1 to 12)  day  The day (1 to 31)  hour  The hour (00 to 23)  min  The minute (00 to 59)  sec  The second (00 to 59)  If the time (hour, minute, and second) options are not used, they default to noon for that day. When called without a parameter (the first form), the function returns the current time.  Set the time zone before calling the os.time() function.  Example  systemTime = os.time({year = 2019,         month = 3,         day = 31,         hour = 14,         min = 25})  settime(systemTime)  Sets the date and time to Mar 31, 2019 at&nbsp;2:25&nbsp;pm.  Also see  settime()  settimezone()  "},{"id":315,"title":"print()","url":"17645.htm","text":"This function generates a response message.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  print(value1)  print(value1, value2)  print(value1, ..., valueN)  value1  The first argument to output  value2  The second argument to output  valueN  The last argument to output  ...  One or more values separated with commas  Details  TSP-enabled instruments do not have inherent query commands. Like other scripting environments, the print() command and other related print() commands generate output. The print() command creates one response message.  The output from multiple arguments is separated with a tab character.  Numbers are printed using the format.asciiprecision attribute. If you want use Lua formatting, print the return value from the tostring() function.  Example 1  x = 10  print(x)  Example of an output response message:  10  Note that your output might be different if you set your ASCII precision setting to a different value.  Example 2  x = true  print(tostring(x))  Example of an output response message:  true  Also see  format.asciiprecision  "},{"id":316,"title":"printbuffer()","url":"15057.htm","text":"This function prints data from tables or reading buffer subtables.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  printbuffer(startIndex, endIndex, bufferVar)  printbuffer(startIndex, endIndex, bufferVar, bufferVar2)  printbuffer(startIndex, endIndex, bufferVar, ..., bufferVarN)  startIndex  Beginning index of the buffer to print; this must be more than one and less than endIndex  endIndex  Ending index of the buffer to print; this must be more than startIndex and less than the index of the last entry in the tables  bufferVar  Name of first table or reading buffer subtable to print; may be a default buffer (defbuffer1 or defbuffer2) or a user&#8209;defined buffer  bufferVar2  Second table or reading buffer subtable to print; may be a default buffer (defbuffer1 or defbuffer2) or a user&#8209;defined buffer  bufferVarN  The last table or reading buffer subtable to print; may be a default buffer (defbuffer1 or defbuffer2) or a user&#8209;defined buffer  ...  One or more tables or reading buffer subtables separated with commas  Details  If startIndex is set to less than 1 or if endIndex is more than the size of the index, 9.910000e+37 is returned for each value outside the allowed index and an event is generated.  If overlapped commands use the specified reading buffers and the commands are not complete (at least to the specified index), this function outputs data as it becomes available.  When there are outstanding overlapped commands to acquire data, n refers to the index that the last entry in the table has after all the readings have completed.  If you pass a reading buffer instead of a reading buffer subtable, the default subtable for that reading buffer is used.  This command generates a single response message that contains all data.  The output of printbuffer() is affected by the data format selected by format.data. If you set format.data to format.REAL32 or format.REAL64, you have fewer options for buffer elements. With these formats, the only buffer elements available are readings, relativetimestamps, and extravalues. If you request a buffer element that is not permitted for the selected data format, the instrument returns 9.91e37.  You can use the bufferVar attributes that are listed in the following table with the print buffer command. For example, if testData is the buffer, you can use testData.dates attribute to print the date of each reading in the testData buffer.  You can use bufferVar.n to retrieve the number of readings in the specified reading buffer.  Attribute  Description  bufferVar.n  The number of readings in the specified buffer; see bufferVar.n  bufferVar.dates  The dates of readings stored in the reading buffer; see bufferVar.dates  bufferVar.formattedreadings  The stored readings formatted as they appear on the front&#8209;panel display; see bufferVar.formattedreadings  bufferVar.fractionalseconds  The fractional portion of the timestamp (in seconds) of when each reading occurred; see bufferVar.fractionalseconds  bufferVar.readings  The readings stored in a specified reading buffer; see bufferVar.readings  bufferVar.relativetimestamps  The timestamps, in seconds, when each reading occurred relative to the timestamp of reading buffer entry number 1; see bufferVar.relativetimestamps  bufferVar.seconds  The nonfractional seconds portion of the timestamp when the reading was stored in UTC format; see bufferVar.seconds  bufferVar.statuses  The status values of readings in the reading buffer; see bufferVar.statuses  bufferVar.times  The time when the instrument made the readings; see bufferVar.times  bufferVar.timestamps  The timestamps of readings stored in the reading buffer; see bufferVar.timestamps  bufferVar.units  The unit of measure that is stored with readings in the reading buffer; see bufferVar.units  Example 1  reset()  testData = buffer.make(200)  format.data = format.ASCII  format.asciiprecision = 6  trigger.model.load(\"SimpleLoop\", 6, 0, testData)  trigger.model.initiate()  waitcomplete()  printbuffer(1, testData.n, testData.readings, testData.units,<br>   testData.relativetimestamps)  Reset the instrument.  Set the data format and ASCII precision.  Use trigger model SimpleLoop to create a 6-count loop with no delays that stores data in the reading buffer testBuffer.  Start the trigger model, wait for the commands to complete, and output the readings.  Use of testData.n (bufferVar.n) indicates that the instrument should output all readings in the reading buffer. In this example, testBuffer.n equals 6.  Example of output data:   1.10458e-11, Amp DC, 0.00000e+00, 1.19908e-11, Amp DC, 1.01858e-01, 1.19908e-11, Amp DC, 2.03718e-01, 1.20325e-11, Amp DC, 3.05581e-01, 1.20603e-11, Amp DC, 4.07440e-01, 1.20325e-11, Amp DC, 5.09299e-01  Example 2  for x = 1, testData.n do     printbuffer(x,x,testData, testData.units, testData.relativetimestamps)  end  Using the same buffer created in Example 1, output the readings, units and relative timestamps on a separate line for each reading.  1.10458e-11, Amp DC, 0.00000e+00  1.19908e-11, Amp DC, 1.01858e-01  1.19908e-11, Amp DC, 2.03718e-01  1.20325e-11, Amp DC, 3.05581e-01  1.20603e-11, Amp DC, 4.07440e-01  1.20325e-11, Amp DC, 5.09299e-01  Also see  bufferVar.n  bufferVar.readings  format.asciiprecision  format.byteorder  format.data  printnumber()  "},{"id":317,"title":"printnumber()","url":"15058.htm","text":"This function prints numbers using the configured format.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  printnumber(value1)  printnumber(value1, value2)  printnumber(value1, ..., valueN)  value1  First value to print in the configured format  value2  Second value to print in the configured format  valueN  Last value to print in the configured format  ...  One or more values separated with commas  Details  There are multiple ways to use this function, depending on how many numbers are to be printed.  This function prints the given numbers using the data format specified by format.data and format.asciiprecision.  Example  format.asciiprecision = 10  x = 2.54  printnumber(x)  format.asciiprecision = 3  printnumber(x, 2.54321, 3.1)  Configure the ASCII precision to 10 and set x to 2.54.  Read the value of x based on these settings.  Change the ASCII precision to 3.  View how the change affects the output of x and some numbers.  Output:  2.540000000e+00  2.54e+00, 2.54e+00, 3.10e+00  Also see  format.asciiprecision  format.byteorder  format.data  print()  printbuffer()  "},{"id":318,"title":"ptp.domain","url":"20216.htm","text":"This attribute describes the IEEE Std 1588-2008 precision time protocol (PTP) domain.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Never  Nonvolatile memory  0  Usage  value = ptp.domain  ptp.domain = value  value  0 = default domain  1 = alternate domain 1  2 = alternate domain 2  3 = alternate domain 3  4 &#8211; 127 = user-defined domains  128 &#8211; 255 = Reserved  Details  Only instruments in the same domain will interact with each other in the IEEE&#8209;1588 PTP.  Example  ptp.domain=1  print(ptp.domain)  Sets the ptp domain to 1 (alternate domain 1) and prints the result.  Output:  1  Also see  Not applicable  "},{"id":319,"title":"ptp.ds.info","url":"20215.htm","text":"This function is a read-only string that returns the settings of the different data sets (DS) associated with the IEEE&#8209;1588 2008 specification.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  ptp.ds.info  Details  The following data sets are returned:  Current  Default  Parent  Time properties  Port  Foreign master  For more detailed information regarding field information, refer to the IEEE-1588 2008 specification.  Example  print(ptp.ds.info)  Output:  Current DS           Steps removed:  0      Offset from Master:  0.000000000         Mean Path Delay:  0.000000000  Default DS         Number of Ports:  1          Two Step Clock:  T              Priority 1:  128              Priority 2:  128                  Domain:  0          Clock Identity:  12 34 56 FF FE 65 43 21      Clock Qual - Class:  248   Clock Qual - Accuracy:  254   Clock Qual - Variance:  0              Slave Only:  F  Parent DS             Parent Stats:  F    Parent Clock Identify:  12 34 56 FF FE 65 43 21     Parent Port Identify:  0        Parent Offset Var:  65535  Parent Phase Chnge Rate:  2147483647            GM Priority 1:  128            GM Priority 2:  128     GM Clck Qual - Class:  248  GM Clck Qual - Accuracy:  254  GM Clck Qual - Variance:  0        GM Clock Identify:  12 34 56 FF FE 65 43 21  Time Properties DS       Current UTC Offset:  0                  Leap 59:  F                  Leap 61:  F  Current UTC Offset Vald:  T            PTP Timescale:  T           Time Traceable:  F      Frequency Traceable:  F              Time Source:  Internal Oscillator  Port DS           Clock Identify:  12 34 56 FF FE 65 43 21            Port Identify:  1               Port State:  6   Log Mn Delay Req Intrvl: 4     Peer mean Path Delay:  0    Log Announce Interval:  1   Announc Receipt Timeout: 3        Log Sync Interval:  0          Delay Mechanism:  E2E  Log Mn PDelay Rq Intrvl:  0           Version Number:  2  Foreign Master DS 1        Announce Messages:  2   Frgn Mstr Clock Idntfy:  00 60 1A FF FE 01 54 29    Frgn Mstr Port Idntfy:  1  Also see  Not applicable  "},{"id":320,"title":"ptp.enable","url":"16215.htm","text":"This attribute enables or disables the precision time protocol (PTP) described in IEEE&#8209;1588 on the Series 3700A.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  0 (ptp.OFF)  Usage  state = ptp.enable  ptp.enable = state  state  Disable the ptp protocol: ptp.OFF or 0  Enable the ptp protocol: ptp.ON or 1  Details  From the factory, this attribute is disabled (ptp.OFF). After setting this attribute, it is saved in nonvolatile memory, and that setting value is recalled the next time the instrument is powered on.  Example  ptp.enable=1  print(ptp.enable)  Output:  1.000000000e+00  Also see  Not applicable  "},{"id":321,"title":"ptp.portstate","url":"16216.htm","text":"This attribute is a read-only value that indicates the state of the IEEE&#8209;1588 precision time protocol (PTP).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Never  Not applicable  Not applicable  Usage  state = ptp.portstate  state  ptp.INITIALIZING (0)  ptp.FAULTY (1)  ptp.DISABLE (2)  ptp.LISTENING (3)  ptp.PRE_MASTER (4)  ptp.MASTER (5)  ptp.PASSIVE (6)  ptp.UNCALIBRATED (7)  ptp.SLAVE (8)  ptp.UNKNOWN (9)  Example  print(ptp.portstate)  Output (this output indicates that PTP is disabled):  2.000000000e+00  Also see  ptp.enable  "},{"id":322,"title":"ptp.slavepreferred","url":"20217.htm","text":"This attribute describes whether you prefer to have the instrument be a subordinate clock or not.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Never  Nonvolatile memory  false (disabled)  Usage  value = ptp.slavepreferred  ptp.slavepreferred = value  value  0: Disabled.  1: Enabled.  Details  From the factory, this attribute is 1. After you set this attribute, it is saved in nonvolatile memory. That setting is recalled the next time the instrument is powered up.  Example  ptp.slavepreferred = 1  print(ptp.slavepreferred)  Set the instrument to be a subordinate clock. Check to see if the instrument is a subordinate clock.  Output:  1  Also see  Not applicable  "},{"id":323,"title":"ptp.time()","url":"16221.htm","text":"This function is a read-only string that returns the PTP time in seconds and fractional seconds.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  ptp.time()  Example  sec,fraction=ptp.time()  print(sec+fraction)  Output:  1.306440045e+09  Also see  Not applicable  "},{"id":324,"title":"ptp.utcoffset","url":"16222.htm","text":"This attribute describes the offset, in seconds, between UTC and PTP.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  See Details  Nonvolatile memory  See Details  Usage  value = ptp.utcoffset  ptp.utcoffset = value  value  The offset in seconds  Details  If the instrument is a subordinate, the ptp.utcoffset value is from the master. If the value is from the master, the setting is overwritten on the next synchronization. The Series 3700A does not keep track of this value through a power cycle (that is, it defaults to 0 if the 3700 is the master). The ptp.utcoffset is only nonzero if the Series 3700A communicates to a master clock that is aware of the difference between PTP and UTC time.  You can only write to this command if the Series 3700A is the master. If the Series 3700A is not the master, an error is generated when you try to write to the Series 3700A.  The Series 3700A is not time-zone aware, so UTC time is presented as the local time.  UTC Time = PTP Time &#8211; UTC Offset  Example  ptp.utcoffset=33  print(ptp.utcoffset)  Sets the UTC offset to 33 seconds.  Output:  3.300000000e+01  Also see  Not applicable  "},{"id":325,"title":"reset()","url":"13933.htm","text":"This function resets commands to their default settings.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  reset()  reset(system)  system  What to reset:  true: If the node is the master, the entire system is reset (default)  false: Only the local group is reset  Details  The reset() command in its simplest form resets the entire TSP&#8209;enabled system, including the controlling node and all subordinate nodes.  If you want to reset a specific instrument, use either the localnode.reset() or node[X].reset() command. Use the localnode.reset() command for the local instrument. Use the node[X].reset() command to reset an instrument on a subordinate node.  You can only reset the entire system using reset(true) if the node is the master. If the node is not the master node, executing this command generates an error.  Example  reset(true)  If the node is the master node, the entire system is reset; if the node is not the master node, an error is generated.  Also see  localnode.reset()  "},{"id":326,"title":"scan.abort()","url":"16240.htm","text":"This function aborts a running background scan.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.abort()  Details  If no scan is running, the call to this function is ignored.  @When a scan is aborted, the channels remain in the opened or closed states that they were in when the scan was aborted.  Example  scan.background()  scan.abort()  Starts background scan, and then aborts the scan.  Also see  scan.background()  Scanning and triggering  "},{"id":327,"title":"scan.add()","url":"16890.htm","text":"This function adds channels to the scan list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.add(\"channelList\")  scan.add(\"channelList\", \"dmmConfig\")  scan.add(\"channelList\", width)  channelList  String specifying channels to add using normal channel list syntax  dmmConfig  String listing the DMM configuration to use with items in channelList  width  Value that specifies the width of the channel read to use with items in channelList  Details  Use this function to add channels and channel patterns to the present scan list. If the scan list does not exist, it also creates a scan list. See scan.create() for information about creating a scan list.  Channels and channel patterns added using this command are added to the end of the present list (appended) in the same order as specified in the channel list. In addition, the added channels are scanned in the order specified in channelList. Specifying multiple channels adds multiple steps to the scan.  The configuration of each channel or channel pattern, which is associated with dmm.setconfig() and dmm.getconfig(), is used unless the optional dmmConfig parameter is specified. Specifying the dmmConfig parameter temporarily overrides the configuration associated with the channel or channel pattern. Specifying dmmConfig does not modify the assigned configuration of a channel or channel pattern.  The scan list of channels (or channel patterns) is not updated if an error occurs during processing of the function. However, steps that were already added to the scan list are updated even if an error is detected, because each channel is added as a separate step when you add multiple channels to channelList.  For digital I/O or totalizer channels, each created scan step instructs the scan to read the selected channel and then save the value into the specified reading buffer. If you do not specify a reading buffer, the channel is read but the value is not saved.  The width parameter is valid for digital I/O type channels. Widths of 1, 2, 3, or 4 are supported. If specified, the scan can read up to four consecutive channels simultaneously, and then saves the resulting value into the specified reading buffer.  DAC channels are not supported.  Measurement timestamps may vary from channel read timestamps because of the way different channel types generate reading buffer timestamps.  Example 1  scan.create(\"3001:3010\", \"DCV\")  For this example, assume DCV is a previously defined user configuration for dc volts. Clears the old scan list and creates a new scan list with each channel (1 to 10 on slot 3) using DCV as the overriding DMM configuration.  Example 2  scan.add(\"3001:3010\", \"2wire\")  For this example, assume 2wire is a previously defined user configuration for 2-wire ohms. Uses 2wire for all 10 channels and adds them to the end of the existing scan list.  Example 3  scan.create(\"\")  Clears the old scan list and creates a new empty scan list.  Example 4  for chan = 3001, 3010 do     scan.add(\"\" .. chan, \"DCV\")     scan.add(\"\" .. chan, \"2wire\")  end  For this example, assume DCV is a previously defined user dc volts configuration and 2wire is a previously defined user 2-wire ohms configuration.   Adds channels 3001 through 3010 to the end of the existing scan list. This loops through the channels twice, adding channels to the scan list twice. The first time, it adds DCV for a channel. The second time, it adds 2wire for that channel. The first parameter (\"\" .. chan) converts the chan number to a string.  Also see  scan.create()  dmm.getconfig()  dmm.setconfig()  Reading buffers  Scanning and triggering  "},{"id":328,"title":"scan.addimagestep()","url":"16633.htm","text":"This function allows you to include multiple channels in a single scan step.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.addimagestep(\"channelList\")  scan.addimagestep(\"channelList\", \"dmmConfig\")  channelList  String specifying a list of channels  dmmConfig  String specifying a DMM configuration  Details  This function adds a list of channels to be closed simultaneously in a single step of a scan. An optional DMM configuration can be added to force the scan to take a measurement during the same step.  This function is an advanced command; the channelList parameter must specify appropriate relays to support the requested DMM configuration, or an invalid measurement will result.  Unlike scan.add(), the paired channels and backplanes necessary for measurement are not automatically added to the step. Use the channel.setpole() command to indicate if the paired channel should be added or not. Backplanes assigned to channels by the channel.setbackplane() command are not added to the image step automatically. For example, if a measurement is taken on a 4-wire ohms configuration without designating 4-pole with the channel.setpole() command, the corresponding paired channels and backplanes will not be added, and the specified dmmConfig will not cause additional relay closures as it normally would.  If you have changed the pole setting on any of the channels in the list (using channel.setpole()), an additional paired channel is added or removed, as appropriate. For example, to ensure that the proper channels close to enable a 4-wire measurement, set the pole setting in addition to using the 4-wire ohms DMM configuration.  When a DMM configuration (other than \"nofunction\") is specified, the instrument will take the appropriate measurement based on the function set in the configuration; if no DMM configuration is specified with the command, no measurement will be taken.  Example  scan.addimagestep(\"1001\", \"dcvolts\")  Adds a single step that closes channel 1001 and makes a dc voltage measurement. Note that the voltage measurement is inaccurate if this is the only step in the scan because the backplane channels are not closed.  scan.addimagestep(\"1001, 1911\", \"dcvolts\")  Adds a single step that closes channels 1001 and 1911, and then makes a dc voltage measurement.  channel.setpole(\"1001\", 4)  scan.addimagestep(\"1001, 1911\", \"dcvolts\")  Set channel 1001 to 4-pole operation.  Adds a single step that closes channels 1001, 1031, and 1911, and then makes a dc voltage measurement.  scan.addimagestep(\"1101, 2202, 1911\", \"dcvolts\")   scan.addimagestep(\"1102, 2202, 1911\", \"dcvolts\")   scan.addimagestep (\"1103, 2202, 1911\",\"dcvolts\")  Adds three steps with the following actions:  Closes channels 1101, 2202, and 1911, and then makes a dc voltage measurement.   Opens channel 1101, closes 1102 and maintains 1911 and 2202 closed, and then makes a dc voltage&nbsp;measurement.   Opens channel 1102, closes 1103 and maintains 1911 and 2202 closed, and then makes a dc voltage&nbsp;measurement.  Also see  channel.setbackplane()  channel.setpole()  scan.add()  Scanning and triggering  "},{"id":329,"title":"scan.addwrite()","url":"16242.htm","text":"This function writes a specified value to a channel at the added step in the scan.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.addwrite(\"channelList\", writeValue)  scan.addwrite(\"channelList\", writeValue, width)  channelList  String specifying channels to add using normal channel list syntax  writeValue  The value to write to the channel for this scan step  width  Specifies the width of the channel write to use with items in channelList     Details  This command is similar to issuing channel.write() at the scan step. Specifying multiple channels in channelList causes multiple steps to be added to the scan.   For digital I/O channels, only a width of 1, 2, 3, or 4 is supported. Any information (bits) greater than the specified width are ignored. Values written to inputs are ignored. If no specified channel is set for output, an error is generated. If a width crosses channels, only the channels set to output are affected.  This is not available for backplane and switch channels.  For DAC channels, if the channel mode is changed after the scan is created, the scan is rebuilt. If the write value is no longer compatible with the new mode, an error is generated and the scan becomes invalid.  Example  scan.addwrite(\"6001, 6003, 6005\", 21845, 2)  Assume a 3750 in slot 6. Add to existing scan list channels 1, 3 and 5 on slot 6 to write a 16-bit hex value of hexadecimal 5555 (decimal 21845).  Also see  Scanning and triggering  "},{"id":330,"title":"scan.background()","url":"16891.htm","text":"This function starts a scan and runs the scan in the background.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  state, scanCount, stepCount = scan.background()  state, scanCount, stepCount, reading = scan.background()  state, scanCount, stepCount, reading = scan.background(bufferVar)  state  The result of scanning:  scan.EMPTY or 0  scan.BUILDING or 1  scan.RUNNING or 2  scan.ABORTED or 3  scan.FAILED or 4  scan.FAILED_INIT or 5  scan.SUCCESS or 6  scanCount  This is current number scans completed  stepCount  This is current number steps completed  reading  If measurements are taken during the scan, this parameter contains the last scan reading completed  bufferVar  The reading buffer used during scanning to store the readings; if a buffer is not specified, no readings are stored during the scan  Details  You can also use this function to specify the scanning reading buffer. This reading buffer, if specified, stores the readings and accompanying attributes as specified for the scan. An error is generated if the reading buffer does not exist or the parameter is not a reading buffer.  Before using this command, use scan.create() and scan.add() or scan.addimagestep() to set up a scan list.  When the scan is run in the background, you must use the scan.state() function to check the status of the scan.  Example  scan.background(rbbuff1)  Runs a scan in the background and stores readings in a buffer named rbbuff1.  Also see  scan.add()  scan.create()  scan.execute()  scan.list()  scan.state()  Scanning and triggering  "},{"id":331,"title":"scan.bypass","url":"16973.htm","text":"This attribute indicates whether the first channel of the scan waits for the channel stimulus event to be satisfied before closing.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Scan reset<br>Recall setup  Create configuration script<br>Save setup  1 (scan.ON)  Usage  bypass = scan.bypass  scan.bypass = bypass  bypass  Enable or disable the bypass:  scan.OFF or 0: Disabled  scan.ON or 1: Enabled  Details  When bypass is set to on and the scan.trigger.arm.stimulus is set to a nonzero value, the first channel of the scan closes (the scan.trigger.channel.stimulus setting is ignored).  For other channels (other than the first), the channel stimulus must be satisfied before the channel action takes place.  When bypass is set to off, every channel (including the first) must satisfy the scan.trigger.channel.stimulus setting before the channel action occurs for that step.  Example  scan.bypass = scan.OFF  print(scan.bypass)  Disables the bypass option for scanning and displays the present bypass state.  Output:  0.000000000e+000  Also see  scan.trigger.arm.stimulus  scan.trigger.channel.stimulus  Scanning and triggering  "},{"id":332,"title":"scan.create()","url":"16892.htm","text":"This function deletes the existing scan list and creates a new list of channels and channel patterns to scan.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.create(channelList)  scan.create(channelList, dmmConfig)  channelList  String specifying channels to add  dmmConfig  The DMM configuration to use with items in the channelList  Details  The existing scan list is lost after calling this function.  The items in the channel list are scanned in the order listed.  Each channel or channel pattern configuration is used unless the optional dmmConfig parameter is specified (see dmm.setconfig() and dmm.getconfig()). Specifying the dmmConfig parameter temporarily overrides the configuration associated with the channel or channel pattern. Specifying dmmConfig does not modify the assigned configuration of a channel or channel pattern.  If a forbidden channel is included in a range of channels or slot parameter (such as slot 1), the forbidden channel is ignored and no error is generated. If a forbidden channel is individually specified in the channel list, an error is generated.  If an error occurs, the scan list of channels or channel patterns is cleared, even though no new scan list is created.  The function scan.reset() clears the list. To clear the scan list without performing a scan reset, send an empty string for the channelList parameter.  Example 1  scan.create(\"1001:1010\")  Replaces the active scan list with an empty scan list.  Adds channels 1 through 10 on slot 1. Uses the existing DMM configuration (dmm.setconfig()).  Example 2  scan.create()  for chan = 1001, 1010 do     scan.add(\"\" .. chan)  end  Replaces the active scan list with an empty scan list.  Loops through channels 1001 to 1010, and then adds 10 channels to the scan list. The parameter (\"\"&nbsp;..&nbsp;chan) converts the channel number to a string.  The scan list now has, in order, channels 1 through 10 on slot 1.  Uses the existing DMM configuration (dmm.setconfig()).  Example 3  scan.create(\"3001:3010\", \"testDCV\")  For this example, assume testDCV is a previously defined user DC volts configuration.  Clears the old scan list and creates a new scan list with each channel (1 to 10 on slot&nbsp;3).  Each channel uses the DMM configuration associated with testDCV.  Example 4  scan.create(\"\")  for chan = 3001, 3010 do     scan.add(\"\" .. chan, \"testDCV\")     scan.add(\"\" .. chan, \"test2wire\")  end  For this example, assume testDCV is a previously defined user DC volts configuration, and test2wire is a previously defined user 2-wire ohm configuration.  This loops through the channels, adding channels to the scan list. The first time, it adds \"testDCV\" for a channel. The second time, it adds \"test2wire\" for that channel. The first parameter (\"\" .. chan) converts the chan number to a string.  Clears the old scan list and creates a new scan list.   Loops through channels 3001 to 3010.  Adds channels 3001 through 3010 to the end of the existing scan list.  Also see  dmm.getconfig()  dmm.setconfig()  scan.add()  scan.reset()  Scanning and triggering  "},{"id":333,"title":"scan.execute()","url":"16893.htm","text":"This function starts the scan immediately in the foreground with a configured scan list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  state, scanCount, stepCount, reading = scan.execute()  state, scanCount, stepCount, reading = scan.execute(bufferVar)  state  The result of scanning:  scan.EMPTY or 0  scan.BUILDING or 1  scan.RUNNING or 2  scan.ABORTED or 3  scan.FAILED or 4  scan.FAILED_INIT or 5  scan.SUCCESS or 6  scanCount  The present number of scans completed  stepCount  The present number of steps completed  reading  If measurements are taken during the scan, this parameter contains the last scan reading completed  bufferVar  A reading buffer used during scanning to store the readings; if a buffer is not specified, no readings are stored during the scan  Details  In addition to starting and running the scan in immediate mode (not in the background), you can use this function to specify the scanning reading buffer. This reading buffer stores the readings and accompanying attributes as specified for the scan. An error is generated if the reading buffer does not exist or if the parameter is not a reading buffer.  Before using this command, use scan.create() and scan.add() or scan.addimagestep() to set up a scan list.  Execution runs until the scan is complete or until the abort command is sent.   Because this function waits for the scan to complete, the scan.state() function cannot be used to see the current status of scanning.  Example  scan.execute(rbBuff1)  Runs a scan immediately and stores the readings in a reading buffer named rbbuff1.  Also see  scan.add()  scan.background()  scan.create()  scan.list()  scan.state()  Scanning and triggering  "},{"id":334,"title":"scan.list()","url":"16894.htm","text":"This function queries the active scan list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Instrument reset<br>Channel reset<br>Scan reset<br>Recall setup<br>Change of channel or scan setting  Create configuration script<br>Save setup  Empty list  Usage  scanList = scan.list()  scanList  A string that lists the existing scan step information  Details  When you change a channel or scan attribute for an existing scan list item, the scan list is recreated based on this change. If the scan list cannot be rebuilt, the scan list is lost.  To avoid unintentional changes to an existing scan list, configure channel and scan settings before adding or creating a scan or step using the commands scan.add(), scan.addimagestep(), and scan.create().  If the scan list is empty, the string \"Empty Scan\" is returned. Otherwise, the string lists each step in the scan along with its information for step, open, measure configuration, count, and close.  Example  reset()  dmm.setconfig(\"2020, 2021\", \"dcvolts\")  dmm.nplc = 0.5  dmm.range = 10  dmm.configure.set(\"DCVSlot2\")  dmm.setconfig(\"2016,2017\", \"DCVSlot2\")  scan.create(\"2007,2008,2020,2021,2016,2017\")  print(scan.list())  Assume a 3721 in slot 2.  Configure channels 20 and 21 for DC volts on slot 2.  Change the DMM settings for NPLC and range and save those DC volt settings as \"DCVSlot2\".  Configure channels 16 and 17 for \"DCVSlot2\" on slot 2.  Populate the scan list with the function scan.create(\"2007,2008,2020,2021,2016,2017\"), then initiate the scan list to be output.  Outputs the existing scan list. For example, an existing scan list may appear as follows:  Init) OPEN...  1) STEP: 2007  CLOSE: 2007  MEASURE: nofunction COUNT: 1  2) STEP: 2008  OPEN: 2007  CLOSE: 2008  MEASURE: nofunction COUNT: 1  3) STEP: 2020  OPEN: 2008  CLOSE: 2020 2911  MEASURE: dcvolts COUNT: 1  4) STEP: 2021  OPEN: 2020 2911  CLOSE: 2021 2921  MEASURE: dcvolts COUNT: 1  5) STEP: 2016  OPEN: 2021 2921  CLOSE: 2016 2911  MEASURE: DCVSlot2 COUNT: 1  6) STEP: 2017  OPEN: 2016  CLOSE: 2017  MEASURE: DCVSlot2 COUNT: 1  Also see  scan.add()  scan.addimagestep()  scan.create()  Scanning and triggering  "},{"id":335,"title":"scan.measurecount","url":"16248.htm","text":"This attribute sets the number of iterations performed when a scanning measurement is requested.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Scan reset<br>Recall setup  Create configuration script<br>Save setup  1  Usage  count = scan.measurecount  scan.measurecount = count  count  The count value being used or read; valid range is 1 to 450000  Details  Use this attribute to indicate how many measurements to make on a step when measurements are needed. This sets the measurement count in the trigger model. During a scan, the Series 3700A iterates through the sequence event detector and measurement action of the trigger model count times. After performing count iterations, the Series 3700A returns to check the scan count.  This must be set before the scan is started. Once set, it applies to all scan steps in the list, including scan steps that exist in the list and any that are added before the scan is started.  All steps take the same number of measurements. When taking multiple measurements, the measurements may be taken as quickly as possible based on the configuration (scan.trigger.measure.stimulus = 0) or they may be paced by a trigger (scan.trigger.measure.stimulus is nonzero).  Example  scan.measurecount = 5  Sets the measurement count to 5.  Also see  scan.create()  Scanning and triggering  "},{"id":336,"title":"scan.mode","url":"16895.htm","text":"This attribute sets the relay action when the scan starts.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Scan reset<br>Recall setup  Create configuration script<br>Save setup  0 (scan.MODE_OPEN_ALL)  Usage  scanModeSetting = scan.mode  scan.mode = scanModeSetting  scanModeSetting  The present scan mode setting. Set to one of the following values:  scan.MODE_OPEN_ALL or 0  scan.MODE_OPEN_SELECTIVE or 1: See Details  scan.MODE_FIXED_ABR or 2: See Details  Details  When this attribute is set to open all, channels on all slots are opened before a scan starts.   When this attribute is set to scan.MODE_OPEN_SELECTIVE, an intelligent open is performed. Assuming all steps being scanned have a function value of \"nofunction\" with their DMM configuration then:  All channels and analog backplane relays used in scanning are opened  Closed channels and backplane relays not used in scanning remain closed during the scan  If any step has a DMM configuration with a function set to any other value than \"nofunction\":  Analog backplane relays 1 and 2 are opened on all slots  Any commonside ohms backplane relays are opened on all slots  Any amp channels are opened on all slots  All channels and backplane relays involved in scanning are opened  If a closed channel or backplane relay is not involved in scanning, it remains closed during the scan  All channels are opened on any bank that contains backplane relays that are involved in scanning  When this attribute is set to scan.MODE_FIXED_ABR, it is equivalent to setting MODE_OPEN_SELECTIVE, except:  All required backplane relays are closed before the start of the scan  These backplane relays are not opened or closed during the scan  These backplane relays do not open at the end of scan  Example  scan.mode = scan.MODE_OPEN_SELECTIVE  Sets the scan mode setting to open channels that are used in the scan.  Also see  scan.reset()  Scanning and triggering  "},{"id":337,"title":"scan.nobufferbackground()","url":"16250.htm","text":"This function starts a scan in background mode and specifies that no reading buffer is used during scanning.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  state, scancount, stepcount = scan.nobufferbackground()  state  The result of scanning:  scan.EMPTY or 0  scan.BUILDING or 1  scan.RUNNING or 2  scan.ABORTED or 3  scan.FAILED or 4  scan.FAILED_INIT or 5  scan.SUCCESS or 6  scancount  The present number of scans completed  stepcount  The present number of steps completed  Details  Before using this command, use scan.create(), scan.add(), and scan.addimagestep() to set up scan elements. If a reading buffer is specified, an error is generated.  To view the scan status, use scan.state().  To run a scan in the background with a reading buffer, see scan.background().  Example  scan.nobufferbackground()  Run the scan in the background with no reading buffer.  Also see  scan.add()  scan.background()  scan.create()  scan.execute()  scan.list()  scan.nobufferexecute()  scan.state()  Scanning and triggering  "},{"id":338,"title":"scan.nobufferexecute()","url":"16251.htm","text":"This function starts a scan immediately and specifies that no reading buffer is used during scanning.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  state, scanCount, stepCount = scan.nobufferbackground()  state  The result of scanning:  scan.EMPTY or 0  scan.BUILDING or 1  scan.RUNNING or 2  scan.ABORTED or 3  scan.FAILED or 4  scan.FAILED_INIT or 5  scan.SUCCESS or 6  scanCount  The present number of scans that have completed  stepCount  The present number of steps have completed  Details  Before using this command, use scan.create(), scan.add(), and scan.addimagestep() to set up scan elements. If a reading buffer is specified, an error is generated.  The command continues execution until scanning completes or is aborted by the user.  To run a scan immediately with a reading buffer, see scan.execute().  Example  scan.nobufferexecute()  Runs the scan immediately with no reading buffer.  Also see  scan.add()  scan.background()  scan.create()  scan.execute()  scan.list()  scan.nobufferbackground()  scan.state()  Scanning and triggering  "},{"id":339,"title":"scan.reset()","url":"16896.htm","text":"This function resets the trigger model and scan list settings to their factory default settings.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.reset()  Details  When scan.reset() is sent, the trigger model and scan settings that are reset to the factory defaults are:  scan.bypass  scan.measurecount  scan.mode  scan.scancount  scan.trigger.arm.stimulus  scan.trigger.channel.stimulus  scan.trigger.measure.stimulus  scan.trigger.sequence.stimulus  In addition, the scan list is cleared.  @Sending this function only affects the trigger model and scan list settings. To reset all instrument settings to factory default settings, use the reset() command.  Example  scan.reset()  Performs a reset on the trigger model and scan settings.  Also see  channel.reset()  dmm.reset()  reset()  scan.bypass  scan.measurecount  scan.mode  scan.scancount  scan.trigger.arm.stimulus  scan.trigger.channel.stimulus  scan.trigger.measure.stimulus  scan.trigger.sequence.stimulus  Scanning and triggering  "},{"id":340,"title":"scan.scancount","url":"16974.htm","text":"This attribute sets the number of times the scan is repeated.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Scan reset<br>Recall setup  Create configuration script<br>Save setup  1  Usage  scanCount = scan.scancount  scan.scancount = scanCount  scanCount  The scan count value (1 to 2,000,000,000)  Details  The scan count attribute setting indicates how many times the scan list is iterated through before the scan completes.  During a scan, the instrument iterates through the arm layer of the trigger model the specified number of times. After performing the specified number of iterations, the instrument returns to an idle state.  Example  scan.create(\"1001:1009\")  scan.scancount = 100  scan.scaninterval = 1.0 -- delay between scans  Create a scan that includes channels 1 to 9 of slot 1.  Set the scan count to 100.  Set the delay between scans to 1&nbsp;s.  Also see  Scanning and triggering  Trigger model  "},{"id":341,"title":"scan.state()","url":"16254.htm","text":"This function provides the present state of a running background scan.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scanState, scanCount, stepCount, reading = scan.state()  scanState  The present state of the scan running in the background. Possible states include:  scan.EMPTY or 0  scan.BUILDING or 1  scan.RUNNING or 2  scan.ABORTED or 3  scan.FAILED or 4  scan.FAILED_INIT or 5  scan.SUCCESS or 6  scanCount  The number of scans that have completed  stepCount  The number of steps that have completed  reading  If measurements are made during the scan, this parameter contains the last scan reading completed  Details  Returns the state of the present scan, the scan count, and the step count.  The scan count is the number of the present iteration through the scan portion of the trigger model. This number does not increment until the scan begins. Therefore, if the instrument is waiting for an input to trigger a scan start, the scan count represents the previous number of scan iterations. If no scan has begun, the scan count is zero.  The step count is the number of times the scan has completed a pass through the channel action portion of the trigger model. This number does not increment until after the action completes. Therefore, if the instrument is waiting for an input to trigger a channel action, the step count represents the previous step. If no step has yet completed, the step count is zero. If the step count has yet to complete the first step in a subsequent pass through a scan, the scan count represents the last step in the previous scan pass.  Example  scan.background()  scanState, scanCount, stepCount = scan.state()  print(scanState, scanCount, stepCount)  Runs a scan in the background.  Check the present scan state.  View returned values.  Output shows that scan is running:  2.00000e+00  Also see  scan.background()  scan.mode  Scanning and triggering  "},{"id":342,"title":"scan.stepcount","url":"16255.htm","text":"This attribute returns the number of steps in the present scan.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  scanStepCount = scan.stepcount  scanStepCount  The present step count value  Details  This is set by the number of steps in the active scan list. The value of this attribute is initially determined when the scan is created. When you add steps with the scan.create(), scan.addimagestep(), and scan.add() functions, the value of this attribute is updated.  Example  print(scan.stepcount)  Responds with the present step count.  Output assuming there are five steps in the scan list:  5.00000e+00  Also see  scan.add()  scan.addimagestep()  scan.create()  Scanning and triggering  "},{"id":343,"title":"scan.trigger.arm.clear()","url":"16256.htm","text":"This function clears the arm event detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.arm.clear()  Details  This function sets the arm event detector of the trigger model to the undetected state.  Example  scan.trigger.arm.clear()  Clears the arm event detector.  Also see  scan.trigger.arm.set()  scan.trigger.arm.stimulus  Trigger model  Scanning and triggering  "},{"id":344,"title":"scan.trigger.arm.set()","url":"16257.htm","text":"This function sets the arm event detector to the detected state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.arm.set()  Details  This function sets the arm event detector of the trigger model to the detected state.  Example  scan.trigger.arm.set()  Sets the arm event detector to the detected state.  Also see  scan.trigger.arm.clear()  scan.trigger.arm.stimulus  Trigger model  Scanning and triggering  "},{"id":345,"title":"scan.trigger.arm.stimulus","url":"16258.htm","text":"This attribute determines which event starts the scan.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>Scan reset  Create configuration script<br>Save setup  0  Usage  eventID = scan.trigger.arm.stimulus  scan.trigger.arm.stimulus = eventID  eventID  Trigger stimulus used for the channel action (arm layer); see Details  Details  This attribute selects which events cause the arm event detector to enter the detected state.  Set this attribute to 0 to start the scan without waiting for an event.  eventID may be one of the following trigger event IDs.  Trigger event IDs  Trigger event ID  Description  channel.trigger[N].EVENT_ID or 41 to 48  The trigger event generated by the channel trigger N.  digio.trigger[N].EVENT_ID or 1 to 14  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID or 39  The trigger key (TRIG) on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH or 53  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW or 52  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH or 55  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW or 54  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 2.  trigger.EVENT_ID or 40  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID or 58 to 59  A combination of events has occurred.  trigger.timer[N].EVENT_ID or 20 to 23  A delay expired.  tsplink.trigger[N].EVENT_ID or 17 to 19  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID or 29 to 36  A LAN trigger event has occurred.  scan.trigger.EVENT_SCAN_READY or 24  Scan ready event.  scan.trigger.EVENT_SCAN_START or 25  Scan start event.  scan.trigger.EVENT_CHANNEL_READY or 28  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP or 56  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP or 50  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP or 26  Scan complete event.  scan.trigger.EVENT_IDLE or 27  Idle event.  schedule.alarm[N].EVENT_ID or 37 to 38  Trigger event generated by the alarm N.  @Use one of the text trigger event IDs (for example, digio.trigger[N].EVENT_ID) to set the stimulus value rather than the numeric value. Doing this will make the code compatible for future upgrades.  Example 1  scan.trigger.arm.stimulus = scan.trigger.EVENT_SCAN_READY  Sets trigger stimulus of the arm event detector to scan ready event.  Example 2  scan.trigger.arm.stimulus = 0  The scan begins immediately.  Example 3  scan.trigger.arm.stimulus = digio.trigger[3].EVENT_ID  The scan begins when the instrument receives a signal from digital I/O line 3.  Also see  scan.trigger.arm.clear()  scan.trigger.arm.set()  Trigger model  Scanning and triggering  "},{"id":346,"title":"scan.trigger.channel.clear()","url":"16259.htm","text":"This function clears the channel event detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.channel.clear()  Details  This function clears the channel event detector of the trigger model (sets it to the undetected state).  Example  scan.trigger.channel.clear()  Clears the channel event detector.  Also see  scan.trigger.channel.set()  scan.trigger.channel.stimulus  Trigger model  Scanning and triggering  "},{"id":347,"title":"scan.trigger.channel.set()","url":"16260.htm","text":"This function sets the channel event detector to the detected state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.channel.set()  Details  This function sets the channel event detector of the trigger model to the detected state.  Example  scan.trigger.channel.set()  Sets the channel event detector of the trigger model to the detected state.  Also see  scan.trigger.channel.clear()  scan.trigger.channel.stimulus  Trigger model  Scanning and triggering  "},{"id":348,"title":"scan.trigger.channel.stimulus","url":"16976.htm","text":"This attribute determines which trigger events cause the channel actions to occur.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>Scan reset  Create configuration script<br>Save setup  50 (scan.trigger.EVENT_SEQUENCE_COMP)  Usage  eventID = scan.trigger.channel.stimulus  scan.trigger.channel.stimulus = eventID  eventID  Trigger stimulus used for the channel action; see Details for possible trigger event&nbsp;IDs  Details  This attribute selects which events cause the channel event detector to enter the detected state. Set this attribute to 0 to start the channel action immediately at the default setting.  Set eventID to one of the existing trigger event IDs shown in the following table.  Trigger event IDs  Trigger event ID  Description  channel.trigger[N].EVENT_ID or 41 to 48  The trigger event generated by the channel trigger N.  digio.trigger[N].EVENT_ID or 1 to 14  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID or 39  The trigger key (TRIG) on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH or 53  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW or 52  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH or 55  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW or 54  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 2.  trigger.EVENT_ID or 40  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID or 58 to 59  A combination of events has occurred.  trigger.timer[N].EVENT_ID or 20 to 23  A delay expired.  tsplink.trigger[N].EVENT_ID or 17 to 19  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID or 29 to 36  A LAN trigger event has occurred.  scan.trigger.EVENT_SCAN_READY or 24  Scan ready event.  scan.trigger.EVENT_SCAN_START or 25  Scan start event.  scan.trigger.EVENT_CHANNEL_READY or 28  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP or 56  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP or 50  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP or 26  Scan complete event.  scan.trigger.EVENT_IDLE or 27  Idle event.  schedule.alarm[N].EVENT_ID or 37 to 38  Trigger event generated by the alarm N.  @Use one of the text trigger event IDs (for example, digio.trigger[N].EVENT_ID) to set the stimulus value rather than the numeric value. Doing this will make the code compatible for future upgrades.  Example 1  scan.trigger.channel.stimulus = scan.trigger.EVENT_SCAN_START  Sets the trigger stimulus of the channel event detector to scan start event.  Example 2  scan.trigger.channel.stimulus = 0  print(scan.trigger.channel.stimulus)  Starts the channel action immediately after the Scan Start Event. This also resets the stimulus to the default.  Output:  5.000000000e+01  Also see  scan.trigger.channel.clear()  scan.trigger.channel.set()  Scanning and triggering  Trigger model  "},{"id":349,"title":"scan.trigger.clear()","url":"16977.htm","text":"This function clears the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.clear()  Details  This function sets the arm, channel, measurement, and sequence event detectors of the trigger model to the undetected state.  Example  scan.trigger.clear()  Clears the trigger model.  Also see  scan.trigger.channel.set()  scan.trigger.channel.stimulus  Scanning and triggering  Trigger model  "},{"id":350,"title":"scan.trigger.measure.clear()","url":"16263.htm","text":"This function clears the measure event detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.measure.clear()  Details  This function sets the measurement event detector of the trigger model to the undetected state.  Example  scan.trigger.measure.clear()  Clears the measurement event detector.  Also see  Scanning and triggering  "},{"id":351,"title":"scan.trigger.measure.set()","url":"16264.htm","text":"This function sets the measurement event detector to the detected state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.measure.set()  Details  This function sets the measurement event detector of the trigger model to the detected state.  Example  scan.trigger.measure.set()  Sets the measurement event detector to the detected state.  Also see  Scanning and triggering  "},{"id":352,"title":"scan.trigger.measure.stimulus","url":"16265.htm","text":"This attribute selects the trigger stimulus of the event detector trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>Scan reset  Create configuration script<br>Save setup  0  Usage  eventID = scan.trigger.measure.stimulus  scan.trigger.measure.stimulus = eventID  eventID  The trigger stimulus that is used for the measurement event  Details  This attribute selects the events that cause the measurement event detector to enter the detected state. You can use this to pace each one of the measurement count readings with an event.  To pace all readings by a single event, use scan.trigger.sequence.stimulus.  To bypass waiting for an event, set this to 0.  eventID can be set to one of the existing trigger event IDs, shown in the following table.  Trigger event IDs  Trigger event ID  Description  channel.trigger[N].EVENT_ID or 41 to 48  The trigger event generated by the channel trigger N.  digio.trigger[N].EVENT_ID or 1 to 14  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID or 39  The trigger key (TRIG) on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH or 53  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW or 52  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH or 55  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW or 54  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 2.  trigger.EVENT_ID or 40  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID or 58 to 59  A combination of events has occurred.  trigger.timer[N].EVENT_ID or 20 to 23  A delay expired.  tsplink.trigger[N].EVENT_ID or 17 to 19  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID or 29 to 36  A LAN trigger event has occurred.  scan.trigger.EVENT_SCAN_READY or 24  Scan ready event.  scan.trigger.EVENT_SCAN_START or 25  Scan start event.  scan.trigger.EVENT_CHANNEL_READY or 28  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP or 56  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP or 50  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP or 26  Scan complete event.  scan.trigger.EVENT_IDLE or 27  Idle event.  schedule.alarm[N].EVENT_ID or 37 to 38  Trigger event generated by the alarm N.  @Use one of the text trigger event IDs (for example, digio.trigger[N].EVENT_ID) to set the stimulus value rather than the numeric value. Doing this will make the code compatible for future upgrades.  Example  scan.trigger.measure.stimulus = scan.trigger.EVENT_CHANNEL_READY  Sets the trigger stimulus of the measurement event detector to the channel ready event.  Also see  scan.trigger.sequence.stimulus  Scanning and triggering  "},{"id":353,"title":"scan.trigger.sequence.clear()","url":"16266.htm","text":"This function clears the sequence event detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.sequence.clear()  Details  This function sets the sequence event detector to the undetected state.  Example  scan.trigger.sequence.clear()  Clears the sequence event detector.  Also see  Scanning and triggering  "},{"id":354,"title":"scan.trigger.sequence.set()","url":"16267.htm","text":"This function sets the sequence even detector to the detected state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  scan.trigger.sequence.set()  Details  This function sets the sequence event detector to the detected state.  Example  scan.trigger.sequence.set()  Sets the sequence event detector to the detected state.  Also see  scan.trigger.sequence.clear()  Scanning and triggering  "},{"id":355,"title":"scan.trigger.sequence.stimulus","url":"16268.htm","text":"This attribute selects the trigger stimulus for the sequence event detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>Scan reset  Create configuration script<br>Save setup  28 (scan.trigger.EVENT_CHANNEL_READY)  Usage  eventID = scan.trigger.sequence.stimulus  scan.trigger.sequence.stimulus = eventID  eventID  The trigger stimulus that is used for the sequence event  Details  This attribute selects the events that cause the sequence event detector to enter the detected state.  Use this to start a set of measurement count readings that are triggered by a single event.  To pace each reading by an event, use scan.trigger.measure.stimulus.  To bypass pacing the readings, set this to 0.  Set eventID to one of the existing trigger event IDs shown in the following table.  Trigger event IDs  Trigger event ID  Description  channel.trigger[N].EVENT_ID or 41 to 48  The trigger event generated by the channel trigger N.  digio.trigger[N].EVENT_ID or 1 to 14  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID or 39  The trigger key (TRIG) on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH or 53  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW or 52  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH or 55  A DMM trigger event that indicates a measurement has exceeded the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW or 54  A DMM trigger event that indicates a measurement has exceeded the low limit value on limit 2.  trigger.EVENT_ID or 40  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID or 58 to 59  A combination of events has occurred.  trigger.timer[N].EVENT_ID or 20 to 23  A delay expired.  tsplink.trigger[N].EVENT_ID or 17 to 19  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID or 29 to 36  A LAN trigger event has occurred.  scan.trigger.EVENT_SCAN_READY or 24  Scan ready event.  scan.trigger.EVENT_SCAN_START or 25  Scan start event.  scan.trigger.EVENT_CHANNEL_READY or 28  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP or 56  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP or 50  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP or 26  Scan complete event.  scan.trigger.EVENT_IDLE or 27  Idle event.  schedule.alarm[N].EVENT_ID or 37 to 38  Trigger event generated by the alarm N.  @Use one of the text trigger event IDs (for example, digio.trigger[N].EVENT_ID) to set the stimulus value rather than the numeric value. Doing this will make the code compatible for future upgrades.  Example  scan.trigger.sequence.stimulus = scan.trigger.EVENT_CHANNEL_READY  Sets the trigger stimulus of the sequence event detector to the channel ready event.  Also see  scan.trigger.measure.stimulus  Scanning and triggering  "},{"id":356,"title":"schedule.alarm[N].enable","url":"16299.htm","text":"This attribute enables or disables an alarm.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Recall setup  Not saved  0 (schedule.OFF)  Usage  state = schedule.alarm[N].enable  schedule.alarm[N].enable = state  state  Disable the alarm(schedule.OFF or 0)  Enable the alarm (schedule.ON or 1)  N  Alarm number (1 or 2)  Details  If you enable an alarm that has a start time that is in the past, the alarm executes immediately.  If an alarm time in the past is used to start a scan, the alarm time may be missed by the scan start. This can occur because the scan clears any pending triggers before it begins, so it will miss any trigger generated from the alarm enable. To prevent a missed alarm, start the scan in the background, then enable the alarm.  Example  schedule.alarm[1].enable = 1  Enables alarm 1.  Also see  schedule.alarm[N].EVENT_ID  schedule.alarm[N].fractionalseconds  schedule.alarm[N].period  schedule.alarm[N].ptpseconds  schedule.alarm[N].repetition  schedule.alarm[N].seconds  schedule.disable()  "},{"id":357,"title":"schedule.alarm[N].EVENT_ID","url":"16300.htm","text":"This constant describes the trigger event generated by the alarm N.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = schedule.alarm[N].EVENT_ID  eventID  The trigger event number  N  Alarm number (1 or 2)  Details  To have another trigger object respond to trigger events generated by the schedule alarm, set the other object's stimulus attribute to the value of this constant.  Example  scan.trigger.arm.stimulus = schedule.alarm[1].EVENT_ID  Uses a trigger event on alarm 1 to be the stimulus for the trigger arm.  Also see  None  "},{"id":358,"title":"schedule.alarm[N].fractionalseconds","url":"16301.htm","text":"This attribute describes the fractional seconds portion of the alarm time.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset  Not saved  0  Usage  schedule.alarm[N].fractionalseconds = fraction  fraction = schedule.alarm[N].fractionalseconds   N  Alarm number (1 or 2)  fraction  The fractional seconds portion of the alarm time  Details  1588 has too much resolution to represent in a single floating-point value so the alarm times are split into two values (seconds and fractional seconds).  Example  -- get current time and store in variable sec  sec = os.time()  -- set alarm 1 seconds to be 1 minute after current time                                 schedule.alarm[1].seconds = sec + 60  -- set alarm 1 fractional seconds to be 0.5  schedule.alarm[1].fractionalseconds = 0.5  print(\"value of sec is \", sec)   print(\"value of alarm 1 seconds is \",  schedule.alarm[1].seconds)   print(\"value of alarm 1 fractional seconds is \", schedule.alarm[1].fractionalseconds)  Create an alarm to occur 60.5 seconds from current time in UTC seconds.  Output:  value of sec is \t1.306405866e+009  value of alarm 1 seconds is \t1.306405926e+009  value of alarm 1 fractional seconds is \t5.000000000e-001  Also see  schedule.alarm[N].seconds  "},{"id":359,"title":"schedule.alarm[N].period","url":"16302.htm","text":"This attribute describes the time, in seconds, between adjacent firings of the alarm.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Recall setup  Create configuration script<br>Save setup  0  Usage  value = schedule.alarm[N].period  schedule.alarm[N].period = value  N  Alarm number (1 or 2)  value  The time in seconds  Example  0.5schedule.alarm[1].period = 0.5  Set a period of 0.5 seconds between firings of alarms after the initial alarm.  Also see  None  "},{"id":360,"title":"schedule.alarm[N].ptpseconds","url":"16303.htm","text":"The seconds portion of the alarm time in PTP seconds.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset  Not saved  0  Usage  schedule.alarm[N].ptpseconds = seconds  seconds = schedule.alarm[N].ptpseconds  N  Alarm (1 or 2)  seconds  The seconds portion of the alarm time in PTP seconds  Details  1588 has too much resolution to represent in a single floating-point value, so the alarm times are split into two values (seconds and fractional seconds).  Example  sec,ns = ptp.time()  schedule.alarm[1].ptpseconds = sec + 30  Create an alarm to occur 30 seconds from current time in PTP seconds.  Also see  ptp.utcoffset  "},{"id":361,"title":"schedule.alarm[N].repetition","url":"16304.htm","text":"This attribute describes the number of times an alarm repeats after the first alarm firing.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Recall setup  Save setup  0  Usage  count = schedule.alarm[N].repetition  schedule.alarm[N].repetition = count  count  The number of repetitions  N  Alarm 1 or 2  Details  The alarm will fire a total of count+1 times. If 0 and period is nonzero, the alarm fires forever.  Once an alarm begins, the repetition counts down for each trigger generated. It ends at zero (0). You must set this repetition back to some value if you intend to reissue the alarm. Otherwise, the alarm will either not fire (if the period is zero) or fire forever (if period is nonzero).  Example  schedule.alarm[1].repetition = 10  Set the alarm to fire 10 times.  Also see  schedule.alarm[N].enable  "},{"id":362,"title":"schedule.alarm[N].seconds","url":"16305.htm","text":"The seconds portion of the alarm time in UTC seconds.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset  Not saved  0  Usage  value = schedule.alarm[N].seconds  schedule.alarm[N].seconds = value  value  Seconds portion of the alarm time in UTC seconds  N  Alarm number (1 or 2)  Details  1588 has too much resolution to represent in a single floating-point value, so the alarm times are split into two values (seconds and fractional seconds).  Example  local l_myTime  l_myTime = os.time{year = 2008, month = 3, day = 15, hour = 10}  schedule.alarm[1].seconds = l_myTime  Create an alarm to occur on March 15, 2008 at 10 am in UTC seconds.  Also see  ptp.utcoffset  "},{"id":363,"title":"schedule.disable()","url":"16306.htm","text":"This function disables all alarms.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  schedule.disable()  Details  This command sets the schedule.alarm[N].enable attribute to 0 (schedule.OFF) for each schedule alarm N.  Also see  schedule.alarm[N].enable  "},{"id":364,"title":"script.anonymous","url":"17040.htm","text":"This is a reference to the anonymous script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  No  See Details  See Details  Not applicable  Usage  scriptVar = script.anonymous  scriptVar  The name of the variable that references the script  Details  You can use the script.anonymous script like any other script. Also, you can save the anonymous script as a user script by giving it a name.  This script is replaced by loading a script with the loadscript or loadandrunscript commands when they are used without a name.   Example 1  script.anonymous.list()  Displays the content of the anonymous&nbsp;script.  Example 2  print(script.anonymous.source)  Retrieves the source of the anonymous&nbsp;script.  Also see  Anonymous scripts  scriptVar.autorun  scriptVar.list()  scriptVar.name  scriptVar.run()  scriptVar.save()  scriptVar.source  "},{"id":365,"title":"script.delete()","url":"16853.htm","text":"This function deletes a script from nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  script.delete(\"scriptName\")  scriptName  The string that represents the name of the script  Example  script.delete(\"test8\")  Deletes a user script named test8 from nonvolatile memory.  Also see  Delete user scripts from the instrument  scriptVar.save()  "},{"id":366,"title":"script.load()","url":"15063.htm","text":"This function creates a script from a specified file.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar = script.load(\"file\")  scriptVar = script.load(\"file\", \"name\")  scriptVar  The created script; this is nil if an error is encountered  file  The path and file name of the script file to load  name  The name of the script to be created  Details  The file path may be absolute or relative to the current working directory. The root folder of the USB flash drive has the absolute path \"/usb1/\". Both the forward slash (/) and backslash (\\) are supported as directory separators.  The file to be loaded must start with the loadscript or loadandrunscript keywords, contain the body of the script, and end with the endscript keyword.  Script naming:  If the name parameter is an empty string, or name is absent (or nil) and the script name cannot be extracted from the file, scriptVar is the only handle to the created script.  If name is given (and not nil), any script name embedded in the file is ignored.  If name conflicts with the name of an existing script in the script.user.scripts table, the existing script&#8217;s name attribute is set to an empty string before it is replaced in the script.user.scripts table by the new script.  If name is absent or nil, the command attempts to extract the name of the script from the file. Any conflict between the extracted name and that of an existing script in the scripts table generates an error. If the script name cannot be extracted, the created script's name attribute is initialized to the empty string and must be set to a valid nonempty string before saving the script to nonvolatile memory.  Example  myTest8 = <br>   script.load(\"/usb1/filename.tsp\", \"myTest8\")  Loads the script myTest8 from the USB flash drive.  Also see  script.new()  "},{"id":367,"title":"script.new()","url":"15064.htm","text":"This function creates a script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar = script.new(\"code\")  scriptVar = script.new(\"code\", \"name\")  scriptVar  The name of the variable that references the script  code  A string containing the body of the script  name  The name of the script  Details  The name parameter is the name that is added to the script.user.scripts table. If name is not provided, an empty string is used, and the script is unnamed. If the name already exists in script.user.scripts, the name attribute of the existing script is set to an empty string before it is replaced by the new script.  Note that name is the value that is used for the instrument front&#8209;panel display. If this value is not defined, the script is not available from the front panel.  You must save the new script into nonvolatile memory to keep it when the instrument is turned off.  Example 1  myTest8 = script.new(     \"display.clear() display.settext('Hello&nbsp;from&nbsp;myTest8')\", \"myTest8\")  myTest8()  Creates a new script referenced by the variable myTest8 with the name myTest8.  Runs the script. The instrument displays Hello from myTest8.  Example 2  autoexec = script.new(     \"display.clear() display.settext('Hello&nbsp;from&nbsp;autoexec')\", 'autoexec')  Creates a new autoexec script that clears the display when the instrument is turned on and displays Hello from autoexec.  Also see  Create a script using the script.new() command  Global variables and the script.user.scripts table  Named scripts  scriptVar.save()  script.newautorun()  "},{"id":368,"title":"script.newautorun()","url":"18832.htm","text":"This function creates a script and enables autorun.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar = script.newautorun(\"code\")  scriptVar = script.newautorun(\"code\", \"name\")  scriptVar  The name of the variable that references the script  code  A string that contains the body of the script  name  The name of the script  Details  The name parameter is the name that is added to the script.user.scripts table. If name is not provided, an empty string is used, and the script is unnamed. If the name already exists in script.user.scripts, the name attribute of the existing script is set to an empty string before it is replaced by the new script.  Note that name is the value that is used for the instrument front&#8209;panel display. If this value is not defined, the script is not available from the front panel.  You must save the new script into nonvolatile memory to keep it when the instrument is turned off.  The script is run automatically immediately after it is created.  This command is the same as the script.new() function except that the script is automatically run.  Example  NewAuto = script.newautorun(\"print('Hello from new auto run command')\", 'NewAuto')  print(NewAuto.autorun)  print(NewAuto.name)  Creates a new script called NewAuto that automatically has the autorun attribute set to yes after it is created. The name is set to NewAuto.  Output:  Hello from new auto run command  yes  NewAuto  Also see  Create a script using the script.new() command  Global variables and the script.user.scripts table  Named scripts  script.new()  scriptVar.autorun  scriptVar.save()  "},{"id":369,"title":"script.restore()","url":"16851.htm","text":"This function restores a script that was removed from the runtime environment.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  script.restore(name)  name  The name of the script to be restored  Details  This command copies the script from nonvolatile memory into the runtime environment. It also creates a global variable with the same name as the name of the script.  Example  script.restore(\"test9\")  Restores a script named test9 from nonvolatile memory.  Also see  script.delete()  "},{"id":370,"title":"script.run()","url":"18833.htm","text":"This function runs the anonymous script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  script.run()  run()  Details  Each time the script.run() command is given, the anonymous script is executed. This script can be run using this command many times without having to re-send it.   Example  run()  Runs the anonymous script.  Also see  script.anonymous  "},{"id":371,"title":"script.user.catalog()","url":"16862.htm","text":"This function returns an iterator that can be used in a for loop to iterate over all the scripts stored in nonvolatile&nbsp;memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  for name in script.user.catalog() do body end  name  String representing the name of the script  body  Code that implements the body of the for loop to process the names in the&nbsp;catalog  Details  This function accesses the catalog of scripts stored in nonvolatile memory, which allows you to process all scripts in nonvolatile memory. The entries are enumerated in no particular order.  Each time the body of the function executes, name takes on the name of one of the scripts stored in nonvolatile memory. The for loop repeats until all scripts have been iterated.  Example  for name in script.user.catalog() do     print(name)  end  Retrieve the catalog listing for user scripts.  Also see  None  "},{"id":372,"title":"scriptVar.autorun","url":"16852.htm","text":"This attribute controls the autorun state of a script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Not applicable  See Details  See Details  Usage  scriptVar.autorun = \"state\"  state = scriptVar.autorun  scriptVar  The name of the variable that references the script  state  String that indicates whether or not the script runs automatically when powered on:  yes: Script runs automatically  no: Script does not run automatically  Details  Autorun scripts run automatically when the instrument is turned on. You can set any number of scripts to autorun.  The run order for autorun scripts is arbitrary, so make sure the run order is not important.  The default value for scriptVar.autorun depends on how the script was loaded. The default is no if the script was loaded with loadscript or script.new(). It is yes for scripts loaded with loadandrunscript or script.newautorun().  @Make sure to save the script in nonvolatile memory after setting the autorun attribute so that the instrument keeps the setting.  Example  test5.autorun = \"yes\"  test5.save()  Assume a script named test5 is in the runtime environment.  The next time the instrument is turned on, test5 script automatically loads and runs.  Also see  None  "},{"id":373,"title":"scriptVar.list()","url":"17785.htm","text":"This function generates a script listing.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar.list()  scriptVar  The name of the variable that references the script  Details  This function generates output in the form of a sequence of response messages (one message for each line of the script). It also generates output of the script control messages (loadscript or loadandrunscript and endscript).  Example  test7 = script.new(\"display.clear() display.settext('Hello&nbsp;from&nbsp;my&nbsp;test')\",    \"test7\")  test7()  test7.save()  test7.list()  The above example code creates a script named test7 that displays text on the front panel and lists the script with the following output:  loadscript test7  display.clear() display.settext(\"Hello from my test\")  endscript  Also see  Load a script by sending commands over the remote interface  Retrieve source code one line at a time  "},{"id":374,"title":"scriptVar.name","url":"2589.htm","text":"This attribute contains the name of a script in the runtime environment.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Not applicable  Not applicable  Not applicable  Usage  scriptVar.name = \"scriptName\"  scriptName = scriptVar.name  scriptVar  Name of the variable that references the script  scriptName  A string that represents the name of the script  Details  When setting the script name, this attribute renames the script that the variable scriptVar references.  This attribute must be either a valid Lua identifier or the empty string. Changing the name of a script changes the index that is used to access the script in the script.user.scripts table. Setting the attribute to an empty string removes the script from the table completely, and the script becomes an unnamed script.  As long as there are variables referencing an unnamed script, the script can be accessed through those variables. When all variables that reference an unnamed script are removed, the script is removed from the runtime environment.  If the new name is the same as a name that is already used for another script, the name of the other script is set to an empty string, and that script becomes unnamed.   @Changing the name of a script does not change the name of any variables that reference that script. The variables still reference the script, but the names of the script and variables may not match.  Example  test7 = script.new(\"display.clear() display.settext('Hello&nbsp;from&nbsp;my&nbsp;test')\", \"\")  test7()  print(test7.name)  test7.name = \"test7\"  print(test7.name)<br>  test7.save()  This example calls the script.new() function to create a script with no name, runs the script, names the script test7, and then saves the script in nonvolatile memory.  Also see  Rename a script  script.new()  scriptVar.save()  "},{"id":375,"title":"scriptVar.run()","url":"16856.htm","text":"This function runs a script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar.run()  scriptVar()  scriptVar  The name of the variable that references the script  Details  The scriptVar.run() function runs the script referenced by scriptVar. You can also run the script by using scriptVar().  Example  test8.run()  Runs the script referenced by the variable test8.  Also see  None  "},{"id":376,"title":"scriptVar.save()","url":"16863.htm","text":"This function saves the script to nonvolatile memory or to a USB flash drive.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  scriptVar.save()  scriptVar.save(\"filename\")  scriptVar  The name of variable that references the script  filename  A string that contains the file name to use when saving the script to a USB&nbsp;flash&nbsp;drive  Details  The scriptVar.save() function saves a script to nonvolatile memory or a USB flash drive. The root folder of the USB flash drive has the absolute path /usb1/.  If no filename is specified (the file name parameter is an empty string), the script is saved to internal nonvolatile memory. Only a script with filename defined can be saved to internal nonvolatile memory. If a filename is given, the script is saved to the USB flash drive.  You can add the file extension, but it is not required. The only allowed extension is .tsp (see Example&nbsp;2).  Example 1  test8.save()  Saves the script referenced by the variable test8 to nonvolatile memory.  Example 2  test8.save(\"/usb1/myScript.tsp\")  Saves the script referenced by the variable test8 to a file named myScript.tsp on your USB flash drive.  Also see  Save a user script  "},{"id":377,"title":"scriptVar.source","url":"16867.htm","text":"This attribute contains the source code of a script.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)<br>(see Details)  No  Not applicable  Not saved  Not applicable  Usage  code = scriptVar.source  scriptVar.source = nil  scriptVar  The name of the variable that references the script that contains the source code  code  A string that contains the body of the script  Details  The loadscript or loadandrunscript and endscript keywords are not included in the source code.   The body of the script is a single string with lines separated by the new line character.  The instrument automatically stores the source for all scripts that are loaded on the instrument. To free up memory or to obfuscate the code, assign nil to the source attribute of the script. Although this attribute is writable, it can only be set to the nil value.  Example  test7 = script.new(\"display.clear() display.settext('Hello&nbsp;from&nbsp;my&nbsp;test')\", \"\")  print(test7.source)  This example creates a script called test7 that displays a message on the front panel and retrieves the source code.  Output:  display.clear() display.settext('Hello from my test')  Also see  scriptVar.list()  "},{"id":378,"title":"settime()","url":"13943.htm","text":"This function sets the real-time clock (sets present time of the system).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  settime(time)  time  The time in seconds since January 1, 1970 UTC  Details  This function sets the date and time of the instrument based on the time parameter (specified in UTC time). UTC time is specified as the number of seconds since Jan 1, 1970, UTC. You can use UTC time from a local time specification, or you can use UTC time from another source (for example, your computer).  Example  systemTime = os.time({year = 2020,         month = 3,         day = 31,         hour = 14,         min = 25})  settime(systemTime)  Sets the date and time to Mar 31, 2020 at&nbsp;2:25&nbsp;pm.  Also see  gettimezone()  os.time()  settimezone()  "},{"id":379,"title":"settimezone()","url":"15021.htm","text":"This function sets the local time zone.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  settimezone(offset)  settimezone(\"offset\", \"dstOffset\", \"dstStart\", \"dstEnd\")  offset  String representing offset from UTC  dstOffset  String representing the daylight savings offset from UTC  dstStart  String representing when daylight savings time starts  dstEnd  String representing when daylight savings time ends  Details  You only need to set the time zone if you use the os.time() and os.date() functions.   If only one parameter is given, the same time offset is used throughout the year. If four parameters are given, time is adjusted twice during the year for daylight savings time.  offset and dstOffset are strings of the form \"[+|-]hh[:mm[:ss]]\" that indicate how much time must be added to the local time to get UTC time:  hh is a number between 0 and 23 that represents hours  mm is a number between 0 and 59 that represents minutes  ss is a number between 0 and 59 that represents seconds  The minute, second, +, and − fields are optional.  For example, to set the UTC-5 time zone, you specify the string \"5\", because UTC-5 is 5 hours behind UTC and you must add 5 hours to the local time to determine UTC time. To specify the time zone UTC4, you specify \"-4\", because UTC4 is 4 hours ahead of UTC and 4 hours must be subtracted from the local time to determine UTC.  dstStart and dstEnd are strings of the form \"MM.w.dw/hh[:mm[:ss]]\" that indicate when daylight savings time begins and ends respectively:  MM is a number between 1 and 12 that represents the month  w is a number between 1 and 5 that represents the week in the month  dw is a number between 0 and 6 that represents the day of the week (where 0 is Sunday)  The rest of the fields represent the time of day that the change takes effect:  hh represents hours  mm represents minutes  ss represents seconds  The minutes and seconds fields are optional.  The week of the month and day of the week fields are not specific dates.  Example  settimezone(\"8\", \"1\", \"3.3.0/02\", \"11.2.0/02\")<br>settimezone(offset)  Sets offset to equal +8 hours, +1&nbsp;hour for DST, starts on Mar 14 at 2:00&nbsp;am, ends on Nov 7 at 2:00 am.  Sets local time zone to offset.  Also see  gettimezone()  os.time()  settime()  "},{"id":380,"title":"setup.cards()","url":"16315.htm","text":"This function returns the card model numbers that are defined for each slot in a saved setup.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  CardModels = setup.cards()   CardModels = setup.cards(\"/path/filename.set\")   CardModels  A comma-delimited string listing the card model numbers for each slot  path/filename  The path and name of the file on the flash drive; the path may be absolute or relative to the current working directory; the .set extension must be on the filename  Details  This function returns a comma-delimited string that lists the card model for each slot in the instrument (from 1 to 6) for the specified saved setup. If no card was installed in the slot when the setup was saved, a 0 is returned as the card model number.  Use CardModels = setup.cards() to return cards associated with the internally saved setup.  Use CardModels = setup.cards(\"/path/filename.set\") to return cards associated with the setup saved on the USB flash drive.  Example 1  CardModels = setup.cards()  print(CardModels)  Query the cards associated with the internal saved setup.  Output, assuming a 3722 card in slot&nbsp;1:  3722,0,0,0,0,0  print(setup.card(\"/usb1/mysetup.set\"))  Query the cards associated with mysetup.set on the root directory on the flash drive.  Output, assuming a 3723 on slot&nbsp;2, 3722 on slot 3, and 3720 on slot 4:  0,3723,3722,3720,0,0  Example 2  print(setup.card(\"/usb1/mysetup.set\"))  Query the cards associated with setup saved as JulySetup.set on the thumb drive.  The following example of output shows that slots 1, 5, and 6 are empty, slot 2 has a 3723 installed, slot&nbsp;3 has a 3722 installed and slot 4 has a 3720 installed:  0,3723,3722,3720,0,0  Also see  setup.recall()  setup.save()  "},{"id":381,"title":"setup.poweron","url":"15081.htm","text":"This attribute specifies which saved setup to recall when the instrument is turned on.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  0  Usage  id = setup.poweron  setup.poweron = id  id  An integer that specifies the setup to recall when the instrument power is turned on (0 or 1)  Details  When id = 0, the instrument uses the factory default setup when it is turned on. When id is set to 1, it uses the setup saved with setup.save().  Only setups stored in nonvolatile memory are available.  To save a script that is used when the instrument is powered on, you can create a configuration script and name it autoexec.  Example  setup.poweron = 0  Set the instrument to use the factory default setup when power is turned on.  Also see  createconfigscript()  Save the present configuration  setup.save()   Start-up (power-on) configuration  "},{"id":382,"title":"setup.recall()","url":"66566.htm","text":"This function recalls settings from a saved setup.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  setup.recall(id)  id  An integer or string that specifies the location of the setup to recall:  Factory default setup: 0  User-saved setup in nonvolatile memory: 1  User-saved setup on a USB flash drive: \"/path/filename\"  Details  If the id parameter is 1, the internal setup that was saved with setup.save() is recalled. If the id parameter is 0, the instrument recalls the factory default setup.  When the id parameter is a string, it is interpreted as the path and file name of the setup to restore from a file on a USB flash drive. The path may be absolute or relative to the current working directory.  Before a setup is recalled, an instrument reset is performed.  Example 1  setup.recall(1)  Recall the user-saved setup.  Example 2  setup.recall(\"/usb1/KEITHLEY_30730.set\")  Recall a user-saved setup stored in a file named KEITHLEY_30730 on a USB flash&nbsp;drive.  Also see  Saved setups  setup.save()  "},{"id":383,"title":"setup.save()","url":"15083.htm","text":"This function saves the present setup as a user-saved setup.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  setup.save()  setup.save(\"id\")  id  A string that specifies the path and file name to which to save the user setup on a USB flash drive (\"/path/filename\")  Details  The id parameter can use a path that is absolute or relative to the current working directory.  iIf you do not specify the id parameter, the setup is saved to the nonvolatile memory of the instrument. If a previous setup exists, it is overwritten.  You can also create configuration scripts to save setups. See Save the present configuration.  Example  setup.save()  Saves the present setup to the internal memory of the instrument. If there is an existing setup, it is overwritten.  Also see  createconfigscript()  Saved setups  setup.recall()  "},{"id":384,"title":"slot[slot].banks.matrix","url":"17758.htm","text":"This attribute describes the number of banks in the matrix for a card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Never  Not applicable   Not applicable  Usage  value = slot[slot].banks.matrix  value  The number of banks in the matrix  slot  The slot number  Details  Returns the number of banks in the matrix on the card in the specified slot. If no matrix or no card exists, it returns nil.  Example  print(slot[1].banks.matrix)  Returns the number of banks in the matrix on the card in slot 1 (4 banks).  Output:  4.000000000e+000  Also see  slot[slot].columns.matrix  "},{"id":385,"title":"slot[slot].columns.matrix","url":"17757.htm","text":"This attribute returns the number of columns in the matrix for the card in the specified slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].columns.matrix  value  The number of columns in the matrix  slot  The slot number (1 to 6)  Details  This attribute is only available if the installed plug-in card supports matrix channels. If matrix channels are not available, the return value is nil.  Example  print(slot[4].columns.matrix)  Returns the number of columns in the matrix on the card in slot 4 (28).  Example output:  2.800000000e+01  Also see  slot[slot].banks.matrix  slot[slot].rows.matrix  "},{"id":386,"title":"slot[slot].commonsideohms","url":"16320.htm","text":"This attribute indicates whether a card in the specified slot supports commonside channels for 4&#8209;wire resistance measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  commonside = slot[slot].commonsideohms  commonside  Indication of whether or not commonside 4-wire ohm channels are supported  slot  Slot number (1 to 6)  Details  If commonside 4-wire resistance channels are supported, the returned value is 1.  If commonside 4&#8209;wire resistance channels are not supported, the return value is nil.  Example  print(slot[1].commonsideohms)  Query if slot 1 supports commonside 4-wire&nbsp;ohms channels.  Also see  None  "},{"id":387,"title":"slot[slot].digio","url":"962.htm","text":"This attribute indicates whether or not a card in the specified slot supports digital input and output channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].digio  value  Indicator for whether or not the card in the slot supports digital I/O channels  slot  Slot number (1 to 6)  Details  This attribute is only available for a slot if the installed card supports digital I/O channels.  If digital I/O channels are supported, the returned value is 1.  Example  print(slot[1].digio)  Query if slot 1 supports digital I/O channels.  Also see  None  "},{"id":388,"title":"slot[slot].endchannel.*","url":"13721.htm","text":"These attributes indicates whether or not the channel in the selected slot supports a feature and if so, which channels support the feature.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].endchannel.amps  value = slot[slot].endchannel.analogoutput  value = slot[slot].endchannel.digitalio  value = slot[slot].endchannel.isolated  value = slot[slot].endchannel.totalizer  value = slot[slot].endchannel.voltage  value  The channel number of the ending channel of the group of channels that supports the feature  slot  Slot number (1 to 6)  Details  This attribute is only available for a slot if the installed card supports the selected feature. If the attribute is not available, the return value is nil.  Channels are grouped by feature sets, so you can use the start and ending channel numbers to identify a group of channels that supports a particular feature. If the card supports the feature, the returned value is the number of the ending channel.  If only one channel in the card supports the feature, the ending channel matches the starting channel number.  The commands support different types of channels:  slot[slot].endchannel.amps: Channel supports amperage measurements  slot[slot].endchannel.analogoutput: Channel supports a digital analog output (DAC)  slot[slot].endchannel.digitalio: Channel supports digital inputs and outputs  slot[slot].endchannel.isolated: Channel supports isolated channels  slot[slot].endchannel.totalizer: Channel supports totalizer channels  slot[slot].endchannel.voltage: Channel supports voltage or two-wire measurements  Example  CardChannels = function(SlotNumber)        if slot[SlotNumber].idn == \"Empty Slot\" then           print(\"   Slot is Empty\")        else           if (slot[SlotNumber].startchannel.voltage == nil) and<br>            (slot[SlotNumber].endchannel.voltage == nil) then              print(\"   no voltage channels\")           else               print(\"   Start voltage channel is \" .. slot[SlotNumber].startchannel.voltage)               print(\"   End voltage channel is \" .. slot[SlotNumber].endchannel.voltage)            end             if (slot[SlotNumber].startchannel.amps == nil) and <br>            (slot[SlotNumber].endchannel.amps == nil) then              print(\"   no amp channels\")           else               print(\"   Start amp channel is \" .. slot[SlotNumber].startchannel.amps)               print(\"   End amp channel is \" .. slot[SlotNumber].endchannel.amps)            end             if (slot[SlotNumber].digio == 1) then               print(\"   Start digital i/o channel is \" ..<br>               slot[SlotNumber].startchannel.digitalio)               print(\"   End digital i/o channel is \" .. slot[SlotNumber].endchannel.digitalio)            else              print(\"   no digio channels\")           end            if (slot[SlotNumber].totalizer == 1) then               print(\"   Start totalizer channel is \" .. slot[SlotNumber].startchannel.totalizer)               print(\"   End totalizer channel is \" .. slot[SlotNumber].endchannel.totalizer)           else              print(\"   no totalizer channels\")            end             if (slot[SlotNumber].startchannel.analogoutput == nil) and<br>             (slot[SlotNumber].endchannel.analogoutput == nil) then              print(\"   no analog output channels\")           else               print(\"   Start analog output channel is \" ..<br>             slot[SlotNumber].startchannel.analogoutput)               print(\"   End analog output channel is \" ..<br>             slot[SlotNumber].endchannel.analogoutput)            end              if (slot[SlotNumber].matrix == 1) then              print(\"   Channels on card are matrix type\")           end        end     end      for x = 1,6 do        print(\"Checking card channels in slot \" .. x)        CardChannels(x)     end    If the Series 3700A contains the following cards:  Slot 1: 3732  Slot 2: 3720  Slot 3: 3750  Slot 4: Empty  Slot 5: 3721  Slot 6: Empty  The output of this example is similar to:  Checking card channels in slot 1     no voltage channels     no amp channels     no digio channels     no totalizer channels     no analog output channels     Channels on card are matrix type  Checking card channels in slot 2     Start voltage channel is 1     End voltage channel is 60     no amp channels     no digio channels     no totalizer channels     no analog output channels  Checking card channels in slot 3     no voltage channels     no amp channels     Start digital i/o channel is 1     End digital i/o channel is 5     Start totalizer channel is 6     End totalizer channel is 9     Start analog output channel is 10     End analog output channel is 11  Checking card channels in slot 4     Slot is Empty  Checking card channels in slot 5     Start voltage channel is 1     End voltage channel is 40     Start amp channel is 41     End amp channel is 42     no digio channels     no totalizer channels     no analog output channels  Checking card channels in slot 6     Slot is Empty  Also see  Slot  slot[slot].startchannel.*  "},{"id":389,"title":"slot[slot].idn","url":"16328.htm","text":"This attribute returns a string that contains information about the plug-in card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  idnString = slot[slot].idn  idnString  The return string  slot  Slot number(1 to 6)  Details  The information that is returned depends on whether the plug-in card in the slot is a physical card or pseudocard.  For physical cards, this returns a comma&#8209;separated string that contains the model number, description, firmware revision, and serial number of the plug-in card installed in the specified slot.  For pseudocards, the response is Pseudo, followed by the model number, description, and ??? for the firmware revision and serial number.  Example  print(slot[3].idn)  If a 3723 is installed in slot 3, the response is:  3723,Dual 1x30 Reed Multiplexer,01.40e,1243657  Also see  None  "},{"id":390,"title":"slot[slot].interlock.override","url":"16329.htm","text":"This attribute suppresses or permits interlock errors to be generated.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Recall setup  Create configuration script<br>Save setup  0  Usage  value = slot[slot].interlock.override  slot[slot].interlock.override = value  value  Indicates the state of the interlock override:  slot.ON (1)  slot.OFF (0)  slot  The slot (1 to 6) containing the card to which the interlock state is applied  Details  This command suppresses errors that would otherwise be generated when the interlock is not closed. If the interlock is not physically connected, channels will still not close.  This attribute exists only for installed cards that support detecting an interlock break. Otherwise, the return value is nil. If the card supports detecting an interlock break, set this attribute to the appropriate response.   To enable interlock override on the card, set to slot.ON. To disable it, set to slot.OFF. This setting applies to all interlocks on the card.  Example  slot[3].interlock.override = slot.ON  Suppresses interlock errors.  Also see  slot[slot].interlock.state  "},{"id":391,"title":"slot[slot].interlock.state","url":"16330.htm","text":"This attribute indicates the interlock state of a card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Nonvolatile memory  1  Usage  value = slot[slot].interlock.state  value  Indicates whether the interlocks are engaged or not; see table below for possible return values  slot  The slot (1 to 6) containing the card to which the interlock state is applied  Details  This attribute will not exist for a slot if a card is not installed or the card installed does not support detecting an interlock break. In these cases, the return value is nil.   Return values for slot[slot].interlock.state  Return value  Description  nil  No card is installed or the installed card does not support interlocks  0  Interlocks 1 and 2 are disengaged on the card  1  Interlock 1 is engaged, interlock 2 (if it exists) is disengaged  2  Interlock 2 in engaged, interlock 1 is disengaged  3  Both interlock 1 and 2 are engaged  Use this attribute to query the interlock state for cards that support detecting interlock break.   Also see  slot[slot].interlock.override  "},{"id":392,"title":"slot[slot].isolated","url":"16331.htm","text":"This attribute indicates if the card in the specified slot supports isolated channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].isolated  value  1 if isolated channels are supported  slot  Slot number (1 to 6)  Details  This attribute is only available for a slot if the installed card supports the isolated channels. If isolated channels are not available, the return value is nil.  Example  IsolatedChan1 = slot[1].isolated  print(IsolatedChan1)  Query if slot 1 supports isolated channels. If it does support isolated channels, the output is:  1.000000000e+00  Also see  slot[X].idn  "},{"id":393,"title":"slot[slot].matrix","url":"16332.htm","text":"This attribute indicates if the card in the specified slot supports matrix channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].matrix  value  1 if matrix channels are supported  slot  Slot number (1 to 6)  Details  This attribute is only available for a slot if a card is installed and if the installed card supports matrix channels. If matrix channels are not available, the return value is nil.  Example  Matrix1 = slot[1].matrix  print(Matrix1)  Query if slot 1 supports matrix channels. If it does support matrix channels, the output is:  1.000000000e+00  Also see  slot[slot].idn  "},{"id":394,"title":"slot[slot].maxvoltage","url":"16333.htm","text":"This attribute returns the maximum voltage of all channels on a plug-in card in the specified slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  maximumVolts = slot[slot].maxvoltage  maximumVolts  The maximum voltage  slot  Slot number (1 to 6)  Details  This command is only available for a slot if the installed plug-in card supports voltage settings.  Example  maxVolts2 = slot[2].maxvoltage  print(maxVolts2)  Query the maximum voltage on slot 2. The output is similar to:  300   Also see  slot[slot].idn  "},{"id":395,"title":"slot[slot].multiplexer","url":"16334.htm","text":"This attribute indicates if the card in the specified slot supports multiplexer channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].multiplexer  value  1 if multiplexer channels are supported  slot  Slot number (1 to 6)  Details  This attribute is only available for a slot if the installed card supports multiplexer channels. If multiplexer channels are not available, the return value is nil.  Example  MuxChan1 = slot[1].multiplexer  print(MuxChan1)  Query if slot 1 supports multiplexer channels. If it does support multiplexer channels, the output is:  1.000000000e+00  Also see  slot[slot].idn  "},{"id":396,"title":"slot[slot].poles.four","url":"16335.htm","text":"This attribute indicates if a four-pole setting is supported for the channels on the card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  fourPole = slot[slot].poles.four  fourPole  The return value  slot  Slot number (1 to 6)  Details  This attribute only exists if a card is installed and if the card supports four&#8209;pole settings for the channels on the card. If not, the value is nil. If supported, the value is 1.  Example  fourPole3 = slot[3].poles.four  print(fourPole3)  Queries if slot 3 supports four-pole settings for the channels on the card.  Output if card supports four pole:  1.000000000e+00  Output if card does not support four pole:  nil  Also see  slot[slot].poles.one  slot[slot].poles.two  "},{"id":397,"title":"slot[slot].poles.one","url":"16336.htm","text":"This attribute indicates if a one-pole setting is supported for the channels on the specified card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  onePole = slot[slot].poles.one  onePole  The return value  slot  Slot number  (1 to 6)  Details  This attribute only exists if a card is installed and if the card supports one&#8209;pole settings for the channels on the card. If not, the value is nil. If supported, the value is 1.  Example  print(slot[3].poles.one)  Query to see if slot 3 supports one-pole settings for the channels on the card.  Output if card supports one pole:  1.000000000e+00  Output if card does not support one pole:  nil  Also see  slot[slot].poles.four  slot[slot].poles.two  "},{"id":398,"title":"slot[slot].poles.two","url":"16337.htm","text":"This attribute indicates if a two-pole setting is supported for the channels on the card.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  twoPole = slot[slot].poles.two  twoPole  The return value  slot  Slot number (1 to 6)  Details  This attribute only exists is a card is installed and if the card supports a two&#8209;pole setting for the channels on the card.  If not, the value is nil. If supported, the value is 1.  Example  twoPole3 = slot[3].poles.two  print(twoPole3)  Query to see if slot 3 supports two-pole settings for the channels on the card.  Output if card supports two pole:  1.000000000e+00  Output if card does not support two pole:  nil  Also see  slot[slot].poles.one  slot[slot].poles.four  "},{"id":399,"title":"slot[slot].pseudocard","url":"13964.htm","text":"This attribute specifies a pseudocard to implement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Restore configuration<br>Instrument reset<br>Power cycle  Configuration script  slot.PSEUDO_NONE  Usage  pseudoCard = slot[slot].pseudocard  slot[slot].pseudocard = pseudoCard  pseudoCard  Set pseudocard to one of the following values:  slot.PSEUDO_NONE or 0 for no pseudocard selection  3720 for 3720 Dual 1&nbsp;×&nbsp;30 Multiplexer card simulation  3721 for 3721 Dual 1&nbsp;×&nbsp;20 Multiplex card simulation  3722 for 3722 Dual 1&nbsp;×&nbsp;48 Multiplexer card simulation  3723 for 3723 Dual 1&nbsp;×&nbsp;30 Reed Multiplexer card simulation  3724 for 3724 Dual 1&nbsp;×&nbsp;30 FET Multiplexer card simulation  3730 for 3730 6&nbsp;×&nbsp;16 High Density Matrix card simulation  3731 for 3731 6&nbsp;×&nbsp;16 High Speed Reed Relay Matrix card simulation  3732 or 37320 for 3732 Quad 4&nbsp;×&nbsp;28 Ultra-High Density Reed Relay Matrix card simulation  37321 for 3732 Dual 4&nbsp;×&nbsp;56 Ultra-High Density Reed Relay Matrix card simulation  37322 for 3732 Single 4&nbsp;×&nbsp;112 Ultra-High Density Reed Relay Matrix card simulation  37323 for 3732 Dual 8&nbsp;×&nbsp;28 Ultra-High Density Reed Relay Matrix card simulation  37324 for 3732 Single 16&nbsp;×&nbsp;28 Ultra-High Density Reed Relay Matrix card simulation  3740 for 3740 32-Channel Isolated Switch card simulation  3750 for 3750 Multifunction I/O card  slot  Slot number (1 to 6)  Details  Pseudocards allow you to configure your system without having an actual plug-in card installed in your system. You can perform open, close, and scan operations and configure your system with pseudocards.  This command is only applicable to a slot that does not have a plug-in card or pseudocard installed. If a pseudocard is presently assigned to the slot, you must set the slot to no pseudocard before assigning the new pseudocard.  After assigning a pseudocard, you can use valid commands for the plug-in card for that slot.  Changing the pseudocard assignment from a pseudocard to no pseudocard invalidates scan lists that include that slot.  If a module is installed in the slot, this command returns nil. If the slot is empty and no pseudocard is installed, the return is 0.  Example  slot[6].pseudocard = 3720  Sets the pseudocard of slot 6 for 3720 plug-in card simulation.  Also see  slot[slot].idn  "},{"id":400,"title":"slot[slot].rows.matrix","url":"17756.htm","text":"This attribute returns the number of rows in the matrix on the card in the specified slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].rows.matrix  value  Number of rows in the matrix card of the selected slot  slot  Slot number (1 to 6)  Details  This attribute is only available for a slot if the installed card supports matrix channels. If matrix channels are not available, the return value is nil.  Example  print(slot[4].rows.matrix)  Returns the number of rows in the matrix on the card in slot 4.  Example output:  1.2000000000e+01  Also see  slot[slot].columns.matrix  slot[slot].idn  slot[slot].matrix  "},{"id":401,"title":"slot[slot].startchannel.*","url":"13723.htm","text":"These attributes indicates whether or not the channel in the specified slot supports a feature and if so, which channels support the feature.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].startchannel.amps  value = slot[slot].startchannel.analogoutput  value = slot[slot].startchannel.digitalio  value = slot[slot].startchannel.isolated  value = slot[slot].startchannel.totalizer  value = slot[slot].startchannel.voltage  value  The channel number of the starting channel of the group of channels that supports the feature  X  Slot number (1 to 6)  Details  This attribute is only available for a slot if the installed card supports the selected feature. If the attribute is not available, the return value is nil.  Channels are grouped on the cards by feature sets, so you can use the start and ending channel numbers to identify a group of channels that supports a particular feature. If the card supports the feature, the returned value is the number of the starting channel.  If only one channel in the card supports the feature, the starting channel will match the ending channel number.  The commands support different types of channels:  slot[slot].startchannel.amps: Channel supports amperage measurements  slot[slot].startchannel.analogoutput: Channel supports a digital analog output (DAC)  slot[slot].startchannel.digitalio: Channel supports digital inputs and outputs  slot[slot].startchannel.isolated: Channel supports isolated channels  slot[slot].startchannel.totalizer: Channel supports totalizer channels  slot[slot].startchannel.voltage: Channel supports voltage or two-wire measurements  Example  CardChannels = function(SlotNumber)        if slot[SlotNumber].idn == \"Empty Slot\" then           print(\"   Slot is Empty\")        else           if (slot[SlotNumber].startchannel.voltage == nil) and<br>            (slot[SlotNumber].endchannel.voltage == nil) then              print(\"   no voltage channels\")           else               print(\"   Start voltage channel is \" ..<br>             slot[SlotNumber].startchannel.voltage)               print(\"   End voltage channel is \" .. slot[SlotNumber].endchannel.voltage)            end             if (slot[SlotNumber].startchannel.amps == nil) and <br>            (slot[SlotNumber].endchannel.amps == nil) then              print(\"   no amp channels\")           else               print(\"   Start amp channel is \" .. slot[SlotNumber].startchannel.amps)               print(\"   End amp channel is \" .. slot[SlotNumber].endchannel.amps)            end             if (slot[SlotNumber].digio == 1) then               print(\"   Start digital i/o channel is \" ..<br>             slot[SlotNumber].startchannel.digitalio)               print(\"   End digital i/o channel is \" ..<br>             slot[SlotNumber].endchannel.digitalio)            else              print(\"   no digio channels\")           end              if (slot[SlotNumber].totalizer == 1) then               print(\"   Start totalizer channel is \" ..<br>             slot[SlotNumber].startchannel.totalizer)               print(\"   End totalizer channel is \" ..<br>             slot[SlotNumber].endchannel.totalizer)           else              print(\"   no totalizer channels\")            end              if (slot[SlotNumber].startchannel.analogoutput == nil) and<br>             (slot[SlotNumber].endchannel.analogoutput == nil) then              print(\"   no analog output channels\")           else               print(\"   Start analog output channel is \" ..<br>             slot[SlotNumber].startchannel.analogoutput)               print(\"   End analog output channel is \" ..<br>             slot[SlotNumber].endchannel.analogoutput)            end             if (slot[SlotNumber].matrix == 1) then              print(\"   Channels on card are matrix type\")           end        end     end      for x = 1,6 do        print(\"Checking card channels in slot \" .. x)        CardChannels(x)     end    If the Series 3700A contains the following cards:  Slot 1: 3732  Slot 2: 3720  Slot 3: 3750  Slot 4: Empty  Slot 5: 3721  Slot 6: Empty  The output of this example is similar to:  Checking card channels in slot 1     no voltage channels     no amp channels     no digio channels     no totalizer channels     no analog output channels     Channels on card are matrix type  Checking card channels in slot 2     Start voltage channel is 1     End voltage channel is 60     no amp channels     no digio channels     no totalizer channels     no analog output channels  Checking card channels in slot 3     no voltage channels     no amp channels     Start digital i/o channel is 1     End digital i/o channel is 5     Start totalizer channel is 6     End totalizer channel is 9     Start analog output channel is 10     End analog output channel is 11  Checking card channels in slot 4     Slot is Empty  Checking card channels in slot 5     Start voltage channel is 1     End voltage channel is 40     Start amp channel is 41     End amp channel is 42     no digio channels     no totalizer channels     no analog output channels  Checking card channels in slot 6     Slot is Empty  Also see  slot[slot].endchannel.*  "},{"id":402,"title":"slot[slot].tempsensor","url":"16345.htm","text":"This attribute indicates if the module in the specified slot supports temperature sensor channels.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].tempsensor  value  If temperature sensor channels are supported, returns 1  slot  Slot number (1 to 6)  Details  This command is only available for a slot if the installed module supports temperature sensor channels. If temperature sensor channels are not available, the return value is nil.  Example  TempSensor = slot[1].tempsensor  print(TempSensor)  Query to determine if slot 1 supports temperature sensor channels. If it does support temperature sensor channels, the output is:  1.000000000e+00  Also see  slot[slot].idn  "},{"id":403,"title":"slot[slot].thermal.state","url":"16346.htm","text":"This attribute indicates the thermal state of the card in the specified slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  value = slot[slot].thermal.state  value  0 if thermal conditions will not affect specifications  1 if  thermal conditions are getting warm enough to affect specifications  slot  Slot number (1 to 6)  Details  This attribute is only available for a slot if a card is installed and if the installed card supports thermal state detection. If thermal state detection is not available, the return value is nil.  Example  print(slot[3].thermal.state)  Query the thermal state on slot 3. If specifications might be affected by the thermal state, the output is:  1.000000000e+00  Also see  slot[slot].idn  "},{"id":404,"title":"status.condition","url":"15822.htm","text":"This attribute stores the status byte condition register.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not saved  Not applicable  Usage  statusByte = status.condition  statusByte  The status byte; a zero (0) indicates no bits set; other values indicate various bit&nbsp;settings  Details  This attribute is used to read the status byte, which is returned as a numeric value. The binary equivalent of the value of this attribute indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B7. For example, if a value of 1.29000e+02 (which is 129) is read as the value of this register, the binary equivalent is 1000&nbsp;0001. This value indicates that bit B0 and bit B7 are set.  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  *  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  The returned value can indicate one or more status events occurred. When an enabled status event occurs, a summary bit is set in this register to indicate the event occurrence.  The individual bits of this register have the meanings described in the following table.  Bit  Value and description  B0  status.MEASUREMENT_SUMMARY_BIT  status.MSB  Set summary bit indicates that an enabled measurement event has occurred.   Bit B0 decimal value: 1  B1  status.SYSTEM_SUMMARY_BIT  status.SSB  Set summary bit indicates that an enabled system event has occurred.  Bit B1 decimal value: 2  B2  status.ERROR_AVAILABLE  status.EAV  Set summary bit indicates that an error or status message is present in the error queue.   Bit B2 decimal value: 4  B3  status.QUESTIONABLE_SUMMARY_BIT  status.QSB  Set summary bit indicates that an enabled questionable event has occurred.   Bit B3 decimal value: 8  B4  status.MESSAGE_AVAILABLE  status.MAV  Set summary bit indicates that a response message is present in the output queue.   Bit B4 decimal value: 16  B5  status.EVENT_SUMMARY_BIT  status.ESB  Set summary bit indicates that an enabled standard event has occurred.   Bit B5 decimal value: 32  B6  status.MASTER_SUMMARY_STATUS  status.MSS  Request Service (RQS)/Master Summary Status (MSS). Depending on how it is used, bit B6 of the status byte register is either the Request for Service (RQS) bit or the Master Summary Status (MSS) bit:  When using the GPIB, USB, or VXI-11 serial poll sequence of the Series 3700A to obtain the status byte (serial poll byte), B6 is the RQS bit. The set bit indicates that the Request Service (RQS) bit of the status byte (serial poll byte) is set and a serial poll (SRQ) has occurred.   When using the status.condition register command or the *STB? common command to read the status byte, B6 is the MSS bit. Set bit indicates that an enabled summary bit of the status byte register is set.  Bit B6 decimal value: 64  B7  status.OPERATION_SUMMARY_BIT  status.OSB  Set summary bit indicates that an enabled operation event has occurred.  Bit B7 decimal value: 128  In addition to the above constants, when more than one bit of the register is set, statusByte equals the sum of their decimal weights. For example, if 129 is returned, bits B0 and B7 are set (1 + 128).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Example  statusByte = status.condition  print(statusByte)  Returns statusByte.  Sample output:  1.29000e+02  Converting this output (129) to its binary equivalent yields 1000 0001   Therefore, this output indicates that the set bits of the status byte condition register are presently B0 (MSS) and B7 (OSB).  Also see  Status byte and service request (SRQ)  "},{"id":405,"title":"status.measurement.*","url":"15823.htm","text":"These attributes contain the measurement event register set.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  399 (All bits set)  Usage  measurementRegister = status.measurement.condition  measurementRegister = status.measurement.enable  measurementRegister = status.measurement.event  measurementRegister = status.measurement.ntr  measurementRegister = status.measurement.ptr  status.measurement.enable = measurementRegister  status.measurement.ntr = measurementRegister  status.measurement.ptr = measurementRegister  measurementRegister  The status of the measurement event register; a zero (0) indicates no bits set (also send 0 to clear all bits);the only valid value other than 0 is 8  Details  These attributes read or write the measurement event registers.  Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15.   For example, assume value 384 is returned for the enable register. The binary equivalent is 0000&nbsp;0001&nbsp;1000&nbsp;0000. This value indicates that bit B7 (ROF) and bit B8 (BAV) are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  status.measurement.LOWER_LIMIT1  status.measurement.LLMT1  Set bit indicates that a reading has exceeded the lower limit 1 value.  Bit B0 decimal value: 1  B1  status.measurement.UPPER_LIMIT1  status.measurement.ULMT1  Set bit indicates that a reading has exceeded the upper limit 1 value.  Bit B1 decimal value: 2  B2  status.measurement.LOWER_LIMIT2  status.measurement.LLMT2  Set bit indicates that a reading has exceeded the lower limit 2 value.  Bit B2 decimal value: 4  B3  status.measurement.UPPER_LIMIT2  status.measurement.ULMT2  Set bit indicates that a reading has exceeded the upper limit 2 value.  Bit B3 decimal value: 8  B4-B6  Not used  Not applicable  B7  status.measurement.READING_OVERFLOW  status.measurement.ROF  Set bit indicates that a reading has resulted in an overflow measurement value.  Bit B7 decimal value: 128  B8  status.measurement.BUFFER_AVAILABLE  status.measurement.BAV  Set bit indicates that a reading buffer is storing measurement values.  Bit B8 decimal value: 256  Binary value: 0001 0000 0000  B9-B15  Not used  Not applicable  For example, assume value 257 is returned for the enable register. The binary equivalent is 0000&nbsp;0001&nbsp;0000&nbsp;0001. This value indicates that bit B0 (VLMT) and bit B8 (BAV) are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  In addition to the above constants, measurementRegister can be set to the decimal equivalent of the bit to set. To set more than one bit of the register, set measurementRegister to the sum of their decimal weights. For example, to set bits B1 and B8, set measurementRegister to 258 (which is the sum of 2 + 256).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example  status.measurement.enable = status.measurement.BAV  Sets the BAV bit of the measurement event enable register.  Also see  Measurement summary bit (Measurement event register)  "},{"id":406,"title":"status.node_enable","url":"15830.htm","text":"This attribute stores the system node enable register.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Status reset  Not saved  0  Usage  nodeEnableRegister = status.node_enable  status.node_enable = nodeEnableRegister  nodeEnableRegister  The status of the system node enable register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  This attribute is used to read or write to the system node enable register. Reading the system node enable register returns a value. The binary equivalent of the value of this attribute indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B7. For example, if a value of 1.29000e+02 (which is 129) is read as the value of this register, the binary equivalent is 1000&nbsp;0001. This value indicates that bit B0 and bit B7 are set.  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  *  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  Assigning a value to this attribute enables one or more status events. When an enabled status event occurs, a summary bit is set in the appropriate system summary register. The register and bit that is set depends on the TSP-Link node number assigned to this instrument.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  status.MEASUREMENT_SUMMARY_BIT  status.MSB  Set summary bit indicates that an enabled measurement event has occurred.  Bit B0 decimal value: 1  B1  Not used  B2  status.ERROR_AVAILABLE  status.EAV  Set summary bit indicates that an error or status message is present in the error queue.  Bit B2 decimal value: 4  B3  status.QUESTIONABLE_SUMMARY_BIT  status.QSB  Set summary bit indicates that an enabled questionable event has occurred.  Bit B3 decimal value: 8  B4  status.MESSAGE_AVAILABLE  status.MAV  Set summary bit indicates that a response message is present in the output queue.  Bit B4 decimal value: 16  B5  status.EVENT_SUMMARY_BIT  status.ESB  Set summary bit indicates that an enabled standard event has occurred.  Bit B5 decimal value: 32  B6  status.MASTER_SUMMARY_STATUS  status.MSS  Set bit indicates that an enabled Master Summary Status (MSS) bit of the Status Byte Register is set.  Bit B6 decimal value: 64  B7  status.OPERATION_SUMMARY_BIT  status.OSB  Set summary bit indicates that an enabled operation event has occurred.  Bit B7 decimal value: 128  As an example, to set the B0 bit of the system node enable register, set status.node_enable&nbsp;=&nbsp;status.MSB.  In addition to the above values, nodeEnableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set nodeEnableRegister to the sum of their decimal weights. For example, to set bits B0 and B7, set nodeEnableRegister to 129 (1 + 128).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Example 1  nodeEnableRegister = status.MSB + status.OSB  status.node_enable = nodeEnableRegister  Use constants to set the MSB and OSB bits of the system node enable register.  Example 2  -- decimal 129 = binary 10000001  nodeEnableRegister = 129  status.node_enable = nodeEnableRegister  Sets the MSB and OSB bits of the system node enable register using a decimal value.  Also see  status.condition  status.system.*  Status byte and service request (SRQ)  "},{"id":407,"title":"status.node_event","url":"15831.htm","text":"This attribute stores the status node event register.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not saved  0  Usage  nodeEventRegister = status.node_event  nodeEventRegister  The status of the node event register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  This attribute is used to read the status node event register, which is returned as a numeric value (reading this register returns a value). The binary equivalent of the value of this attribute indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B7. For example, if a value of 1.29000e+02 (which is 129) is read as the value of this register, the binary equivalent is 1000&nbsp;0001. This value indicates that bit B0 and bit B7 are set.  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  *  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  The returned value can indicate one or more status events occurred.  Bit  Value and description  B0  status.MEASUREMENT_SUMMARY_BIT  status.MSB  Set summary bit indicates that an enabled measurement event has occurred.  Bit B0 decimal value: 1  B1  Not used  B2  status.ERROR_AVAILABLE  status.EAV  Set summary bit indicates that an error or status message is present in the error queue.  Bit B2 decimal value: 4  B3  status.QUESTIONABLE_SUMMARY_BIT  status.QSB  Set summary bit indicates that an enabled questionable event has occurred.  Bit B3 decimal value: 8  B4  status.MESSAGE_AVAILABLE  status.MAV  Set summary bit indicates that a response message is present in the output queue.  Bit B4 decimal value: 16  B5  status.EVENT_SUMMARY_BIT  status.ESB  Set summary bit indicates that an enabled standard event has occurred.  Bit B5 decimal value: 32  B6  status.MASTER_SUMMARY_STATUS  status.MSS  Set bit indicates that an enabled Master Summary Status (MSS) bit of the Status Byte register is set.  Bit B6 decimal value: 64  B7  status.OPERATION_SUMMARY_BIT  status.OSB  Set summary bit indicates that an enabled operation event has occurred.  Bit B7 decimal value: 128  In addition to the above constants, nodeEventRegister can be set to the decimal equivalent of the bits set. When more than one bit of the register is set, nodeEventRegister contains the sum of their decimal weights. For example, if 129 is returned, bits B0 and B7 are set (1 + 128).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Example  nodeEventRegister = status.node_event  print(nodeEventRegister)  Reads the status node event register.  Sample output:  1.29000e+02  Converting this output (129) to its binary equivalent yields 1000 0001. Therefore, this output indicates that the set bits of the status byte condition register are presently B0 (MSB) and B7 (OSB).  Also see  Status byte and service request (SRQ)  status.condition  status.system.*  "},{"id":408,"title":"status.operation.*","url":"15833.htm","text":"These attributes manage the operation status register set of the status model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  22545  Usage  operationRegister = status.operation.condition  operationRegister = status.operation.enable  operationRegister = status.operation.event  operationRegister = status.operation.ntr  operationRegister = status.operation.ptr  status.operation.enable = operationRegister  status.operation.ntr = operationRegister  status.operation.ptr = operationRegister  operationRegister  The status of the operation status register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes read or write the operation status registers.  Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, if a value of 2.04800e+04 (which is 20,480) is read as the value of the condition register, the binary equivalent is 0101&nbsp;0000&nbsp;0000&nbsp;0000. This value indicates that bit B14 (PROGRAM_RUNNING) and bit B12 (USER) are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  1  0  1  0  0  0  0  0  0  0  0  0  0  0  0  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  status.operation.CALIBRATING  status.operation.CAL  Set bit indicates that the DMM is calibrating.  Bit B0 decimal value: 1  B1-B3  Not used  B4  status.operation.MEASURING  status.operation.MEAS  Set bit indicates that DMM is measuring.  Bit B4 decimal value: 16  B5 to B9  Not used  B11  status.operation.PROMPTS  status.operation.PRMPTS  Set bit indicates that the command prompts are enabled.  Bit B11 decimal value: 2,048  B12  status.operation.USER  Set bit indicates that the summary bit from the status.operation.user register is set.  Bit B12 decimal value: 4,096  B14  status.operation.PROGRAM_RUNNING  status.operation.PROG  Set bit indicates that a command or program is running.  Bit B14 decimal value: 16,384  B15  Not used  As an example, to set bit B12 of the operation status enable register, set status.operation.enable = status.operation.USER.  In addition to the above constants, operationRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal weights. For example, to set bits B12 and B14, set operationRegister to 20,480 (which is the sum of 4,096 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  The used bits of the operation event registers are:  Bit B0, CAL - Set bit indicates that the instrument is calibrating.  Bit B4, MEAS - Bit is set when making a measurement.  Bit B11, PRMPTS - Set bit indicates that command prompts are enabled.  Bit B12, USER - Set bit indicates that an enabled bit in the operation status user register is set.  Bit B14, PROG - Set bit indicates that a program is running.  Example 1  operationRegister = status.operation.USER + status.operation.PROG  status.operation.enable = operationRegister  Uses constants to set the USER and PROG bits of the operation status enable register.  Example 2  -- decimal 20480 = binary 0101 0000 0000 0000  operationRegister = 20480  status.operation.enable = operationRegister  Uses a decimal value to set the USER and PROG bits of the operation status enable register.  Also see  None  "},{"id":409,"title":"status.operation.user.*","url":"15852.htm","text":"These attributes manage the operation status user register set of the status model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (RW)  Yes  Status reset  Not saved  0  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (All bits set)  Usage  operationRegister = status.operation.user.condition  operationRegister = status.operation.user.enable  operationRegister = status.operation.user.event  operationRegister = status.operation.user.ntr  operationRegister = status.operation.user.ptr  status.operation.user.condition = operationRegister  status.operation.user.enable = operationRegister  status.operation.user.ntr = operationRegister  status.operation.user.ptr = operationRegister  operationRegister  The status of the operation status user register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the operation status user registers. Reading a status register returns a value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bits B0 and B7 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.operation.user.BIT0  1  B1  status.operation.user.BIT1  2  B2  status.operation.user.BIT2  4  B3  status.operation.user.BIT3  8  B4  status.operation.user.BIT4  16  B5  status.operation.user.BIT5  32  B6  status.operation.user.BIT6  64  B7  status.operation.user.BIT7  128  B8  status.operation.user.BIT8  256  B9  status.operation.user.BIT9  512  B10  status.operation.user.BIT10  1,024  B11  status.operation.user.BIT11  2,048  B12  status.operation.user.BIT12  4,096  B13  status.operation.user.BIT13  8,192  B14  status.operation.user.BIT14  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the operation status user enable register, set status.operation.user.enable = status.operation.user.BIT0.  In addition to the above constants, operationRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set operationRegister to the sum of their decimal values. For example, to set bits B11 and B14, set operationRegister to 18,432 (which is the sum of 2,048&nbsp;+&nbsp;16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  operationRegister = status.operation.user.BIT11 + status.operation.user.BIT14  status.operation.user.enable = operationRegister  Uses constants to set bits B11 and B14 of the operation status user enable register.  Example 2  -- 18432 = binary 0100 1000 0000 0000  operationRegister = 18432  status.operation.enable = operationRegister  Uses the decimal value to set bits B11 and B14 of the operation status user enable register.  Also see  status.operation.*  "},{"id":410,"title":"status.questionable.*","url":"15853.htm","text":"These attributes manage the questionable status register set of the status model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,256 (All bits set)  Usage  questionableRegister = status.questionable.condition  questionableRegister = status.questionable.enable  questionableRegister = status.questionable.event  questionableRegister = status.questionable.ntr  questionableRegister = status.questionable.ptr  status.questionable.enable = questionableRegister  status.questionable.ntr = questionableRegister  status.questionable.ptr = questionableRegister  questionableRegister  The status of the questionable status register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the questionable status registers. Reading a status register returns a value. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.22880e+04 (which is 12,288) is read as the value of the condition register, the binary equivalent is 0011&nbsp;0000&nbsp;0000&nbsp;0000. This value indicates that bits B12 and B13 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  0  * Least significant bit<br>** Most significant bit<br>  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Description  B0  Not used  Not available  B1  status.questionable.SLOT1_INTERLOCK  status.questionable.S1INL  Sets the interlock connection of the card in slot 1.  Bit B1 decimal value: 2  B2  status.questionable.SLOT2_INTERLOCK  status.questionable.S2INL  Sets the interlock connection of the card in slot 2.  Bit B2 decimal value: 4  B3  status.questionable.SLOT3_INTERLOCK  status.questionable.S3INL  Sets the interlock connection of the card in slot 3.  Bit B3 decimal value: 8  B4  status.questionable.SLOT4_INTERLOCK  status.questionable.S4INL  Sets the interlock connection of the card in slot 4.  Bit B4 decimal value: 16  B5  status.questionable.SLOT5_INTERLOCK  status.questionable.S5INL  Sets the interlock connection of the card in slot 5.  Bit B5 decimal value: 32  B6  status.questionable.SLOT6_INTERLOCK  status.questionable.S6INL  Sets the interlock connection of the card in slot 6.  Bit B6 decimal value: 64  B7  status.questionable.DMM_CONNECTION  status.questionable.DMMCONN  Indicates that the DMM connection is in question for a measurement made.  Bit B7 decimal value: 128  B8  status.questionable.CALIBRATION  status.questionable.CAL  Indicates that the calibration of the instrument is in question.  Bit B8 decimal value: 256  B9  status.questionable.S1THR  status.questionable.SLOT1_THERMAL  Indicates that the thermal functions of the card in slot 1 are questionable.  Bit B9 decimal value: 512  B10  status.questionable.S2THR  status.questionable.SLOT2_THERMAL  Indicates that the thermal functions of the card in slot 2 are questionable.  Bit B10 decimal value: 1,024  B11  status.questionable.S3THR  status.questionable.SLOT3_THERMAL  Indicates that the thermal functions of the card in slot 3 are questionable.  Bit B11 decimal value: 2,048  B12  status.questionable.S4THR  status.questionable.SLOT4_THERMAL  Indicates that the thermal functions of the card in slot 4 are questionable.  Bit B12 decimal value: 4,096  B13  status.questionable.S5THR  status.questionable.SLOT5_THERMAL  Indicates that the thermal functions of the card in slot 5 are questionable.  Bit B13 decimal value: 8,192  B14  status.questionable.S6THR  status.questionable.SLOT6_THERMAL  Indicates that the thermal functions of the card in slot 6 are questionable.  Bit B14 decimal value: 16,384  B15  Not used  Not available  As an example, to set bit B9 of the questionable status enable register, set status.questionable.enable = status.questionable.SLOT1_THERMAL.  In addition to the above constants, questionableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set questionableRegister to the sum of their decimal weights. For example, to set bits B12 and B13, set questionableRegister to 12,288 (which is the sum of 4,096 + 8,192).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  questionableRegister = status.questionable.S1INL + status.questionable.S6INL  status.questionable.enable = questionableRegister  Uses constants to set bits B1 and B6 of the status questionable enable register.  Example 2  -- decimal 66 = binary 0100 0010  questionableRegister = 66  status.questionable.enable = questionableRegister  Uses a decimal value to set bits B1 and B6 of the status questionable enable register.  Also see  Questionable summary bit (Questionable event register)  "},{"id":411,"title":"status.request_enable","url":"17593.htm","text":"This attribute stores the service request (SRQ) enable register.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Status reset  Not saved  0  Usage  requestSRQEnableRegister = status.request_enable  status.request_enable = requestSRQEnableRegister  requestSRQEnableRegister  The status of the service request (SRQ) enable register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  This attribute is used to read or write to the service request enable register. Reading the service request enable register returns a value. The binary equivalent of the value of this attribute indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B7. For example, if a value of 1.29000e+02 (which is 129) is read as the value of this register, the binary equivalent is 1000&nbsp;0001. This value indicates that bit B0 and bit B7 are set.  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  *  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  B0  status.MEASUREMENT_SUMMARY_BIT  status.MSB  Set summary bit indicates that an enabled event in the Measurement Event Register has&nbsp;occurred.  Bit B0 decimal value: 1  B1  status.SYSTEM_SUMMARY_BIT  status.SSB  Set summary bit indicates that an enabled event in the System Summary Register has occurred.  Bit B1 decimal value: 2  B2  status.ERROR_AVAILABLE  status.EAV  Set summary bit indicates that an error or status message is present in the error queue.  Bit B2 decimal value: 4  B3  status.QUESTIONABLE_SUMMARY_BIT  status.QSB  Set summary bit indicates that an enabled event in the Questionable Status Register has&nbsp;occurred.  Bit B3 decimal value: 8  B4  status.MESSAGE_AVAILABLE  status.MAV  Set summary bit indicates that a response message is present in the output queue.  Bit B4 decimal value: 16  B5  status.EVENT_SUMMARY_BIT  status.ESB  Set summary bit indicates that an enabled event in the Standard Event Status Register has&nbsp;occurred.  Bit B5 decimal value: 32  B6  Not used  B7  status.OPERATION_SUMMARY_BIT  status.OSB  Set summary bit indicates that an enabled event in the Operation Status Register has occurred.  Bit B7 decimal value: 128  As an example, to set bit B0 of the service request enable register, set status.request_enable = status.MSB.  In addition to the above values, requestSRQEnableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set requestSRQEnableRegister to the sum of their decimal weights. For example, to set bits B0 and B7, set requestSRQEnableRegister to 129 (1 + 128).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Example 1  requestSRQEnableRegister = status.MSB + status.OSB  status.request_enable = requestSRQEnableRegister  Uses constants to set the MSB and OSB bits of the service request (SRQ) enable register.  Example 2  -- decimal 129 = binary 10000001  requestSRQEnableRegister = 129  status.request_enable = requestSRQEnableRegister  Uses a decimal value to set the MSB and OSB bits of the service request (SRQ) enable register.  Also see  Status byte and service request (SRQ)  status.condition  status.system.*  "},{"id":412,"title":"status.request_event","url":"17594.htm","text":"This attribute stores the service request (SRQ) event register.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not saved  0  Usage  requestSRQEventRegister = status.request_event  requestSRQEventRegister  The status of the request event register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  This attribute is used to read the service request event register, which is returned as a numeric value. Reading this register returns a value. The binary equivalent of the value of this attribute indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B7. For example, if a value of 1.29000e+02 (which is 129) is read as the value of this register, the binary equivalent is 1000&nbsp;0001. This value indicates that bit B0 and bit B7 are set.  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  *  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  The returned value can indicate one or more status events occurred.  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value and description  B0  status.MEASUREMENT_SUMMARY_BIT  status.MSB  Set summary bit indicates that an enabled event in the Measurement Event Register has occurred.  Bit B0 decimal value: 1  B1  status.SYSTEM_SUMMARY_BIT  status.SSB  Set summary bit indicates that an enabled event in the System Summary Register has occurred.   Bit B1 decimal value: 2  B2  status.ERROR_AVAILABLE  status.EAV  Set summary bit indicates that an error or status message is present in the error queue.  Bit B2 decimal value: 4  B3  status.QUESTIONABLE_SUMMARY_BIT  status.QSB  Set summary bit indicates that an enabled event in the Questionable Status Register has occurred.  Bit B3 decimal value: 8  B4  status.MESSAGE_AVAILABLE  status.MAV  Set summary bit indicates that a response message is present in the output queue.  Bit B4 decimal value: 16  B5  status.EVENT_SUMMARY_BIT  status.ESB  Set summary bit indicates that an enabled event in the Standard Event Status Register has occurred.  Bit B5 decimal value: 32  B6  Not used  B7  status.OPERATION_SUMMARY_BIT  status.OSB  Set summary bit indicates that an enabled event in the Operation Status Register has occurred.  Bit B7 decimal value: 128  In addition to the above constants, requestEventRegister can be set to the decimal equivalent of the bits set. When more than one bit of the register is set, requestEventRegister contains the sum of their decimal weights. For example, if 129 is returned, bits B0 and B7 are set (1 + 128).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Example  requestEventRegister = status.request_event  print(requestEventRegister)  Reads the status request event register.  Sample output:  1.29000e+02  Converting this output (129) to its binary equivalent yields 1000 0001.  Therefore, this output indicates that the set bits of the status request event register are presently B0 (MSB) and B7 (OSB).  Also see  status.condition  status.system.*  Status byte and service request (SRQ)  "},{"id":413,"title":"status.reset()","url":"15861.htm","text":"This function resets all bits in the status model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  status.reset()  Details  This function clears all status data structure registers (enable, event, NTR, and PTR) to their default values. For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers.  Example  status.reset()  Resets the instrument status model.  Also see  Status model  "},{"id":414,"title":"status.standard.*","url":"15862.htm","text":"These attributes manage the standard event status register set of the status model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  253 (All bits set)  Usage  standardRegister = status.standard.condition  standardRegister = status.standard.enable  standardRegister = status.standard.event  standardRegister = status.standard.ntr  standardRegister = status.standard.ptr  status.standard.enable = standardRegister  status.standard.ntr = standardRegister  status.standard.ptr = standardRegister  standardRegister  The status of the standard event status register; a zero (0) indicates no bits set (also send 0 to clear all bits); other values indicate various bit settings  Details  These attributes are used to read or write to the standard event status registers. Reading a status register returns a value. The binary equivalent of the returned value indicates which register bits are set. The least significant bit of the binary number is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  B0  status.standard.OPERATION_COMPLETE  status.standard.OPC  Set bit indicates that all pending selected instrument operations are completed and the instrument is ready to accept new commands. The bit is set in response to an *OPC command. The opc() function can be used in place of the *OPC command.  Bit B0 decimal value: 1  B1  Not used  B2  status.standard.QUERY_ERROR  status.standard.QYE  Set bit indicates that you attempted to read data from an empty Output Queue.  Bit B2 decimal value: 4  B3  status.standard.DEVICE_DEPENDENT_ERROR  status.standard.DDE  Set bit indicates that an instrument operation did not execute properly due to some internal condition.   Bit B3 decimal value: 8  B4  status.standard.EXECUTION_ERROR  status.standard.EXE  Set bit indicates that the instrument detected an error while trying to execute a command.  Bit B4 decimal value: 16  B5  status.standard.COMMAND_ERROR  status.standard.CME  Set bit indicates that a command error has occurred. Command errors include:  IEEE Std 488.2 syntax error: Instrument received a message that does not follow the defined syntax of the IEEE Std 488.2 standard.  Semantic error: Instrument received a command that was misspelled or received an optional IEEE Std 488.2 command that is not implemented.  GET error: The instrument received a Group Execute Trigger (GET) inside a program message.  Bit B5 decimal value: 32  B6  status.standard.USER_REQUEST  status.standard.URQ  Set bit indicates that the LOCAL key on the instrument front panel was pressed.  Bit B6 decimal value: 64  B7  status.standard.POWER_ON  status.standard.PON  Set bit indicates that the instrument has been turned off and turned back on since the last time this register has been read.  Bit B7 decimal value: 128  B8 to B15  Not used  As an example, to set bit B0 of the standard event status enable register, set status.standard.enable = status.standard.OPC.  In addition to the above constants, standardRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set standardRegister to the sum of their decimal weights. For example, to set bits B0 and B4, set standardRegister to 17 (which is the sum of 1 + 16).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Example 1  standardRegister = status.standard.OPC + status.standard.EXE  status.standard.enable = standardRegister  Uses constants to set the OPC and EXE bits of the standard event status enable register.  Example 2  -- decimal 17 = binary 0001 0001  standardRegister = 17  status.standard.enable = standardRegister  Uses the decimal value to set the OPC and EXE bits of the standard event status enable register.  Also see  Event summary bit (ESB register)  "},{"id":415,"title":"status.system.*","url":"15863.htm","text":"These attributes manage the TSP-Link&reg; system summary register of the status model for nodes 1 through 14.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (All bits set)  Usage  enableRegister = status.system.condition  enableRegister = status.system.enable  enableRegister = status.system.event  enableRegister = status.system.ntr  enableRegister = status.system.ptr  status.system.enable = enableRegister  status.system.ntr = enableRegister  status.system.ptr = enableRegister  enableRegister  The status of the system summary register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.system.EXTENSION_BIT  status.system.EXT  1  B1  status.system.NODE1  2  B2  status.system.NODE2  4  B3  status.system.NODE3  8  B4  status.system.NODE4  16  B5  status.system.NODE5  32  B6  status.system.NODE6  64  B7  status.system.NODE7  128  B8  status.system.NODE8  256  B9  status.system.NODE9  512  B10  status.system.NODE10  1,024  B11  status.system.NODE11  2,048  B12  status.system.NODE12  4,096  B13  status.system.NODE13  8,192  B14  status.system.NODE14  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the system summary status enable register, set status.system.enable = status.system.enable.EXT.  In addition to the above constants, enableRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal values. For example, to set bits B11 and B14, set enableRegister to 18,432 (which is the sum of 2,048 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system.NODE11 + status.system.NODE14  status.system.enable = enableRegister  Uses constants to set bits B11 and B14 of the system summary enable register.  Example 2  -- decimal 18432 = binary 0100 1000 0000 0000  enableRegister = 18432  status.system.enable = enableRegister  Uses the decimal value to set bits B11 and B14 of the system summary enable register.  Also see  status.system2.*  System summary bit (System register)  "},{"id":416,"title":"status.system2.*","url":"15864.htm","text":"These attributes manage the TSP-Link&reg; system summary register of the status model for nodes 15 through 28.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (All bits set)  Usage  enableRegister = status.system2.condition  enableRegister = status.system2.enable  enableRegister = status.system2.event  enableRegister = status.system2.ntr  enableRegister = status.system2.ptr  status.system2.enable = enableRegister  status.system2.ntr = enableRegister  status.system2.ptr = enableRegister  enableRegister  The status of the system summary 2 register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.system2.EXTENSION_BIT  status.system2.EXT  1  B1  status.system2.NODE15  2  B2  status.system2.NODE16  4  B3  status.system2.NODE17  8  B4  status.system2.NODE18  16  B5  status.system2.NODE19  32  B6  status.system2.NODE20  64  B7  status.system2.NODE21  128  B8  status.system2.NODE22  256  B9  status.system2.NODE23  512  B10  status.system2.NODE24  1,024  B11  status.system2.NODE25  2,048  B12  status.system2.NODE26  4,096  B13  status.system2.NODE27  8,192  B14  status.system2.NODE28  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the system summary 2 enable register, set status.system2.enable = status.system2.EXT.  In addition to the above constants, enableRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal values. For example, to set bits B11 and B14, set enableRegister to 18,432 (which is the sum of 2,048 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system2.NODE25 + status.system2.NODE28  status.system2.enable = enableRegister   Uses constants to set bits B11 and B14 of the system summary 2 enable register.  Example 2  -- decimal 18432 = binary 0100 1000 0000 0000  enableRegister = 18432  status.system2.enable = enableRegister  Uses the decimal value to set bits B11 and B14 of the system summary 2 enable register.  Also see  status.system.*  status.system3.*  System summary bit (System register)  "},{"id":417,"title":"status.system3.*","url":"15865.htm","text":"These attributes manage the TSP-Link&reg; system summary register of the status model for nodes 29 through 42.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (All bits set)  Usage  enableRegister = status.system3.condition  enableRegister = status.system3.enable  enableRegister = status.system3.event  enableRegister = status.system3.ntr  enableRegister = status.system3.ptr  status.system3.enable = enableRegister  status.system3.ntr = enableRegister  status.system3.ptr = enableRegister  enableRegister  The status of the system summary 3 register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0 and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.system3.EXTENSION_BIT  status.system3.EXT  1  B1  status.system3.NODE29  2  B2  status.system3.NODE30  4  B3  status.system3.NODE31  8  B4  status.system3.NODE32  16  B5  status.system3.NODE33  32  B6  status.system3.NODE34  64  B7  status.system3.NODE35  128  B8  status.system3.NODE36  256  B9  status.system3.NODE37  512  B10  status.system3.NODE38  1,024  B11  status.system3.NODE39  2,048  B12  status.system3.NODE40  4,096  B13  status.system3.NODE41  8,192  B14  status.system3.NODE42  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the system summary 3 enable register, set status.system3.enable = status.system3.EXT.  In addition to the above constants, enableRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal values. For example, to set bits B11 and B14, set enableRegister to 18,432 (which is the sum of 2,048 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system3.NODE39 + status.system3.NODE42  status.system3.enable = enableRegister  Uses constants to set bits B11 and B14 of the system summary 3 enable register.  Example 2  -- decimal 18432 = binary 0100 1000 0000 0000  enableRegister = 18432  status.system3.enable = enableRegister  Uses the decimal value to set bits B11 and B14 of the system summary 3 enable register.  Also see  status.system2.*  status.system4.*  System summary bit (System register)  "},{"id":418,"title":"status.system4.*","url":"15866.htm","text":"These attributes manage the TSP-Link&reg; system summary register of the status model for nodes 43 through 56.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  32,767 (All bits set)  Usage  enableRegister = status.system4.condition  enableRegister = status.system4.enable  enableRegister = status.system4.event  enableRegister = status.system4.ntr  enableRegister = status.system4.ptr  status.system4.enable = enableRegister  status.system4.ntr = enableRegister  status.system4.ptr = enableRegister  enableRegister  The status of the system summary 4 register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.29000e+02 (which is 129) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0001. This value indicates that bit B0 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  status.system4.EXTENSION_BIT  status.system4.EXT  1  B1  status.system4.NODE43  2  B2  status.system4.NODE44  4  B3  status.system4.NODE45  8  B4  status.system4.NODE46  16  B5  status.system4.NODE47  32  B6  status.system4.NODE48  64  B7  status.system4.NODE49  128  B8  status.system4.NODE50  256  B9  status.system4.NODE51  512  B10  status.system4.NODE52  1,024  B11  status.system4.NODE53  2,048  B12  status.system4.NODE54  4,096  B13  status.system4.NODE55  8,192  B14  status.system4.NODE56  16,384  B15  Not used  Not applicable  As an example, to set bit B0 of the system summary 4 enable register, set status.system4.enable = status.system4.enable.EXT.  In addition to the above constants, enableRegister can be set to the decimal value of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal values. For example, to set bits B11 and B14, set enableRegister to 18,432 (which is the sum of 2,048 + 16,384).   Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system4.NODE53 + status.system4.NODE56  status.system2.enable = enableRegister   Uses constants to set bit B11 and bit B14 of the system summary 4 enable register.  Example 2  -- decimal 18432 = binary 0100 1000 0000 0000  enableRegister = 18432  status.system4.enable = enableRegister  Uses a decimal value to set bit B11 and bit B14 of the system summary 4 enable register.  Also see  status.system3.*  status.system5.*  System summary bit (System register)  "},{"id":419,"title":"status.system5.*","url":"15867.htm","text":"These attributes manage the TSP-Link&reg; system summary register of the status model for nodes 57 through 64.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute  - -  - -  - -  - -  .condition (R)  Yes  Not applicable  Not saved  Not applicable  .enable (RW)  Yes  Status reset  Not saved  0  .event (R)  Yes  Status reset  Not saved  0  .ntr (RW)  Yes  Status reset  Not saved  0  .ptr (RW)  Yes  Status reset  Not saved  510 (All bits set)  Usage  enableRegister = status.system5.condition  enableRegister = status.system5.enable  enableRegister = status.system5.event  enableRegister = status.system5.ntr  enableRegister = status.system5.ptr  status.system5.enable = enableRegister  status.system5.ntr = enableRegister  status.system5.ptr = enableRegister  enableRegister  The status of the system summary 5 register; a zero (0) indicates no bits set; other values indicate various bit settings  Details  In an expanded system (TSP-Link), these attributes are used to read or write to the system summary registers. They are set using a constant or a numeric value, but are returned as a numeric value. The binary equivalent of the value indicates which register bits are set. In the binary equivalent, the least significant bit is bit B0, and the most significant bit is bit B15. For example, if a value of 1.30000e+02 (which is 130) is read as the value of the condition register, the binary equivalent is 0000&nbsp;0000&nbsp;1000&nbsp;0010. This value indicates that bit B1 and bit B7 are&nbsp;set.  B15  B14  B13  B12  B11  B10  B9  B8  B7  B6  B5  B4  B3  B2  B1  B0  **  >  >  >  >  >  >  >  >  >  >  >  >  >  >  *  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  * Least significant bit<br>** Most significant bit  For information about .condition, .enable, .event, .ntr, and .ptr registers, refer to Status register set contents and Enable and transition registers. The individual bits of this register are defined in the following table.  Bit  Value  Decimal value  B0  Not used  Not applicable  B1  status.system5.NODE57  2  B2  status.system5.NODE58  4  B3  status.system5.NODE59  8  B4  status.system5.NODE60  16  B5  status.system5.NODE61  32  B6  status.system5.NODE62  64  B7  status.system5.NODE63  128  B8  status.system5.NODE64  256  B9 to B15  Not used  Not applicable  As an example, to set bit B1 of the system summary 5 enable register, set status.system5.enable = status.system5.NODE57.  In addition to the above constants, enableRegister can be set to the numeric equivalent of the bit to set. To set more than one bit of the register, set enableRegister to the sum of their decimal weights. For example, to set bits B1 and B4, set enableRegister to 18 (which is the sum of 2 + 16).  Bit  B7  B6  B5  B4  B3  B2  B1  B0  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  128  64  32  16  8  4  2  1  Weights  (27)  (26)  (25)  (24)  (23)  (22)  (21)  (20)  Bit  B15  B14  B13  B12  B11  B10  B9  B8  Binary value  0/1  0/1  0/1  0/1  0/1  0/1  0/1  0/1  Decimal  32,768  16,384  8,192  4,096  2,048  1,024  512  256  Weights  (215)  (214)  (213)  (212)  (211)  (210)  (29)  (28)  Example 1  enableRegister = status.system5.NODE57 + status.system5.NODE60  status.system2.enable = enableRegister   Uses constants to set bits B1 and B4 of the system summary 5 enable register.  Example 2  -- decimal 18 = binary 0000 0000 0001 0010  enableRegister = 18  status.system5.enable = enableRegister  Uses the decimal value to set bits B1 and B4 of the system summary 5 enable register.  Also see  status.system4.*  System summary bit (System register)  "},{"id":420,"title":"timer.measure.t()","url":"15281.htm","text":"This function measures the elapsed time since the timer was last reset.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  time = timer.measure.t()  time  The elapsed time in seconds (1&nbsp;µs resolution)  Example 1  timer.reset()  -- (intervening code)  time = timer.measure.t()  print(time)  This example resets the timer and measures the time since the reset.  Output:  1.469077e+01  The output varies. The above output indicates that timer.measure.t() was executed 14.69077&nbsp;seconds after timer.reset().  Example 2  beeper.enable = beeper.ON  beeper.beep(0.5, 2400)  print(\"reset timer\")  timer.reset()  delay(0.5)  dt = timer.measure.t()  print(\"timer after delay:\", dt)  beeper.beep(0.5, 2400)  Enable the beeper.  Emit a beep and set the beeper.  Reset the timer.  Set a delay.  Verify the duration of the delay before emitting another beep.  Output:  reset timer  timer after delay: 5.00e-01  Also see  timer.reset()  "},{"id":421,"title":"timer.reset()","url":"15282.htm","text":"This function resets the timer to zero (0) seconds.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  timer.reset()  Example  timer.reset()  -- (intervening code)  time = timer.measure.t()  print(time)  Resets the timer and then measures the time since the reset.  Output:  1.469077e+01  The above output indicates that timer.measure.t() was executed 14.69077 seconds after timer.reset().  Also see  timer.measure.t()  "},{"id":422,"title":"trigger.blender[N].clear()","url":"15785.htm","text":"This function clears the blender event detector and resets the overrun indicator of blender N.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  trigger.blender[N].clear()  N  The blender number (up to two)  Details  This command sets the blender event detector to the undetected state and resets the overrun indicator of the event detector.  Example  trigger.blender[2].clear()  Clears the event detector for blender 2.  Also see  None  "},{"id":423,"title":"trigger.blender[N].EVENT_ID","url":"15786.htm","text":"This constant contains the trigger blender event number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = trigger.blender[N].EVENT_ID  eventID  Trigger event number  N  The blender number (up to two)  Details  Set the stimulus of any trigger object to the value of this constant to have the trigger object respond to trigger events from this trigger blender.  Example  digio.trigger[1].stimulus = trigger.blender[2].EVENT_ID  Set the trigger stimulus of digital I/O trigger 1 to be controlled by the trigger blender 2 event.  Also see  None  "},{"id":424,"title":"trigger.blender[N].orenable","url":"15787.htm","text":"This attribute selects whether the blender performs OR operations or AND operations.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Trigger blender N reset<br>Recall setup  Create configuration script<br>Save setup  false (AND mode)  Usage  orenable = trigger.blender[N].orenable  trigger.blender[N].orenable = orenable  orenable  The type of operation:  true: OR operation  false: AND operation  N  The blender number (up to two)  Details  This command selects whether the blender waits for any one event (OR) or waits for all selected events (AND) before signaling an output event.  Example  trigger.blender[1].orenable = true  trigger.blender[1].stimulus[1] = digio.trigger[3].EVENT_ID  trigger.blender[1].stimulus[2] = digio.trigger[5].EVENT_ID  Generate a trigger blender 1 event when a digital I/O trigger happens on line 3 or 5.  Also see  trigger.blender[N].reset()  "},{"id":425,"title":"trigger.blender[N].overrun","url":"15788.htm","text":"This attribute indicates whether or not an event was ignored because of the event detector state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Trigger blender N clear<br>Trigger blender N reset  Not applicable  Not applicable  Usage  overrun = trigger.blender[N].overrun  overrun  Trigger blender overrun state (true or false)  N  The blender number (up to two)  Details  Indicates if an event was ignored because the event detector was already in the detected state when the event occurred. This is an indication of the state of the event detector that is built into the event blender itself.  This command does not indicate if an overrun occurred in any other part of the trigger model or in any other trigger object that is monitoring the event. It also is not an indication of an action overrun.  Example  print(trigger.blender[1].overrun)  If an event was ignored, the output is true.  If an event was not ignored, the output is false.  Also see  trigger.blender[N].reset()  "},{"id":426,"title":"trigger.blender[N].reset()","url":"17666.htm","text":"This function resets some of the trigger blender settings to their factory defaults.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  trigger.blender[N].reset()  N  The trigger event blender (up to two)  Details  The trigger.blender[N].reset() function resets the following attributes to their factory defaults:  trigger.blender[N].orenable  trigger.blender[N].stimulus[M]  It also clears trigger.blender[N].overrun.  Example  trigger.blender[1].reset()  Resets the trigger blender&nbsp;1 settings to factory defaults.  Also see  trigger.blender[N].orenable  trigger.blender[N].overrun  trigger.blender[N].stimulus[M]  "},{"id":427,"title":"trigger.blender[N].stimulus[M]","url":"20592.htm","text":"This attribute specifies the events that trigger the blender.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Recall setup<br>Trigger blender N reset  Create configuration script<br>Save setup  0  Usage  eventID = trigger.blender[N].stimulus[M]  trigger.blender[N].stimulus[M] = eventID  eventID  The event that triggers the blender action; see Details  N  An integer representing the trigger event blender (up to two)  M  An integer representing the stimulus index (1 to 4)  Details  There are four acceptors that can each select a different event. The eventID parameter can be the event ID of any trigger event.  The eventID parameter may be one of the existing trigger event IDs shown in the following table.  Trigger event ID  Description  channel.trigger[N].EVENT_ID  A channel trigger event starts the scan.  digio.trigger[N].EVENT_ID  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID  The trigger key on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH  A DMM trigger event that indicates a measurement has exceed the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW  A DMM trigger event that indicates a measurement has exceed the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH  A DMM trigger event that indicates a measurement has exceed the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW  A DMM trigger event that indicates a measurement has exceed the low limit value on limit 2.  trigger.EVENT_ID  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID  A combination of events has occurred.  trigger.timer[N].EVENT_ID  A delay expired.  tsplink.trigger[N].EVENT_ID  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID  A LAN trigger event has occurred.  scan.trigger.EVENT_SCAN_READY  Scan ready event.  scan.trigger.EVENT_SCAN_START  Scan start event.  scan.trigger.EVENT_CHANNEL_READY  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP  Scan complete event.  scan.trigger.EVENT_IDLE  Idle event.  schedule.alarm[N].EVENT_ID  A scan starts when alarm N fires.  Example  digio.trigger[3].mode = digio.TRIG_FALLING  digio.trigger[5].mode = digio.TRIG_FALLING  trigger.blender[1].orenable = true  trigger.blender[1].stimulus[1] = digio.trigger[3].EVENT_ID  trigger.blender[1].stimulus[2] = digio.trigger[5].EVENT_ID  Generate a trigger blender 1 event when a digital I/O trigger happens on line 3 or 5.  Also see  trigger.blender[N].reset()  "},{"id":428,"title":"trigger.blender[N].wait()","url":"15790.htm","text":"This function waits for a blender trigger event to occur.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = trigger.blender[N].wait(timeout)  triggered  Trigger detection indication for blender  N  The trigger blender (up to two) on which to wait  timeout  Maximum amount of time in seconds to wait for the trigger blender event  Details  This function waits for an event blender trigger event. If one or more trigger events were detected since the last time trigger.blender[N].wait() or trigger.blender[N].clear() was called, this function returns immediately.  After detecting a trigger with this function, the event detector automatically resets and rearms. This is true regardless of the number of events detected.  Example  digio.trigger[3].mode = digio.TRIG_FALLING  digio.trigger[5].mode = digio.TRIG_FALLING  trigger.blender[1].orenable = true  trigger.blender[1].stimulus[1] = digio.trigger[3].EVENT_ID  trigger.blender[1].stimulus[2] = digio.trigger[5].EVENT_ID  print(trigger.blender[1].wait(3))  Generate a trigger blender 1 event when a digital I/O trigger happens either on line 3 or 5.  Wait three seconds while checking if trigger blender 1 event has occurred.  If the blender trigger event has happened, then true is output. If the trigger event has not happened, then false is output after the timeout expires.  Also see  trigger.blender[N].clear()  "},{"id":429,"title":"trigger.clear()","url":"15791.htm","text":"This function clears the command interface trigger event detector.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  trigger.clear()  Details  The trigger event detector indicates if a trigger event has been detected since the last trigger.wait() call. trigger.clear() clears the trigger event detector and discards the history of command interface trigger events.  Also see  trigger.wait()  "},{"id":430,"title":"trigger.EVENT_ID","url":"15792.htm","text":"This constant contains the command interface trigger event number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = trigger.EVENT_ID  eventID  The event ID for the command interface triggers  Details  You can set the stimulus of any trigger object to the value of this constant to have the trigger object respond to command interface trigger events.  Example  scan.trigger.channel.stimulus = trigger.EVENT_ID  Sets the trigger stimulus of the channel event detector to command an interface trigger event.  Also see  None  "},{"id":431,"title":"trigger.timer[N].clear()","url":"15793.htm","text":"This function clears the timer event detector and overrun indicator for the specified trigger timer number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  trigger.timer[N].clear()  N  Trigger timer number (1 to 4)  Details  This command sets the timer event detector to the undetected state and resets the overrun indicator.  Example  trigger.timer[1].clear()  Clears trigger timer 1.  Also see  trigger.timer[N].count  "},{"id":432,"title":"trigger.timer[N].count","url":"15820.htm","text":"This attribute sets the number of events to generate each time the timer generates a trigger event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>Trigger timer N reset  Create configuration script<br>Save setup  1  Usage  count = trigger.timer[N].count  trigger.timer[N].count = count  count  Number of times to repeat the trigger (0 to 1,048,575)  N  Trigger timer number (1 to 4)  Details  If the count is set to a number greater than 1, the timer automatically starts the next trigger timer delay at the expiration of the previous delay.  Set the count to zero (0) to cause the timer to generate trigger events indefinitely.  If you use the trigger timer with a trigger model, make sure the count value is the same or more than any count values expected in the trigger model.  Example  print(trigger.timer[1].count)  Read trigger count for timer number 1.  Also see  trigger.timer[N].clear()  trigger.timer[N].delay  trigger.timer[N].reset()  "},{"id":433,"title":"trigger.timer[N].delay","url":"15794.htm","text":"This attribute sets and reads the timer delay.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>Trigger timer N reset  Create configuration script<br>Save setup  10e-6 (10 µs)  Usage  interval = trigger.timer[N].delay  trigger.timer[N].delay = interval  interval  Delay interval in seconds (0.5 µs to 100&nbsp;ks)  N  Trigger timer number (1 to 4)  Details  Once the timer is enabled, each time the timer is triggered, it uses this delay period.  Assigning a value to this attribute is equivalent to:  trigger.timer[N].delaylist = {interval}  This creates a delay list of one value.  Reading this attribute returns the delay interval that is used the next time the timer is triggered.  Example  trigger.timer[1].delay = 50e-6  Set the trigger timer 1 to delay for 50&nbsp;µs.  Also see  trigger.timer[N].reset()  "},{"id":434,"title":"trigger.timer[N].delaylist","url":"15795.htm","text":"This attribute sets an array of timer intervals.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>Trigger timer N reset  Create configuration script<br>Save setup  10e-6 (10 µs)  Usage  intervals = trigger.timer[N].delaylist  trigger.timer[N].delaylist = intervals  intervals  Table of delay intervals in seconds  N  Trigger timer number (1 to 4)  Details  Each time the timer is triggered after it is enabled, it uses the next delay period from the array. The default value is an array with one value of 10 µs.  After all elements in the array have been used, the delays restart at the beginning of the list.  If the array contains more than one element, the average of the delay intervals in the list must be ≥&nbsp;50&nbsp;µs.  Example  trigger.timer[3].delaylist = {50e-6, 100e-6, 150e-6}  DelayList = trigger.timer[3].delaylist  for x = 1, table.getn(DelayList) do     print(DelayList[x])  end  Set a delay list on trigger timer 3 with three delays (50 µs, 100 µs, and 150 µs).  Read the delay list on trigger timer&nbsp;3.  Output:  5e-05  0.0001  0.00015  Also see  trigger.timer[N].reset()  "},{"id":435,"title":"trigger.timer[N].EVENT_ID","url":"15796.htm","text":"This constant specifies the trigger timer event number.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = trigger.timer[N].EVENT_ID  eventID  The trigger event number  N  Trigger timer number (1 to 4)  Details  This constant is an identification number that identifies events generated by this timer.  Set the stimulus of any trigger object to the value of this constant to have the trigger object respond to events from this timer.  Example  scan.trigger.channel.stimulus = trigger.timer[2].EVENT_ID  Sets the trigger stimulus of the channel event detector to trigger timer 2 event.  Also see  None  "},{"id":436,"title":"trigger.timer[N].overrun","url":"15797.htm","text":"This attribute indicates if an event was ignored because of the event detector state.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Recall setup<br>Trigger timer N clear<br>Trigger timer N reset  Not applicable  false  Usage  overrun = trigger.timer[N].overrun  overrun  Trigger overrun state (true or false)  N  Trigger timer number (1 to 4)  Details  This command indicates if an event was ignored because the event detector was already in the detected state when the event occurred.  This is an indication of the state of the event detector built into the timer itself. It does not indicate if an overrun occurred in any other part of the trigger model or in any other construct that is monitoring the delay completion event. It also is not an indication of a delay overrun.Example  print(trigger.timer[1].overrun)  If an event was ignored, the output is true.  If the event was not ignored, the output is false.  Also see  trigger.timer[N].reset()  "},{"id":437,"title":"trigger.timer[N].passthrough","url":"15798.htm","text":"This attribute enables or disables the timer trigger pass&#8209;through mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>Trigger timer N reset  Create configuration script<br>Save setup  false (disabled)  Usage  passthrough = trigger.timer[N].passthrough  trigger.timer[N].passthrough = passthrough  passthrough  The state of pass-through mode; set to one of the following values:  true: Enabled  false: Disabled  N  Trigger timer number (1 to 4)  Details  When pass-through mode is enabled, triggers are passed through immediately and initiate the delay. When disabled, a trigger only initiates a delay.  Example  trigger.timer[1].passthrough = true  Enables pass&#8209;through mode on trigger timer 1.  Also see  trigger.timer[N].reset()  "},{"id":438,"title":"trigger.timer[N].reset()","url":"17668.htm","text":"This function resets some of the trigger timer settings to their factory defaults.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  trigger.timer[N].reset()  N  Trigger timer number (1 to 4)  Details  The trigger.timer[N].reset() function resets the following attributes to their factory defaults:  trigger.timer[N].count  trigger.timer[N].delay  trigger.timer[N].delaylist  trigger.timer[N].passthrough  trigger.timer[N].stimulus  It also clears trigger.timer[N].overrun.  Example  trigger.timer[1].reset()  Resets the attributes associated with timer 1 back to factory default values.  Also see  trigger.timer[N].count  trigger.timer[N].delay  trigger.timer[N].delaylist  trigger.timer[N].overrun  trigger.timer[N].passthrough  trigger.timer[N].stimulus  "},{"id":439,"title":"trigger.timer[N].stimulus","url":"20597.htm","text":"This attribute describes the event that starts the trigger timer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Recall setup<br>Trigger timer N reset  Create configuration script<br>Save setup  0  Usage  eventID = trigger.timer[N].stimulus  trigger.timer[N].stimulus = eventID  eventID  The event that triggers the timer delay  N  Trigger timer number (1 to 4)  Details  The eventID parameter may be one of the trigger event IDs shown in the following table.  Trigger event IDs  Trigger event ID  Description  channel.trigger[N].EVENT_ID  A channel trigger event starts the scan.  digio.trigger[N].EVENT_ID  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID  The trigger key on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH  A DMM trigger event that indicates a measurement exceeded the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW  A DMM trigger event that indicates a measurement exceeded the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH  A DMM trigger event that indicates a measurement exceeded the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW  A DMM trigger event that indicates a measurement exceeded the low limit value on limit 2.  trigger.EVENT_ID  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID  A combination of events has occurred.  trigger.timer[N].EVENT_ID  A delay expired.  tsplink.trigger[N].EVENT_ID  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID  A LAN trigger event occurred.  scan.trigger.EVENT_SCAN_READY  Scan ready event.  scan.trigger.EVENT_SCAN_START  Scan start event.  scan.trigger.EVENT_CHANNEL_READY  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP  Scan complete event.  scan.trigger.EVENT_IDLE  Idle event.  schedule.alarm[N].EVENT_ID  A scan starts when alarm N fires.  Set this attribute to the eventID of any trigger event to wait for that event.  Use zero (0) to disable event processing.  Example  print(trigger.timer[1].stimulus)  Prints the event that will start a trigger 1 timer action.  Also see  trigger.timer[N].reset()  "},{"id":440,"title":"trigger.timer[N].wait()","url":"15800.htm","text":"This function waits for a trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = trigger.timer[N].wait(timeout)  triggered  Trigger detection indication  N  Trigger timer number (1 to 4)  timeout  Maximum amount of time in seconds to wait for the trigger  Details  If one or more trigger events were detected since the last time trigger.timer[N].wait() or trigger.timer[N].clear() was called, this function returns immediately.  After waiting for a trigger with this function, the event detector is automatically reset and rearmed. This is true regardless of the number of events detected.  Example  triggered = trigger.timer[3].wait(10)  print(triggered)  Waits up to 10 s for a trigger on timer 3.  If false is returned, no trigger was detected during the 10&nbsp;s timeout.  If true is returned, a trigger was detected.  Also see  trigger.timer[N].clear()  "},{"id":441,"title":"trigger.wait()","url":"15801.htm","text":"This function waits for a command interface trigger event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  triggered = trigger.wait(timeout)  triggered  true: A trigger was detected during the timeout period  false: No triggers were detected during the timeout period  timeout  Maximum amount of time in seconds to wait for the trigger  Details  This function waits up to timeout seconds for a trigger on the active command interface. A command interface trigger occurs when:  A GPIB GET command is detected (GPIB only)  A VXI-11 device_trigger method is invoked (VXI-11 only)  A *TRG message is received  If one or more of these trigger events were previously detected, this function returns immediately.  After waiting for a trigger with this function, the event detector is automatically reset and rearmed. This is true regardless of the number of events detected.  Example  triggered = trigger.wait(10)  print(triggered)  Waits up to 10 seconds for a trigger.  If false is returned, no trigger was detected during the 10&#8209;second timeout.  If true is returned, a trigger was detected.  Also see  trigger.clear()  "},{"id":442,"title":"tsplink.group","url":"15285.htm","text":"This attribute contains the group number of a TSP&#8209;Link node.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Power cycle  Not applicable  0  Usage  groupNumber = tsplink.group  tsplink.group = groupNumber  groupNumber  The group number of the TSP-Link node (0 to 64)  Details  To remove the node from all groups, set the attribute value to 0.  When the node is turned off, the group number for that node changes to 0.  The master node can be assigned to any group. You can also include other nodes in the group that includes the master. Note that any nodes that are set to 0 are automatically included in the group that contains the master node, regardless of the group that is assigned to the master node.  Example  tsplink.group = 3  Assign the instrument to TSP-Link group number 3.  Also see  Using groups to manage nodes on TSP-Link network  "},{"id":443,"title":"tsplink.master","url":"15286.htm","text":"This attribute reads the node number assigned to the master node.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  masterNodeNumber = tsplink.master  masterNodeNumber  The node number of the master node  Details  After doing a TSP-Link reset (tsplink.reset()), use this attribute to access the node number of the master in a set of instruments connected over TSP-Link.  Example  LinkMaster = tsplink.master  Store the TSP-Link master node number in a variable called LinkMaster.  Also see  tsplink.reset()  "},{"id":444,"title":"tsplink.node","url":"15287.htm","text":"This attribute defines the node number.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Nonvolatile memory  2  Usage  nodeNumber = tsplink.node  tsplink.node = nodeNumber  nodeNumber  The node number of the instrument or enclosure (1 to 64 )  Details  This command sets the TSP&#8209;Link node number and saves the value in nonvolatile memory.  Changes to the node number do not take effect until tsplink.reset() from an earlier TSP&#8209;Link instrument is executed on any node in the system.  Each node connected to the TSP-Link system must be assigned a different node number.  Example  tsplink.node = 3  Sets the TSP&#8209;Link node for this instrument to number&nbsp;3.  Also see  tsplink.reset()   tsplink.state  "},{"id":445,"title":"tsplink.readbit()","url":"15288.htm","text":"This function reads the state of a TSP-Link synchronization line.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data = tsplink.readbit(N)  data  The state of the synchronization line  N  The trigger line (1 to 3)  Details  Returns a value of zero (0) if the line is low and 1 if the line is high.  Example  data = tsplink.readbit(3)  print(data)  Assume line 3 is set high, and it is then read.  Output:  1.000000e+00  Also see  tsplink.readport()  tsplink.writebit()  "},{"id":446,"title":"tsplink.readport()","url":"15289.htm","text":"This function reads the TSP-Link trigger lines as a digital I/O port.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  data = tsplink.readport()  data  Numeric value that indicates which lines are set  Details  The binary equivalent of the returned value indicates the input pattern on the I/O port. The least significant bit of the binary number corresponds to line 1 and the value of bit 3 corresponds to line 3. For example, a returned value of 2 has a binary equivalent of 010. This indicates that line 2 is high (1), and that the other two lines are low (0).  Example  data = tsplink.readport()  print(data)  Reads state of all three TSP-Link lines.  Assuming line 2 is set high, the output is:  2.000000e+00  (binary 010)  The format of the output may vary depending on the ASCII precision setting.  Also see  TSP-Link trigger lines  tsplink.readbit()  tsplink.writebit()  tsplink.writeport()  tsplink.writeport()  "},{"id":447,"title":"tsplink.reset()","url":"15290.htm","text":"This function initializes (resets) all nodes (instruments) in the TSP&#8209;Link system.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  nodesFound = tsplink.reset()  nodesFound = tsplink.reset(expectedNodes)  nodesFound  The number of nodes actually found on the system  expectedNodes  The number of nodes expected on the system (1 to 64)  Details  This function erases all information regarding other nodes connected on the TSP-Link system and regenerates the system configuration. This function must be called at least once before any remote nodes can be accessed. If the node number for any instrument is changed, the TSP-Link must be reset again.  If expectedNodes is not given, this function generates an error if no other nodes are found on the TSP&#8209;Link network.  If nodesFound is less than expectedNodes, an error is generated. Note that the node on which the command is running is counted as a node. For example, giving an expected node count of 1 does not generate any errors, even if there are no other nodes on the TSP-Link network.  Also returns the number of nodes found.  Example  nodesFound = tsplink.reset(2)  print(\"Nodes found = \" .. nodesFound)  Perform a TSP-Link reset and indicate how many nodes are found.  Sample output if two nodes are found:<br>Nodes found = 2  Sample output if fewer nodes are found and if localnode.showerrors = 1:<br>1219, TSP-Link found fewer nodes than expected<br>Nodes found = 1  Also see  localnode.showerrors  tsplink.node  tsplink.state  "},{"id":448,"title":"tsplink.state","url":"15291.htm","text":"This attribute describes the TSP&#8209;Link online state.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  state = tsplink.state  state  TSP-Link state (online or offline)  Details  When the instrument power is first turned on, the state is offline. After tsplink.reset() is successful, the state is online.  Example  state = tsplink.state  print(state)  Read the state of the TSP&#8209;Link system. If it is online, the output is:  online  Also see  tsplink.node  tsplink.reset()  "},{"id":449,"title":"tsplink.trigger[N].assert()","url":"15292.htm","text":"This function simulates the occurrence of the trigger and generates the corresponding event ID.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.trigger[N].assert()  N  The trigger line (1 to 3)  Details  The set pulse width determines how long the trigger is asserted.  Example  tsplink.trigger[2].assert()  Asserts trigger on trigger line 2.  Also see  tsplink.trigger[N].clear()  tsplink.trigger[N].mode  tsplink.trigger[N].overrun  tsplink.trigger[N].pulsewidth  tsplink.trigger[N].release()  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":450,"title":"tsplink.trigger[N].clear()","url":"15293.htm","text":"This function clears the event detector for a LAN trigger.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.trigger[N].clear()  N  The trigger line (1 to 3) to clear  Details  The trigger event detector enters the detected state when an event is detected. tsplink.trigger[N].clear() clears a trigger event detector, discards the history of the trigger line, and clears the tsplink.trigger[N].overrun attribute.  Example  tsplink.trigger[2].clear()  Clears trigger event on synchronization line 2.  Also see  tsplink.trigger[N].mode  tsplink.trigger[N].overrun  tsplink.trigger[N].release()  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":451,"title":"tsplink.trigger[N].EVENT_ID","url":"15294.htm","text":"This constant identifies the number that is used for the trigger events.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Constant  Yes  Usage  eventID = tsplink.trigger[N].EVENT_ID  eventID  The trigger event number  N  The trigger line (1 to 3)  Details  This number is used by the TSP-Link trigger line when it detects an input trigger.  Set the stimulus of any trigger object to the value of this constant to have the trigger object respond to trigger events from this line.  Example  trigger.timer[1].stimulus = tsplink.trigger[2].EVENT_ID  Sets the trigger stimulus of trigger timer 1 to the TSP-Link trigger 2 event.  Also see  None  "},{"id":452,"title":"tsplink.trigger[N].mode","url":"15295.htm","text":"This attribute defines the trigger operation and detection mode.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup<br>TSP-Link trigger N reset  Create configuration script<br>Save setup  0 (tsplink.TRIG_BYPASS)  Usage  mode = tsplink.trigger[N].mode  tsplink.trigger[N].mode = mode  mode  The trigger mode  N  The trigger line (1 to 3)  Details  This attribute controls the mode in which the trigger event detector and the output trigger generator operate on the given trigger&nbsp;line.  The setting for the mode parameter can be one of the values shown in the following table.  Mode  Number value  Description  tsplink.TRIG_BYPASS  0  Allows direct control of the line as a digital I/O line.  tsplink.TRIG_FALLING  1  Detects falling&#8209;edge triggers as input. Asserts a TTL-low pulse for output.  tsplink.TRIG_RISING  2  If the programmed state of the line is high, the tsplink.TRIG_RISING mode behaves similarly to tsplink.TRIG_RISINGA.  If the programmed state of the line is low, the tsplink.TRIG_RISING mode behaves similarly to tsplink.TRIG_RISINGM.  Use tsplink.TRIG_RISINGA if the line is in the high output state.  Use tsplink.TRIG_RISINGM if the line is in the low output state.  tsplink.TRIG_EITHER  3  Detects rising&#8209; or falling&#8209;edge triggers as input. Asserts a TTL&#8209;low pulse for output.  tsplink.TRIG_SYNCHRONOUSA  4  Detects the falling&#8209;edge input triggers and automatically latches and drives the trigger line low.  tsplink.TRIG_SYNCHRONOUS  5  Detects the falling&#8209;edge input triggers and automatically latches and drives the trigger line low. Asserts a TTL-low pulse as an output trigger.  tsplink.TRIG_SYNCHRONOUSM  6  Detects rising&#8209;edge triggers as an input. Asserts a TTL&#8209;low pulse for output.  tsplink.TRIG_RISINGA  7  Detects rising&#8209;edge triggers as input. Asserts a TTL&#8209;low pulse for output.  tsplink.TRIG_RISINGM  8  Edge detection as an input is not available. Generates a TTL&#8209;high pulse as an output trigger.  When programmed to any mode except tsplink.TRIG_BYPASS, the output state of the I/O line is controlled by the trigger logic and the user-specified output state of the line is&nbsp;ignored.  When the trigger mode is set to tsplink.TRIG_RISING, the user&#8209;specified output state of the line is examined. If the output state selected when the mode is changed is high, the actual mode that is used is tsplink.TRIG_RISINGA. If the output state selected when the mode is changed is low, the actual mode that is used is tsplink.TRIG_RISINGM.  The mode parameter stores the trigger mode as a numeric value when the attribute is read.  To control the line state, use the tsplink.TRIG_BYPASS mode with the tsplink.writebit() and the tsplink.writeport() commands.  Example  tsplink.trigger[3].mode = tsplink.TRIG_RISINGM  Sets the trigger mode for synchronization line 3 to tsplink.TRIG_RISINGM.  Also see  digio.writebit()  digio.writeport()  tsplink.trigger[N].assert()  tsplink.trigger[N].clear()  tsplink.trigger[N].overrun  tsplink.trigger[N].release()  tsplink.trigger[N].reset()  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":453,"title":"tsplink.trigger[N].overrun","url":"15296.htm","text":"This attribute indicates if the event detector ignored an event while in the detected state.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Recall setup<br>TSP-Link trigger N clear<br>TSP-Link trigger N reset  Not applicable  Not applicable  Usage  overrun = tsplink.trigger[N].overrun  overrun  Trigger overrun state  N  The trigger line (1 to 3)  Details  This command indicates whether an event has been ignored because the event detector was already in the detected state when the event occurred.  This is an indication of the state of the event detector built into the synchronization line itself.  It does not indicate if an overrun occurred in any other part of the trigger model, or in any other construct that is monitoring the event. It also is not an indication of an output trigger overrun.Example  print(tsplink.trigger[1].overrun)  If an event was ignored, displays true; if an event was not ignored, displays false.  Also see  tsplink.trigger[N].assert()  tsplink.trigger[N].clear()  tsplink.trigger[N].mode  tsplink.trigger[N].release()  tsplink.trigger[N].reset()  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":454,"title":"tsplink.trigger[N].pulsewidth","url":"15297.htm","text":"This attribute sets the length of time that the trigger line is asserted for output triggers.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Recall setup<br>TSP-Link trigger N reset  Create configuration script<br>Save setup  10e-6 (10 µs)  Usage  width = tsplink.trigger[N].pulsewidth  tsplink.trigger[N].pulsewidth = width  width  The pulse width (in seconds)  N  The trigger line (1 to 3)  Details  Setting the pulse width to 0 (seconds) asserts the trigger indefinitely.  Example  tsplink.trigger[3].pulsewidth = 20e-6  Sets pulse width for trigger line&nbsp;3 to 20&nbsp;μs.  Also see  tsplink.trigger[N].release()  "},{"id":455,"title":"tsplink.trigger[N].release()","url":"15298.htm","text":"This function releases a latched trigger on the given TSP&#8209;Link trigger line.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.trigger[N].release()  N  The trigger line (1 to 3)  Details  Releases a trigger that was asserted with an indefinite pulse width. It also releases a trigger that was latched in response to receiving a synchronous mode trigger.  Example  tsplink.trigger[3].release()  Releases trigger line 3.  Also see  tsplink.trigger[N].assert()  tsplink.trigger[N].clear()  tsplink.trigger[N].mode  tsplink.trigger[N].overrun  tsplink.trigger[N].pulsewidth  tsplink.trigger[N].stimulus  tsplink.trigger[N].wait()  "},{"id":456,"title":"tsplink.trigger[N].reset()","url":"17669.htm","text":"This function resets some of the TSP-Link trigger attributes to their factory defaults.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.trigger[N].reset()  N  The trigger line (1 to 3)  Details  The tsplink.trigger[N].reset() function resets the following attributes to their factory defaults:  tsplink.trigger[N].mode  tsplink.trigger[N].stimulus  tsplink.trigger[N].pulsewidth  This also clears tsplink.trigger[N].overrun.  Example  tsplink.trigger[3].reset()  Resets TSP-Link trigger line&nbsp;3 attributes back to factory default values.  Also see  tsplink.trigger[N].mode  tsplink.trigger[N].overrun  tsplink.trigger[N].pulsewidth  tsplink.trigger[N].stimulus  "},{"id":457,"title":"tsplink.trigger[N].stimulus","url":"20594.htm","text":"This attribute specifies the event that causes the synchronization line to assert a trigger.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Reset<br>Recall setup<br>TSP-Link trigger N reset  Create configuration script<br>Save setup  0  Usage  eventID = tsplink.trigger[N].stimulus  tsplink.trigger[N].stimulus = eventID  eventID  The event identifier for the triggering event  N  The trigger line (1 to 3)  Details  To disable automatic trigger assertion on the synchronization line, set this attribute to zero (0).  Do not use this attribute when triggering under script control. Use tsplink.trigger[N].assert() instead.  The eventID parameter may be one of the existing trigger event IDs shown in the following table.  Trigger event ID  Description  channel.trigger[N].EVENT_ID  A channel trigger event starts the scan.  digio.trigger[N].EVENT_ID  An edge (either rising, falling, or either based on the configuration of the line) on the digital input line.  display.trigger.EVENT_ID  The trigger key on the front panel is pressed.  dmm.trigger.EVENT_LIMIT1_HIGH  A DMM trigger event that indicates a measurement has exceed the high limit value on limit 1.  dmm.trigger.EVENT_LIMIT1_LOW  A DMM trigger event that indicates a measurement has exceed the low limit value on limit 1.  dmm.trigger.EVENT_LIMIT2_HIGH  A DMM trigger event that indicates a measurement has exceed the high limit value on limit 2.  dmm.trigger.EVENT_LIMIT2_LOW  A DMM trigger event that indicates a measurement has exceed the low limit value on limit 2.  trigger.EVENT_ID  A *trg message on the active command interface. If GPIB is the active command interface, a GET message also generates this event.  trigger.blender[N].EVENT_ID  A combination of events has occurred.  trigger.timer[N].EVENT_ID  A delay expired.  tsplink.trigger[N].EVENT_ID  An edge (either rising, falling, or either based on the configuration of the line) on the TSP-Link trigger line.  lan.trigger[N].EVENT_ID  A LAN trigger event has occurred.  scan.trigger.EVENT_SCAN_READY  Scan ready event.  scan.trigger.EVENT_SCAN_START  Scan start event.  scan.trigger.EVENT_CHANNEL_READY  Channel ready event.  scan.trigger.EVENT_MEASURE_COMP  Measure complete event.  scan.trigger.EVENT_SEQUENCE_COMP  Sequence complete event.  scan.trigger.EVENT_SCAN_COMP  Scan complete event.  scan.trigger.EVENT_IDLE  Idle event.  schedule.alarm[N].EVENT_ID  A scan starts when alarm N fires.  Example  tsplink.trigger[3].stimulus = scan.trigger.EVENT_CHANNEL_READY  Sets the trigger stimulus of the TSP-Link trigger line 3 event detector to scan the trigger channel ready event.  Also see  tsplink.trigger[N].assert()  tsplink.trigger[N].reset()  "},{"id":458,"title":"tsplink.trigger[N].wait()","url":"15300.htm","text":"This function waits for a trigger.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  triggered = tsplink.trigger[N].wait(timeout)  triggered  Trigger detection indication; set to one of the following values:  true: A trigger is detected during the timeout period  false: A trigger is not detected during the timeout period  N  The trigger line (1 to 3)  timeout  The timeout value in seconds  Details  This function waits up to the timeout value for an input trigger. If one or more trigger events were detected since the last time tsplink.trigger[N].wait() or tsplink.trigger[N].clear() was called, this function returns immediately.  After waiting for a trigger with this function, the event detector is automatically reset and rearmed. This is true regardless of the number of events detected.  Example  triggered = tsplink.trigger[3].wait(10)  print(triggered)  Waits up to 10 seconds for a trigger on TSP-Link&reg; line&nbsp;3.  If false is returned, no trigger was detected during the 10-second timeout.  If true is returned, a trigger was detected.  Also see  tsplink.trigger[N].clear()  "},{"id":459,"title":"tsplink.writebit()","url":"15301.htm","text":"This function sets a TSP-Link trigger line high or low.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.writebit(N, data)  N  The trigger line (1 to 3)  data  The value to write to the bit:  Low: 0  High: 1  Details  Use tsplink.writebit() and tsplink.writeport() to control the output state of the trigger line when trigger operation is set to tsplink.TRIG_BYPASS.  If the output line is write&#8209;protected by the tsplink.writeprotect attribute, this command is ignored.  The reset function does not affect the present states of the TSP-Link trigger lines.  Example  tsplink.writebit(3, 0)  Sets trigger line 3 low (0).  Also see  tsplink.readbit()  tsplink.readport()  tsplink.writeport()  tsplink.writeprotect  "},{"id":460,"title":"tsplink.writeport()","url":"15302.htm","text":"This function writes to all TSP&#8209;Link synchronization lines.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tsplink.writeport(data)  data  Value to write to the port (0 to 7)  Details  The binary representation of data indicates the output pattern that is written to the I/O port. For example, a data value of 2 has a binary equivalent of 010. Line 2 is set high (1), and the other two lines are set low (0).  Write&#8209;protected lines are not changed.  Use the tsplink.writebit() and tsplink.writeport() commands to control the output state of the synchronization line when trigger operation is set to tsplink.TRIG_BYPASS.  The reset() function does not affect the present states of the trigger lines.  Example  tsplink.writeport(3)  Sets the synchronization lines 1 and 2 high (binary 011).  Also see  tsplink.readbit()  tsplink.readport()  tsplink.writebit()  tsplink.writeprotect  "},{"id":461,"title":"tsplink.writeprotect","url":"17630.htm","text":"This attribute contains the write&#8209;protect mask that protects bits from changes by the tsplink.writebit() and tsplink.writeport() functions.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Recall setup  Create configuration script<br>Saved setup  0  Usage  mask = tsplink.writeprotect  tsplink.writeprotect = mask  mask  An integer that specifies the value of the bit pattern for write&#8209;protect; set bits to 1 to write&#8209;protect the corresponding TSP-Link trigger line  Details  The binary equivalent of mask indicates the mask to be set for the TSP-Link trigger line. For example, a mask value of 5 has a binary equivalent of 101. This mask write&#8209;protects TSP-Link trigger lines 1 and 3.  Example  tsplink.writeprotect = 5  Write&#8209;protects TSP-Link trigger lines 1 and 3.  Also see  tsplink.readbit()  tsplink.readport()  tsplink.writebit()  tsplink.writeport()  "},{"id":462,"title":"tspnet.clear()","url":"14073.htm","text":"This function clears any pending output data from the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.clear(connectionID)  connectionID  The connection ID returned from tspnet.connect()  Details  This function clears any pending output data from the device. No data is returned to the caller and no data is processed.  Example  tspnet.write(testdevice, \"print([[hello]])\")  print(tspnet.readavailable(testdevice))  tspnet.clear(testdevice)  print(tspnet.readavailable(testdevice))  Write data to a device, then print how much is available.  Output:  6.00000e+00  Clear data and print how much data is available again.  Output:  0.00000e+00  Also see  tspnet.connect()  tspnet.readavailable()  tspnet.write()  "},{"id":463,"title":"tspnet.connect()","url":"14074.htm","text":"This function establishes a network connection with another LAN instrument or device through the LAN interface.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  connectionID = tspnet.connect(\"ipAddress\")  connectionID = tspnet.connect(\"ipAddress\", portNumber, \"initString\")  connectionID  The connection ID to be used as a handle in all other tspnet function calls  ipAddress  IP address to which to connect in a string; accepts IP address or host name when trying to connect  portNumber  Port number (default 5025)  initString  Initialization string to send to ipAddress  Details  This command connects a device to another device through the LAN interface. If the portNumber is 23, the interface uses the Telnet protocol and sets appropriate termination characters to communicate with the device.  If a portNumber and initString are provided, it is assumed that the remote device is not TSP&#8209;enabled. The Series 3700A does not perform any extra processing, prompt handling, error handling, or sending of commands. In addition, the tspnet.tsp.* commands cannot be used on devices that are not TSP&#8209;enabled.  If neither a portNumber nor an initString is provided, the remote device is assumed to be a Keithley Instruments TSP&#8209;enabled device. Depending on the state of the tspnet.tsp.abortonconnect attribute, the Series 3700A sends an abort command to the remote device on connection.   The Series 3700A also enables TSP prompts on the remote device and error management. The Series 3700A places remote errors from the TSP&#8209;enabled device in its own error queue and prefaces these errors with Remote Error, followed by an error description.   Do not manually change either the prompt functionality (localnode.prompts) or show errors by changing localnode.showerrors on the remote TSP-enabled device. If you do this, subsequent tspnet.tsp.* commands using the connection may fail.  You can simultaneously connect to a maximum of 32 remote devices.  Example 1  instrumentID = tspnet.connect(\"192.0.2.1\")  if instrumentID then     -- Use instrumentID as needed here     tspnet.disconnect(instrumentID)  end  Connect to a TSP-enabled device.  Example 2  instrumentID = tspnet.connect(\"192.0.2.1\", 1394, \"*rst\\r\\n\")  if instrumentID then     -- Use instrumentID as needed here     tspnet.disconnect(instrumentID)  end  Connect to a device that is not TSP&#8209;enabled.  Also see  localnode.prompts  localnode.showerrors   tspnet.tsp.abortonconnect  tspnet.disconnect()  "},{"id":464,"title":"tspnet.disconnect()","url":"14076.htm","text":"This function disconnects a specified TSP-Net session.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.disconnect(connectionID)  connectionID  The connection ID returned from tspnet.connect()  Details  This function disconnects the two devices by closing the connection. The connectionID is the session handle returned by tspnet.connect().  For TSP-enabled devices, this aborts any remotely running commands or scripts.  Example  testID = tspnet.connect(\"192.0.2.0\")  -- Use the connection  tspnet.disconnect(testID)  Create a TSP&#8209;Net session.  Close the session.  Also see  tspnet.connect()  "},{"id":465,"title":"tspnet.execute()","url":"14077.htm","text":"This function sends a command string to the remote device.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.execute(\"connectionID\", \"commandString\")  value1 = tspnet.execute(\"connectionID\", \"commandString\", formatString)  value1, value2 = tspnet.execute(\"connectionID\", \"commandString\", formatString)  value1, ..., valueN = tspnet.execute(\"connectionID\", \"commandString\", formatString)  connectionID  The connection ID returned from tspnet.connect()  commandString  The command to send to the remote device  value1  The first value decoded from the response message  value2  The second value decoded from the response message  valueN  The Nth value decoded from the response message; there is one return value for each format specifier in the format string  ...  One or more values separated with commas  formatString  Format string for the output  Details  This command sends a command string to the remote instrument. A termination is added to the command string when it is sent to the remote instrument (tspnet.termination()). You can also specify a format string, which causes the command to wait for a response from the remote instrument. The Series 3700A decodes the response message according to the format specified in the format string and returns the message as return values from the function (see tspnet.read() for format specifiers).  When this command is sent to a TSP-enabled instrument, the Series 3700A suspends operation until a timeout error is generated or until the instrument responds. The TSP prompt from the remote instrument is read and discarded. The Series 3700A places any remotely generated errors into its error queue. When the optional format string is not specified, this command is equivalent to tspnet.write(), except that a termination is automatically added to the end of the command.  Example 1  tspnet.execute(instrumentID, \"runScript()\")  Command the remote device to run a script named runScript.  Example 2  tspnet.timeout = 5  id_instr = tspnet.connect(\"192.0.2.23\", 23, \"*rst\\r\\n\")  tspnet.termination(id_instr, tspnet.TERM_CRLF)  tspnet.execute(id_instr, \"*idn?\")  print(\"tspnet.execute returns:\", tspnet.read(id_instr))  Print the *idn? string from the remote device.  Also see  tspnet.connect()  tspnet.read()  tspnet.termination()  tspnet.write()  "},{"id":466,"title":"tspnet.idn()","url":"14078.htm","text":"This function retrieves the response of the remote device to *IDN?.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  idnString = tspnet.idn(connectionID)  idnString  The returned *IDN? string  connectionID  The connection ID returned from tspnet.connect()  Details  This function retrieves the response of the remote device to *IDN?.  Example  deviceID = tspnet.connect(\"192.0.2.1\")  print(tspnet.idn(deviceID))  tspnet.disconnect(deviceID)  Assume the instrument is at IP address 192.0.2.1.  The output that is produced when you connect to the instrument and read the identification string may appear as:  KEITHLEY INSTRUMENTS,MODEL 3706A,00000170,01.10h  <CT2470_only_start_***Set CT2470 variable****>  deviceID = tspnet.connect(\"192.0.2.1\")  print(tspnet.idn(deviceID))  tspnet.disconnect(deviceID)  Assume the instrument is at IP address 192.0.2.1.  The output that is produced when you connect to the instrument and read the identification string may appear as:  KEITHLEY INSTRUMENTS,MODEL 2470,00000170,1.1.0s  <CT2470_only_end_***Set CT2470 variable****>  Also see  tspnet.connect()  "},{"id":467,"title":"tspnet.read()","url":"14079.htm","text":"This function reads data from a remote device.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  value1 = tspnet.read(connectionID)  value1 = tspnet.read(connectionID, formatString)  value1, value2 = tspnet.read(connectionID, formatString)  value1, ..., valueN = tspnet.read(connectionID, formatString)  value1  The first value decoded from the response message  value2  The second value decoded from the response message  valueN  The nth value decoded from the response message; there is one return value for each format specifier in the format string  ...  One or more values separated with commas  connectionID  The connection ID returned from tspnet.connect()  formatString  Format string for the output, maximum of 10 specifiers  Details  This command reads available data from the remote instrument and returns responses for the specified number of arguments.  The format string can contain the following specifiers:  %[width]s  Read data until the specified length  %[max width]t  Read data until the specified length or until punctuation is found, whichever comes first  %[max width]n  Read data until a newline or carriage return  %d  Read a number (delimited by punctuation)  A maximum of 10 format specifiers can be used for a maximum of 10 return values.  If formatString is not provided, the command returns a string that contains the data until a new line is reached. If no data is available, the Series 3700A pauses operation until the requested data is available or until a timeout error is generated. Use tspnet.timeout to specify the timeout period.  When the Series 3700A reads from a TSP-enabled remote instrument, the Series 3700A removes Test Script Processor (TSP&reg;) prompts and places any errors it receives from the remote instrument into its own error queue. The Series 3700A prefaces errors from the remote device with \"Remote Error,\" followed by the error number and error description.  Example  tspnet.write(deviceID, \"*idn?\\r\\n\")  print(\"write/read returns:\", tspnet.read(deviceID))  Send the \"*idn?\\r\\n\" message to the instrument connected as deviceID.  Display the response that is read from deviceID (based on the *idn? message).  Also see  tspnet.connect()  tspnet.readavailable()  tspnet.timeout  tspnet.write()  "},{"id":468,"title":"tspnet.readavailable()","url":"14080.htm","text":"This function checks to see if data is available from the remote device.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  bytesAvailable = tspnet.readavailable(connectionID)  bytesAvailable  The number of bytes available to be read from the connection  connectionID  The connection ID returned from tspnet.connect()  Details  This command checks to see if any output data is available from the device. No data is read from the instrument. This allows TSP scripts to continue to run without waiting on a remote command to finish.  Example  ID = tspnet.connect(\"192.0.2.1\")  tspnet.write(ID, \"*idn?\\r\\n\")  repeat bytes = tspnet.readavailable(ID) until bytes > 0  print(tspnet.read(ID))  tspnet.disconnect(ID)  Send commands that create data.  Wait for data to be available.  Also see  tspnet.connect()  tspnet.read()  "},{"id":469,"title":"tspnet.reset()","url":"14081.htm","text":"This function disconnects all TSP-Net sessions.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.reset()  Details  This command disconnects all remote instruments connected through TSP-Net. For TSP-enabled devices, this causes any commands or scripts running remotely to be terminated.  Also see  None  "},{"id":470,"title":"tspnet.termination()","url":"14082.htm","text":"This function sets the device line termination sequence.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  type = tspnet.termination(connectionID)  type = tspnet.termination(connectionID, termSequence)  type  An enumerated value indicating the termination type:  1 or tspnet.TERM_LF  4 or tspnet.TERM_CR  2 or tspnet.TERM_CRLF  3 or tspnet.TERM_LFCR  connectionID  The connection ID returned from tspnet.connect()  termSequence  The termination sequence  Details  This function sets and gets the termination character sequence that is used to indicate the end of a line for a TSP-Net connection.  Using the termSequence parameter sets the termination sequence. The present termination sequence is always returned.  For the termSequence parameter, use the same values listed in the table above for type. There are four possible combinations, all of which are made up of line feeds (LF or 0x10) and carriage returns (CR or 0x13). For TSP-enabled devices, the default is tspnet.TERM_LF. For devices that are not TSP&#8209;enabled, the default is tspnet.TERM_CRLF.  Example  deviceID = tspnet.connect(\"192.0.2.1\")  if deviceID then     tspnet.termination(deviceID, tspnet.TERM_LF)  end  Sets termination type for IP address 192.0.2.1 to TERM_LF.  Also see  tspnet.connect()  tspnet.disconnect()  "},{"id":471,"title":"tspnet.timeout","url":"14084.htm","text":"This attribute sets the timeout value for the tspnet.connect(), tspnet.execute(), and tspnet.read() commands.   Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Instrument reset<br>Recall setup  Create configuration script    20.0 (20 s)  Usage  value = tspnet.timeout  tspnet.timeout = value  value  The timeout duration in seconds (1&nbsp;ms to 30.0&nbsp;s)  Details  This attribute sets the amount of time the tspnet.connect(), tspnet.execute(), and tspnet.read() commands wait for a response.  The time is specified in seconds. The timeout may be specified to millisecond resolution but is only accurate to the nearest 10&nbsp;ms.  Example  tspnet.timeout = 2.0  Sets the timeout duration to 2 s.  Also see  tspnet.connect()  tspnet.execute()  tspnet.read()  "},{"id":472,"title":"tspnet.tsp.abort()","url":"14085.htm","text":"This function causes the TSP-enabled instrument to stop executing any of the commands that were sent to it.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.tsp.abort(connectionID)  connectionID  Integer value used as a handle for other tspnet commands  Details  This function is appropriate only for TSP-enabled instruments.  Sends an abort command to the remote instrument.  Example  tspnet.tsp.abort(testConnection)  Stops remote instrument execution on testConnection.  Also see  None  "},{"id":473,"title":"tspnet.tsp.abortonconnect","url":"14086.htm","text":"This attribute contains the setting for abort on connect to a TSP-enabled instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  No  Instrument reset<br>Recall setup  Create configuration script<br>Save setup  1 (enable)  Usage  tspnet.tsp.abortonconnect = value  value = tspnet.tsp.abortonconnect  value  Enable: 1  Disable: 0  Details  This setting determines if the instrument sends an abort message when it attempts to connect to a TSP&#8209;enabled instrument using the tspnet.connect() function.  When you send the abort command on an interface, it causes any other active interface on that instrument to close. If you do not send an abort command (or if tspnet.tsp.abortonconnect is set to 0) and another interface is active, connecting to a TSP&#8209;enabled remote instrument results in a connection. However, the instrument does not respond to subsequent reads or executes because control of the instrument is not obtained until an abort command has been sent.  Example  tspnet.tsp.abortonconnect = 0  Configure the instrument so that it does not send an abort command when connecting to a TSP&#8209;enabled&nbsp;instrument.  Also see  tspnet.connect()  "},{"id":474,"title":"tspnet.tsp.rbtablecopy()","url":"14090.htm","text":"This function copies a reading buffer synchronous table from a remote instrument to a TSP-enabled instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  table = tspnet.tsp.rbtablecopy(connectionID, \"name\")  table = tspnet.tsp.rbtablecopy(connectionID, \"name\", startIndex, endIndex)  table  A copy of the synchronous table or a string  connectionID  Integer value used as a handle for other tspnet commands  name  The full name of the reading buffer name and synchronous table to copy  startIndex  Integer start value  endIndex  Integer end value  Details  This function is only appropriate for TSP-enabled instruments.  This function reads the data from a reading buffer on a remote instrument and returns an array of numbers or a string representing the data. The startIndex and endIndex parameters specify the portion of the reading buffer to read. If no index is specified, the entire buffer is copied.   The function returns a table if the table is an array of numbers; otherwise a comma&#8209;delimited string is returned.  This command is limited to transferring 50,000 readings at a time.  Example  times = tspnet.tsp.rbtablecopy(testTspdevice,     \"testRemotebuffername.timestamps\", 1, 3)  print(times)  Copy the specified timestamps table for items 1 through 3, then display the table. Example output:  01/01/2011 10:10:10.0000013,01/01/2011 10:10:10.0000233,01/01/2011 10:10:10.0000576  Also see  None  "},{"id":475,"title":"tspnet.tsp.runscript()","url":"15280.htm","text":"This function loads and runs a script on a remote TSP-enabled instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  tspnet.tsp.runscript(connectionID, \"script\")  tspnet.tsp.runscript(connectionID, \"name\", \"script\")  connectionID  Integer value used as an identifier for other tspnet commands  name  The name that is assigned to the script  script  The body of the script as a string  Details  This function is appropriate only for TSP-enabled instruments.  This function downloads a script to a remote instrument and runs it. It automatically adds the appropriate loadscript and endscript commands around the script, captures any errors, and reads back any prompts. No additional substitutions are done on the text.  The script is automatically loaded, compiled, and run.  Any output from previous commands is discarded.  This command does not wait for the script to complete.  If you do not want the script to do anything immediately, make sure the script only defines functions for later use. Use the tspnet.execute() function to execute those functions later.  If no name is specified, the script is loaded as the anonymous script.  Example  tspnet.tsp.runscript(myconnection, \"mytest\",  \"print([[start]]) for d = 1, 10 do print([[work]]) end print([[end]])\")  Load and run a script entitled mytest on the TSP&#8209;enabled instrument connected with myconnection.  Also see  tspnet.execute()  "},{"id":476,"title":"tspnet.write()","url":"14089.htm","text":"This function writes a string to the remote instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  tspnet.write(connectionID, \"inputString\")  connectionID  The connection ID returned from tspnet.connect()  inputString  The string to be written  Details  The tspnet.write() function sends inputString to the remote instrument. It does not wait for command completion on the remote instrument.  The Series 3700A sends inputString to the remote instrument exactly as indicated. The inputString must contain any necessary new lines, termination, or other syntax elements needed to complete properly.  Because tspnet.write() does not process output from the remote instrument, do not send commands that generate too much output without processing the output. This command can stop executing if there is too much unprocessed output from previous commands.  Example  tspnet.write(myID, \"runscript()\\r\\n\")  Commands the remote instrument to execute a command or script named runscript() on a remote device identified in the system as myID.  Also see  tspnet.connect()  tspnet.read()  "},{"id":477,"title":"upgrade.previous()","url":"14062.htm","text":"This function returns to a previous version of the Series 3700A firmware.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  upgrade.previous()  Details  This function allows you to revert to an earlier version of the firmware.  When you send this function, the instrument searches the USB flash drive in the front&#8209;panel USB port for an upgrade file. If the file is found, the instrument performs the upgrade. An error is returned if an upgrade file is not found.  @Use this command with caution. Make sure your instrument can support the earlier version and that there are no compatibility issues. Check with Keithley Instruments before using this command if you have questions.  Also see  Upgrading the firmware  upgrade.unit()  "},{"id":478,"title":"upgrade.unit()","url":"14063.htm","text":"This function upgrades the Series 3700A firmware.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  upgrade.unit()  Details  When upgrade.unit() is used, the firmware is only loaded if the version of the firmware is newer than the existing version. If the version is older or at the same revision level, it is not upgraded.  When you send this function, the instrument searches the USB flash drive in the front&#8209;panel USB port for an upgrade file. If the file is found, the instrument verifies that the file is a newer version. If the version is older or at the same revision level, it is not upgraded, although it does request a reboot. If it is a newer version, the instrument performs the upgrade. An error is returned if no upgrade file is found.  Also see  upgrade.previous()  Upgrading the firmware  "},{"id":479,"title":"userstring.add()","url":"13987.htm","text":"This function adds a user-defined string to nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  userstring.add(\"name\", \"value\")  name  The name of the string; the key of the key-value pair  value  The string to associate with name; the value of the key-value pair  Details  This function associates the string value with the string name and stores this key-value pair in nonvolatile memory.  Use the userstring.get() function to retrieve the value associated with the specified name.  You can use the userstring functions to store custom, instrument-specific information in the instrument, such as department number, asset number, or manufacturing plant location.  Example  userstring.add(\"assetnumber\", \"236\")  userstring.add(\"product\", \"Widgets\")  userstring.add(\"contact\", \"John Doe\")  for name in userstring.catalog() do     print(name .. \" = \" ..        userstring.get(name))  end  Stores user-defined strings in nonvolatile memory and recalls them from the instrument using a for loop.  Example output:  assetnumber = 236  contact = John Doe  product = Widgets  Also see  userstring.catalog()  userstring.delete()  userstring.get()  "},{"id":480,"title":"userstring.catalog()","url":"13988.htm","text":"This function creates an iterator for the user&#8209;defined string catalog.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  for name in userstring.catalog() do body end  name  The name of the string; the key of the key-value pair  body  Code to execute in the body of the for loop  Details  The catalog provides access for user&#8209;defined string pairs, allowing you to manipulate all the key-value pairs in nonvolatile memory. The entries are enumerated in no particular order.  Example 1  for name in userstring.catalog() do     userstring.delete(name)  end  Deletes all user&#8209;defined strings in nonvolatile memory.  Example 2  userstring.add(\"assetnumber\", \"236\")  userstring.add(\"product\", \"Widgets\")  userstring.add(\"contact\", \"John Doe\")  for name in userstring.catalog() do     print(name .. \" = \" ..        userstring.get(name))  end  Prints all userstring key&#8209;value pairs.  Output:  product = Widgets  assetnumber = 236  contact = John Doe  Notice the key-value pairs are not listed in the order they were added.  Also see  userstring.add()  userstring.delete()  userstring.get()  "},{"id":481,"title":"userstring.delete()","url":"13989.htm","text":"This function deletes a user-defined string from nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  userstring.delete(\"name\")  name  The name (key) of the key-value pair of the user&#8209;defined string to delete  Details  This function deletes the string that is associated with name from nonvolatile memory.  Example  userstring.delete(\"assetnumber\")  userstring.delete(\"product\")  userstring.delete(\"contact\")  Deletes the user-defined strings associated with the assetnumber, product, and contact names.  Also see  userstring.add()  userstring.catalog()  userstring.get()  "},{"id":482,"title":"userstring.get()","url":"13990.htm","text":"This function retrieves a user-defined string from nonvolatile memory.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  value = userstring.get(\"name\")  value  The value of the user&#8209;defined string key-value pair  name  The name (key) of the user&#8209;defined string  Details  This function retrieves the string that is associated with name from nonvolatile memory.  Example  userstring.add(\"assetnumber\", \"236\")  value = userstring.get(\"assetnumber\")  print(value)  Create the user-defined string assetnumber, set to a value of 236.  Read the value associated with the user-defined string named assetnumber.  Store it in a variable called value, then print the variable value.  Output:  236  Also see  userstring.add()  userstring.catalog()  userstring.delete()  "},{"id":483,"title":"waitcomplete()","url":"13986.htm","text":"This function waits for all previously started overlapped commands to complete.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  waitcomplete()  waitcomplete(group)  group  Specifies which TSP-Link group on which to wait  Details  There are two types of instrument commands:  Overlapped commands: Commands that allow the execution of subsequent commands while instrument operations of the overlapped command are still in progress.  Sequential commands: Commands whose operations must finish before the next command is executed.  The waitcomplete() command suspends the execution of commands until the instrument operations of all previous overlapped commands are finished. This command is not needed for sequential commands.  Presently, the Series 3700A has no overlapped commands implemented. However, other TSP&#8209;enabled products, such as the Series 2600B System SourceMeter&reg; Instruments, have overlapped commands. Therefore, when the Series 3700A is a TSP master to a subordinate device with overlapped commands, use this function to wait until all overlapped operations are completed.  A group number may only be specified when this node is the master node.  If no group is specified, the local group is used.  If zero (0) is specified for the group, this function waits for all nodes in the system.  @Any nodes that are not assigned to a group (group number is 0) are part of the master node group.  Example 1  waitcomplete()  Waits for all nodes in the local group.  Example 2  waitcomplete(G)  Waits for all nodes in group G.  Example 3  waitcomplete(0)  Waits for all nodes on the TSP-Link network.  Also see  None  "}]}