{"pages":[{"id":1,"title":"TSP command reference","url":"_TSP_command_reference.htm","text":""},{"id":2,"title":"MP5000 PSU TSP commands","url":"116608.htm","text":"The TSP commands available for the MP5000 Series Modular Precision Mainframe power supply unit (PSU) modules are listed in alphabetical order.  "},{"id":3,"title":"bufferVar.appendmode","url":"107189.htm","text":"This attribute sets the state of the append mode of the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  0 (disabled)  Usage  state = bufferVar.appendmode  bufferVar.appendmode = state  state  The reading buffer append mode; set to one of the following:  Append mode off; new measure data overwrites existing buffer content: 0  Append mode on; appends new measure data to the existing buffer content: 1  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  Assigning a value to this attribute enables or disables the buffer append mode. This value can only be changed with an empty buffer. Use the bufferVar.clear() command to empty the buffer.  If the append mode is set to 0, any stored readings in the buffer are cleared before new ones are stored. If append mode is set to 1, any stored readings remain in the buffer and new readings are added to the buffer following the stored readings.  With append mode on, the first new measurement is stored at rb[n+1], where n is the number of readings stored in buffer rb.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  buffer1.appendmode = 1  print(buffer1.appendmode)  Append new readings to contents of the the reading buffer buffer1 created for channel 1 of the module installed in slot 1.  Also see  bufferVar.clear  "},{"id":4,"title":"bufferVar.cachemode","url":"115929.htm","text":"This attribute enables or disables the reading buffer cache (on or off).  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  Not saved  1 (enabled)  Usage  cacheMode = bufferVar.cachemode  bufferVar.cachemode = cacheMode  cacheMode  The reading buffer cache mode; set to one of the following:  Cache mode disabled (off): 0  Cache mode enabled (on): 1  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  Assigning a value to this attribute enables or disables the reading buffer cache. When enabled, the reading buffer cache improves access speed to reading buffer data.   If you run successive operations that overwrite reading buffer data, the reading buffer may return stale cache data. This can happen when initiating successive sweeps without reconfiguring the sweep measurements or when overwriting data in the reading buffer by setting the bufferVar.fillmode attribute to FILL_WINDOW. To avoid this, make sure that you include commands that automatically invalidate the cache as needed (for example, explicit calls to the bufferVar.clearcache() function) or disable the cache using this attribute (bufferVar.cachemode).  Example  buffer1 = slot[1].psu[1].makebuffer(100)  buffer1.cachemode = 1  Enables reading buffer cache of dedicated reading buffer buffer1.  Also see  bufferVar.clearcache()  "},{"id":5,"title":"bufferVar.capacity","url":"107191.htm","text":"This attribute contains the capacity of the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  See Details  Not applicable  Usage  maxNumber = bufferVar.capacity  maxNumber  The maximum number of readings the buffer can store  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  This read-only attribute returns the number of readings that can be stored in the buffer. The buffer capacity does not change as readings fill the buffer.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  maxNumber = buffer1.capacity  Returns the maximum number of readings that can be stored in the buffer1 buffer.<br>For example,  100   Also see  None  "},{"id":6,"title":"bufferVar.clear()","url":"107193.htm","text":"This function empties the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  bufferVar.clear()  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  This function clears all readings and associated columns that are enabled, such as timestamps and source values, from the specified buffer.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  buffer1.clear()  Clears readings from the buffer1 buffer.  Also see  None  "},{"id":7,"title":"bufferVar.clearcache()","url":"115930.htm","text":"This function clears the cache.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  bufferVar.clearcache()  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  This function clears all readings from the specified cache.   If you run successive operations that overwrite reading buffer data, the reading buffer may return stale cache data. This can happen when you:  Initiate successive sweeps without reconfiguring the sweep measurements. Watch for this when running Lua code remotely on more than one node, because values in the reading buffer cache may change while the Lua code is running.  Overwrite data in the reading buffer by setting the bufferVar.fillmode attribute to FILL_WINDOW.  To avoid this, you can include explicit calls to the bufferVar.clearcache() function to remove stale values from the reading buffer cache.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  buffer1.clearcache()  Clears all readings from the reading buffer cache buffer1.  Also see  bufferVar.fillmode  ***Reading buffers  "},{"id":8,"title":"bufferVar.fillcount","url":"107195.htm","text":"This attribute sets the reading buffer fill count.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  0  Usage  fillCount = bufferVar.fillcount  bufferVar.fillcount = fillCount  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  fillCount  The reading buffer fill count  Details  This attribute sets the number of readings to store before restarting at index 1. If the value is 0, then the capacity of the buffer is used. Use this attribute to control when the PSU restarts filling the buffer at index 1, rather than having it restart when the buffer becomes full.  If the bufferVar.fillcount attribute is set to a value higher than the capacity of the buffer, the behavior is the same as having a fill count of 0. When the buffer capacity is reached, storage continues at the starting index.   This attribute is only used when the bufferVar.fillmode attribute is set to psu[X].FILL_WINDOW.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  buffer1.fillmode = psu[1].FILL_WINDOW  buffer1.fillcount = 50  Sets the reading buffer buffer1 fill count to 50.  Also see  None  "},{"id":9,"title":"bufferVar.fillmode","url":"107196.htm","text":"This attribute sets the reading buffer fill mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  0 (psu[X].FILL_ONCE)  Usage  fillMode = bufferVar.fillmode  bufferVar.fillmode = fillMode  fillMode  The reading buffer fill mode, where X is the channel of the module containing the buffer; set to one of the following:  Do not overwrite old data: 0 or psu[X].FILL_ONCE  New readings restart at index 1 after acquiring reading at index bufferVar.fillcount: 1 or psu[X].FILL_WINDOW  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  When this attribute is set to psu[X].FILL_ONCE, the reading buffer will not overwrite readings. If the buffer fills up, new readings are discarded.  When this attribute is set to psu[X].FILL_WINDOW, new readingsare added after existing data until the buffer holds bufferVar.fillcount elements. Continuing the sequence, the next reading overwrites the reading at index 1, the following reading overwrites the reading at index 2, and so on.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  buffer1.fillmode = psu[1].FILL_ONCE  Sets the reading mode of the buffer for channel 1 of the module installed in slot 1 so that it does not overwrite readings.  Also see  None  "},{"id":10,"title":"bufferVar.fractionalseconds","url":"116911.htm","text":"This attribute controls whether or not the instrument automatically restarts modules that have been powered-down.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Restore configuration<br>Instrument reset<br>Power cycle  Not applicable  Not applicable  Usage  fractionalSec = bufferVar.fractionalseconds[N]  fractionalSec  The fractional second portion of the timestamp  bufferVar  The name of the reading buffer, which may be a default buffer or a user-defined buffer.  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the buffer.  Details  This read&#8209;only attribute is an array of the fractional portion of the timestamp, in seconds, when each reading occurred. Seconds are shown as fractions.  Example  reset()  testData = buffer.make(50)  *******new command needed***trigger.model.load(\"SimpleLoop\", 6, 0, testData)  slot[1].trigger.model.initiate()  waitcomplete()  print(testData.fractionalseconds[1])  printbuffer(1, 6, testData.fractionalseconds)  Create a reading buffer named testData and make six measurements.  Print the fractional portion of the timestamp for the first reading in the buffer.  Example output:  0.647118937  Print the fractional portion of the timestamp for the first six readings in the buffer.  Example output:  0.647118937, 0.064543, 0.48196127, 0.89938724, 0.316800064, 0.734218263  Also see  bufferVar.seconds  ***Reading buffers  "},{"id":11,"title":"bufferVar.measurefunctions","url":"116005.htm","text":"This attribute contains the measurement function that was used to acquire a reading stored in a specified reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  measurefunction = bufferVar.measurefunctions[N]  measurefunction  The measurement function used (current, voltage, ohms, or watts) to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The measurefunction buffer column is a Lua table array of strings indicating the function measured for the reading.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  printbuffer(1, 5, buffer1.measurefunctions)  Prints the measure function for the first five readings in a reading buffer for channel 1 of the module installed in slot&nbsp;1.  Also see  None  "},{"id":12,"title":"bufferVar.measureranges","url":"116008.htm","text":"This attribute contains the measurement range values that were used for readings stored in a specified buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  measurerange = bufferVar.measureranges[N]  measurerange  The measurement range used to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The measurerange buffer column is a Lua table array of full-scale range values for the measure range used when the measurement was made.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  printbuffer(1, 5, buffer1.measureranges)  Prints the measure range for the first five readings in a reading buffer for channel 1 of the module installed in slot&nbsp;1.  Also see  None  "},{"id":13,"title":"bufferVar.n","url":"116011.htm","text":"This attribute contains the number of readings in the buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  See Details  Not applicable  Usage  numberOfReadings = bufferVar.n  numberOfReadings  The number of readings stored in the buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  This read-only attribute contains the number of readings in the buffer.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  numberOfReadings = buffer1.n  Sets the numberOfReadings variable to the number of readings stored in buffer1.n of channel 1 of the module installed in slot 1.  Also see  None  "},{"id":14,"title":"bufferVar.readings","url":"116017.htm","text":"This attribute contains the readings stored in a specified reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  reading = bufferVar.readings[N]  reading  The value of the reading in the specified reading buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The readings buffer column is a Lua table array of the readings stored in the reading buffer. This array holds the same data that is returned when the reading buffer is accessed directly; rb[2] and rb.readings[2] access the same value.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  printbuffer(1, 5, buffer1.readings)  Prints the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":15,"title":"bufferVar.seconds","url":"116913.htm","text":"This contains the timestamp of a reading in seconds, in UTC format.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Restore configuration<br>Instrument reset<br>Power cycle  Not applicable  Not applicable  Usage  nonFracSeconds = bufferVar.seconds[N]  nonFracSeconds  The nonfractional seconds portion of the timestamp when the reading was stored  bufferVar  The name of the reading buffer, which may be a default buffer or a user&#8209;defined buffer  N  The reading number N; can be any value from 1 to the number of readings in the buffer; use the bufferVar.n command to determine the number of readings in the&nbsp;buffer  Details  This attribute contains the nonfractional seconds portion of the timestamp when the reading was stored in Coordinated Universal Time (UTC) format.  The nonfractional seconds portion of the timestamp gives the lowest resolution down to 1 second. To access additional resolution of a timestamp, see bufferVar.fractionalseconds.  Example  reset()   testData = buffer.make(50)   trigger.model.load(\"SimpleLoop\", 6, 0, testData)  slot[1].trigger.model.initiate()  waitcomplete()  printbuffer(1, 6, testData.seconds)  Create a reading buffer named testData, configure the instrument to make six measurements, and store the readings in the buffer.  Print the seconds portion for readings 1 to 6 in testData.   Example output:  1362261492, 1362261492, 1362261493, 1362261493, 1362261493, 1362261494  Also see  buffervar.fractionalseconds  "},{"id":16,"title":"bufferVar.sourcefunctions","url":"116020.htm","text":"This function contains the source function that was used for readings stored in a specified reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  sourcefunction = bufferVar.sourcefunctions[N]  sourcefunction  The source function used (such as voltage) to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The sourcefunctions buffer column is a Lua table array of strings indicating the source function at the time of the measurement.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  printbuffer(1, 5, buffer1.sourcefunctions)  Prints the source function for the first five readings in a reading buffer for channel 1 of the module installed in slot&nbsp;1.  Also see  None  "},{"id":17,"title":"bufferVar.sourceoutputstates","url":"116024.htm","text":"This attribute indicates the state of the source output for readings stored in a specified buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  state = bufferVar.sourceoutputstates[N]  state  The output state (off or on) when reading N of the specified buffer was acquired  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The sourceoutputstates buffer column is a Lua table array of strings indicating the state of the source output (off or on) at the time of the measurement.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  printbuffer(1, 5, buffer1.sourceoutputstates)  Prints the source output for the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":18,"title":"bufferVar.sourceranges","url":"116027.htm","text":"This attribute indicates the state of the source range for readings stored in a specified buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  sourcerange = bufferVar.sourceranges[N]  sourcerange  The source range used to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  The sourcerange buffer recall attribute is a Lua table array of full-scale range values for the source range used when the measurement was made.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  printbuffer(1, 5, buffer1.sourceranges)  Stores the source range used for the first reading stored in buffer1, then prints the source function for the first five readings in a reading buffer for channel 1 of the module installed in slot&nbsp;1.  Also see  None  "},{"id":19,"title":"bufferVar.sourcevalues","url":"116030.htm","text":"When enabled, this attribute contains the source levels being output when readings in the reading buffer were acquired.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  sourcevalue = bufferVar.sourcevalues[N]  sourcevalue  The source value used to acquire reading number N in the specified buffer  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  If the bufferVar.sourcevalues&nbsp;attribute is enabled before readings are taken, the sourcevalues buffer column is an array (a Lua table) of the sourced value at the time of the reading. You can only set the bufferVar.sourcevalues attribute if the affected reading buffer is empty.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  printbuffer(1, 5, buffer1.sourcevalues)  Prints the source output for the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":20,"title":"bufferVar.statuses","url":"116034.htm","text":"This attribute contains the status values of readings in the reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  Not applicable  Usage  statusInformation = bufferVar.statuses[N]  statusInformation  The status value when reading N of the specified buffer was acquired  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  This read-only buffer column is a Lua table array of the status values for all of the readings in the buffer. The status values are floating-point numbers that encode the status value.  Buffer status bits  Bit  Name  Hex value  Description  B1  Unused  0x02  Unused  B2  Unused  0x04  Unused  B3  Unused  0x08  Unused  B4  Unused  0x10  Unused  B5  Rel  0x20  Relative offset applied to reading  B6  Compliance  0x40  Source function was limited because the complementary function would be over the compliance limit  B7  Unused  0x80  Unused  Example  buffer1 = slot[1].psu[1].makebuffer(100)  printbuffer(1, 5, buffer1.statuses)  Prints the status values for the first five readings in a reading buffer for channel 1 of the module installed in slot 1.  Also see  None  "},{"id":21,"title":"bufferVar.timestampresolution","url":"116038.htm","text":"This attribute contains the resolution of the timestamp.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  1e-6 (1 µs)  Usage  resolution = bufferVar.timestampresolution  bufferVar.timestampresolution = resolution  resolution  Timestamp resolution in seconds (minimum 1&nbsp;µs; rounded to an even power of&nbsp;2&nbsp;µs)  bufferVar  The reading buffer; can be a dynamically allocated user-defined buffer or a dedicated reading buffer  Details  Assigning a value to this attribute sets the resolution for the timestamps. Reading this attribute returns the timestamp resolution value. This value can only be changed with an empty buffer. Empty the buffer using the bufferVar.clear() function.  The finest timestamp resolution is 0.000001 seconds (1 μs). At this resolution, the reading buffer can store unique timestamps for up to 71&nbsp;minutes. You can increase this value for very long tests.  For dedicated reading buffers, all buffer attributes are saved to nonvolatile memory only when the reading buffer is saved to nonvolatile memory.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  buffer1.timestampresolution = 0.000008  Sets the timestamp resolution of dedicated reading buffer 1 to 8 μs.  Also see  bufferVar.clear()  bufferVar.timestamps  "},{"id":22,"title":"bufferVar.timestamps","url":"116040.htm","text":"This attribute contains the timestamp for each reading in the specified buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Clearing the buffer  See Details  1  Usage  timestamp = bufferVar.timestamps[N]  timestamp  The complete timestamp (including date, time, and fractional seconds) of reading number N in the specified reading buffer when the reading was acquired  bufferVar  The reading buffer can be a dynamically allocated user-defined buffer or a dedicated reading buffer  N  The reading number: 1 to bufferVar.n  Details  When enabled by the bufferVar.collecttimestamps attribute, this attribute contains the timestamp (relative to bufferVar.basetimestamp) when each reading saved in the specified reading buffer occurred.This attribute is relative to the buffervar.basetimestamp.  The bufferVar.timestamps information from a reading buffer is only available if the bufferVar.collecttimestamps attribute is set to 1 (default setting). If it is set to 0, you cannot access any time information from a reading buffer.  If enabled, this buffer recall attribute is like an array (a Lua table) that contains timestamps, in seconds, of when each reading occurred.  For dedicated reading buffers, all buffer attributes are saved to nonvolatile memory only when the reading buffer is saved to nonvolatile memory.  Example  buffer1 = slot[1].psu[1].makebuffer(100)  timestamp = buffer1.timestamps[1]  Retrieve the timestamp of the first reading stored in buffer1.  Also see  bufferVar.clear()  bufferVar.n  bufferVar.readings  bufferVar.statuses  Reading buffers  "},{"id":23,"title":"slot[Z].firmware.update()","url":"116043.htm","text":"This function flashes a firmware image of a module installed in a slot after the image has been downloaded to the mainframe.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].firmware.update()  Z  Module slot number  Details  This function flashes the firmware of a module connected to a slot. Send this command after the firmware image has been downloaded to the mainframe, either by opening a raw socket connection or by using an existing utility or tool to download the image, or after inserting a USB flash drive containing the image.  Example  slot[1].firmware.update()  Flashes the firmware of the module installed in slot 1.  Also see  slot[Z].firmware.verify  "},{"id":24,"title":"slot[Z].firmware.verify()","url":"116046.htm","text":"This function verifys that an image downloaded to the mainframe is the exact firmware flashed onto a module.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  result = slot[Z].firmware.verify()  Z  Module slot number  Details  This function verifies that the firmware of a module connected to a slot is the same as the firmware downloaded to the mainframe computer. This should be invoked after the image has been downloaded onto the mainframe, either by opening a raw socket connection or using an existing utility or tool that will download the image.   This function is useful to determine that the firmware has flashed correctly after performing a slot[Z].firmware.update() command.  Example  print(slot[1].firmware.verify())  Verifies that the firmware of the module installed in slot 1 is the same as the firmware downloaded to the mainframe.  Also see  slot[Z].firmware.update  "},{"id":25,"title":"slot[Z].license","url":"117422.htm","text":"This attribute stores the license of the module installed in the specified mainframe slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  license = slot[Z].license  license  License text of the instrument  Z  Module slot number  Details  This attribute stores the license of the module installed in the specified mainframe slot.  Example  print(slot[1].license)  Returns the license of the module installed in slot 1 of the mainframe.  Also see  None  "},{"id":26,"title":"slot[Z].manufacturer","url":"107212.htm","text":"This attribute stores the manufacturer of the module in the specified mainframe slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Tektronix  Usage  manufacturer = slot[Z].manufacturer  manufacturer  This is always Tektronix  Z  Module slot number  Details  This attribute stores the manufacturer of the module installed in the specified mainframe slot.  Example  print(slot[1].manufacturer)  Returns the manufacturer of the module installed in slot 1:  Tektronix  Also see  None  "},{"id":27,"title":"slot[Z].model","url":"107213.htm","text":"This attribute stores the model number of the module in the specified mainframe slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  model = slot[Z].model  model  The model number of the module.  Z  Module slot number  Details  This attribute stores the model number of the module installed in the specified slot.  Example  print(slot[1].model)  Returns the model number of the module installed in slot 1.  Also see  None  "},{"id":28,"title":"slot[Z].psu[X].abort()","url":"114919.htm","text":"This function terminates all overlapped operations on the specified channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].abort()  Z  Module slot number  X  Module channel number  Details  This function terminates all overlapped operations on the specified channel.  This function does not turn the output off or change any setting.  Example  slot[1].psu[1].abort()  Aborts overlapped measurements for channel 1 of the module installed in slot 1.  Also see  slot[Z].psu[X].measure.aperture  "},{"id":29,"title":"slot[Z].psu[X].configlist.create()","url":"115220.htm","text":"This function creates an empty configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].configlist.create(\"configListName\")  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a measure configuration list  Details  This command creates an empty configuration list. To add configuration indexes to this list, use the slot[Z].psu[X].configlist.store() command.  Configuration lists are not saved when the instrument is turned off. To save a configuration list, create a configuration script to save instrument settings, including any defined configuration lists. Configuration list names must be unique.  Example  slot[1].psu[1].configlist.create(\"MyMeasList\")  Creates a configuration list named MyMeasList on channel 1 of the module installed in slot 1.  Also see  \"Configuration lists\" in the General operation section of the MP5000 Modular Precision Test System Reference Manual  slot[Z].psu[X].configlist.delete()  slot[Z].psu[X].configlist.query()  slot[Z].psu[X].configlist.recall()  slot[Z].psu[X].configlist.size()  slot[Z].psu[X].configlist.store()  slot[Z].psu[X].configlist.table()  "},{"id":30,"title":"slot[Z].psu[X].configlist.delete()","url":"115224.htm","text":"This function deletes a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].configlist.delete(\"configListName\")  slot[Z].psu[X].configlist.delete(\"configListName\", index)  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a configuration list  index  A number starting from 1 that defines a specific configuration index in the configuration&nbsp;list  Details  Deletes a configuration list. If the index is not specified, the entire configuration list is deleted. If the index is specified, only the specified configuration index in the list is deleted.  When an index is deleted from a configuration list, the index numbers of the following indexes are shifted up by one. For example, if you have a configuration list with 10 indexes and you delete index 3, the index that was numbered 4 becomes index 3, and the all the following indexes are renumbered in sequence to index 9. Because of this, if you want to delete several nonconsecutive indexes in a configuration list, it is best to delete the higher numbered index first, then the next lower index, and so on. This also means that if you want to delete all the indexes in a configuration list, you must delete index 1 repeatedly until all indexes have been removed.  Example  slot[1].psu[1].configlist.delete(\"myMeasList\")  Deletes a configuration list named myMeasList on channel 1 of the module installed in slot 1.  slot[1].psu[1].configlist.delete(\"myMeasList\", 2)  Deletes configuration index 2 from the configuration list named myMeasList on channel 1 of the module installed in slot 1.  Also see  \"Configuration lists\" in the General operation section of the MP5000 Modular Precision Test System Reference Manual  slot[Z].psu[X].configlist.create()  "},{"id":31,"title":"slot[Z].psu[X].configlist.query()","url":"115225.htm","text":"This function returns a list of TSP commands and parameter settings that are stored in the specified configuration index.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].configlist.query(\"configListName\", index)  slot[Z].psu[X].configlist.query(\"configListName\", index, \"fieldSeparator\")  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a configuration list  index  A number starting from 1 that defines a specific index in the configuration list  fieldSeparator  String that represents the separator for the data; use one of the following:  Comma (default): ,  Semicolon: ;  Newline: \\n  Details  This command recalls data for one configuration index.   Example  print(slot1.psu1.configlist.query(\"testMeasList\", 2, \"\\n\"))  Returns the TSP commands and parameter settings that represent the settings in configuration index 2 on channel 1 of the module installed in slot 1.  Example output:  slot1.psu1.measure.func = psu.FUNC_DC_CURRENT  slot1.psu1.measure.range = 1.000000e-08  slot1.psu1.measure.autorange = psu.ON  slot1.psu1.measure.autorangelow = 1.000000e-08  slot1.psu1.measure.autozero.enable = psu.ON  slot1.psu1.measure.displaydigits = psu.DIGITS_5_5  slot1.psu1.measure.filter.enable = psu.OFF  slot1.psu1.measure.filter.count = 10  slot1.psu1.measure.filter.type = psu.FILTER_REPEAT_AVG  slot1.psu1.measure.limit[1].autoclear = psu.ON  slot1.psu1.measure.limit[1].enable = psu.OFF  slot1.psu1.measure.limit[1].high.value = 1.000000e+00  slot1.psu1.measure.limit[1].low.value = -1.000000e+00  slot1.psu1.measure.limit[2].autoclear = psu.ON  slot1.psu1.measure.limit[2].enable = psu.OFF  slot1.psu1.measure.limit[2].high.value = 1.000000e+00  slot1.psu1.measure.limit[2].low.value = -1.000000e+00  slot1.psu1.measure.math.enable = psu.OFF  slot1.psu1.measure.math.format = psu.MATH_PERCENT  slot1.psu1.measure.math.mxb.bfactor = 0.000000e+00  slot1.psu1.measure.math.mxb.mfactor = 1.000000e+00  slot1.psu1.measure.math.percent = 1.000000e+00  slot1.psu1.measure.userdelay[1] = 0.000000e+00  slot1.psu1.measure.userdelay[2] = 0.000000e+00  slot1.psu1.measure.userdelay[3] = 0.000000e+00  slot1.psu1.measure.userdelay[4] = 0.000000e+00  slot1.psu1.measure.userdelay[5] = 0.000000e+00  slot1.psu1.measure.nplc = 1.000000e+00  slot1.psu1.measure.offsetcompensation = psu.OFF  slot1.psu1.measure.sense = psu.SENSE_2WIRE  slot1.psu1.terminals = psu.TERMINALS_FRONT  slot1.psu1.measure.unit = psu.UNIT_AMP  slot1.psu1.measure.rel.enable = psu.OFF  slot1.psu1.measure.rel.level = 0.000000e+00  Also see  \"Configuration lists\" in the General operation section of the MP5000 Source-Measure Unit Reference Manual  slot[Z].psu[X].configlist.create()  "},{"id":32,"title":"slot[Z].psu[X].configlist.recall()","url":"115221.htm","text":"This function recalls a configuration index in a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].configlist.recall(\"configListName\", index)  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a configuration list  index  A number starting from 1 that defines a specific configuration index in the measure configuration list  Details  Use this command to recall the settings stored in a specific configuration index in a configuration list. If you do not specify an index when you send the command, an error message is displayed.  If you recall an invalid index (for example, calling index 3 when there are only two indexes in the configuration list) or try to recall an index from an empty configuration list, an error message is displayed.  Each index contains the settings for the selected function of that index. Settings for other functions are not affected when the configuration list index is recalled. A single index stores the settings associated with a single measurement.  Example  slot[1].psu[1].configlist.recall(\"MyMeasList\", 5)  Recalls configuration index 5 in a configuration list named MyMeasList on channel 1 of the module installed in slot 1.  Also see  \"Configuration lists\" in the General operation section of the MP5000 Modular Precision Test System Reference Manual  createconfigscript()  slot[Z].psu[X].configlist.create()  slot[Z].psu[X].configlist.store()  "},{"id":33,"title":"slot[Z].psu[X].configlist.size()","url":"115227.htm","text":"This function returns the size (number of configuration indexes) of a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  indexCount = slot[Z].psu[X].configlist.size(\"configListName\")  Z  Module slot number  X  Module channel number  indexCount  A number starting from 0 that represents the total count of indexes stored in the specified configuration list  configListName  A string that represents the name of a configuration list  Details  This command returns the size (number of configuration indexes) of a configuration list.  The size of the list is equal to the number of configuration indexes in a configuration list.  Example  print(slot[1].psu[1].configlist.size(\"testMeasList\"))  Returns the number of configuration indexes in a configuration list named testMeasList on channel&nbsp;1 of the module installed in slot 1.  Example output:  1  Also see  createconfigscript()  slot[Z].psu[X].configlist.create()  "},{"id":34,"title":"slot[Z].psu[X].configlist.store()","url":"115223.htm","text":"This function stores the active measure settings into the named configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].configlist.store(\"configListName\")  slot[Z].psu[X].configlist.store(\"configListName\", index)  Z  Module slot number  X  Module channel number  configListName  A string that represents the name of a configuration list  index  A number starting from 1 that defines a specific configuration index in the configuration list. This parameter is optional.  Details  Use this command to store the active measure settings to a configuration index in a configuration list. If the index parameter is not provided, the new settings are appended to the end of the list. The index only stores the active settings for a single active measure function.  Configuration lists are not saved when the instrument is turned off or reset. To save a configuration list, create a configuration script to save instrument settings, including any defined configuration lists.  Example  slot[1].psu[1].configlist.store(\"MyConfigList\")  Stores the active settings of the instrument to the end of the configuration list MyConfigList on channel 1 of the module installed in slot 1.  slot[1].psu[1].configlist.store(\"MyConfigList\", 5)  Stores the active settings of the instrument to configuration index 5 in the configuration list MyConfigList on channel 1 of the module installed in slot 1.  Also see  \"Configuration lists\" in the General operation section of the MP5000 Modular Precision Test System Reference Manual  createconfigscript()   slot[Z].psu[X].configlist.create()  "},{"id":35,"title":"slot[Z].psu[X].configlist.table()","url":"115226.htm","text":"This function returns the name of one measure configuration lists that is stored on the instrument.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].configlist.table()  Z  Module slot number  X  Module channel number  Details  You can use this command to retrieve the names of measure configuration lists that are stored in the instrument.   This command returns one name each time you send it. This command returns nil to indicate that there are no more names to return. If the command returns nil the first time you send it, no measure configuration lists have been created for the instrument.  Example  print(slot[1].psu[1].configlist.table())  Requests the name of one configuration list that is stored in the instrument. Send the command again until it returns nil to get all stored lists.  print(slot[1].psu[1].configlist.table())  If there are two configuration lists on the instrument.  Example output:  testMeasList  print(slot[1].psu[1].configlist.table())  myMeasList  print(slot[1].psu[1].configlist.table())  nil  Also see  \"Configuration lists\" in the General operation section of the MP5000 Modular Precision Test System Reference Manual  createconfigscript() ****  slot[Z].psu[X].configlist.create()  "},{"id":36,"title":"slot[Z].psu[X].defbufferY","url":"107216.htm","text":"This attribute contains the default dedicated reading buffers.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  See Details  Not applicable  Usage  bufferVar = slot[Z].psu[X].defbufferY  bufferVar  The dedicated reading buffer  Z  Module slot number  X  Module channel  Y  Buffer (1 = debuffer1, 2 = debuffer2)  Details  Each PSU channel contains two dedicated reading buffers: slot[Z].psu[X].defbuffer1 and slot[Z].psu.debuffer2.  Example  slot[1].psu[2].measure.v(slot[1].psu[2].defbuffer1)  Stores voltage measurements in defbuffer1 of channel 2 of the module installed in slot 1.  Also see  None  "},{"id":37,"title":"slot[Z].psu[X].makebuffer()","url":"107217.htm","text":"This function creates a reading buffer.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  bufferVar = slot[Z].psu[X].makebuffer(bufferSize)  bufferVar  The name of the buffer being created  Z  Module slot number  X  Module channel number  bufferSize  The desired size of the reading buffer  Details  Reading buffers can be created and allocated dynamically using this function. Use bufferSize to designate the number of readings the buffer can store.  An error is returned if bufferSize exceeds the maximum storage capacity of the module  Dynamically allocated reading buffers can be used interchangeably with the dedicated slot[Z].psu[X].defbufferY buffers.  A reading buffer can be deleted by setting all references to the reading buffer equal to nil, then running the garbage collector.  Example  mybuffer2 = slot[1].psu[2].makebuffer(200)  Creates a 200-element reading buffer (mybuffer2) for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].defbufferY  "},{"id":38,"title":"slot[Z].psu[X].measure.aperture","url":"107218.htm","text":"This attribute configures the measurement aperture for a channel in seconds.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Recall setup<br>slot[Z].psu[X].measure.rate  Saved setup  1e-6  Usage  value = slot[Z].psu[X].measure.aperture  value  Aperture: 1e-6 to 500e-3 s  Z  Module slot number  X  Module channel number  Details  This setting configures the aperture for a channel in seconds. Setting this attribute affects the slot[Z].psu[X].measure.nplc attribute.  The NPLC and aperture attributes cannot be set directly. These attributes are used to report the present measure rate in NPLC or seconds. The measure rate is set to a predefined rate using the slot[Z].psu[X].measure.rate attribute.  [X].measure.nplc attribute.  This attribute is useful when you want to set a fixed measurement aperture time. To set an aperture that is a multiple of power line cycles, use slot[Z].psu[X].measure.nplc.  Example  print(slot[1].psu[2].measure.aperture)  Returns the present measure aperture in seconds for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].measure.nplc  slot[Z].psu[X].measure.rate  "},{"id":39,"title":"slot[Z].psu[X].measure.count","url":"107232.htm","text":"This attribute sets the number of measurements performed when a measurement is requested.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  count = slot[Z].psu[X].measure.count  slot[Z].psu[X].measure.count = count  count  Number of measurements > 0  Z  Module slot number  X  Module channel number  Details  This attribute controls the number of measurements made any time a measurement is requested. When using a reading buffer with a measure command, this attribute also controls the number of readings to be stored.  Example  slot[1].psu[1].measure.count = 100  Sets the number of measurements to be performed on channel 1 of the module installed in slot 1.  Also see  slot[Z].psu[X].measure.overlappedY()  slot[Z].psu[X].measure.Y()  "},{"id":40,"title":"slot[Z].psu[X].measure.nplc","url":"107220.htm","text":"This attribute configures the measurement aperture in number of power line cycles.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Recall setup<br>slot[Z].psu[X].measure.rate  Saved setup  1.0  Usage  nplc = slot[Z].psu[X].measure.nplc  nplc  Power line cycles: 0.00005 to 30  Z  Module slot number  X  Module channel number  Details  This setting configures the measurement aperture in number of power line cycles (NPLC) for the channel. The measurement aperture is the amount of time that the input signal is measured. The amount of time is specified as the number of power line cycles (NPLCs). Each PLC for 60&nbsp;Hz is 16.67&nbsp;ms (1/60) and each PLC for 50&nbsp;Hz is 20&nbsp;ms (1/50). For 60&nbsp;Hz, if you set the NPLC to 0.1, the measure time is 1.667 ms. The shortest amount of time results in the fastest reading rate but increases the reading noise. The longest amount of time provides the lowest reading noise but has the slowest reading rate.  Settings between the fastest and slowest number of power line cycles are a compromise between speed and noise.  If you change this attribute, the slot[Z].psu[X].measure.aperture attribute.  The NPLC and aperture attributes cannot be set directly. These attributes are used to report the present measure rate in NPLCs or seconds. The measure rate is set to a predefined rate using the slot[Z].psu[X].measure.aperture attribute is changed to the equivalent value of seconds.  Use this attribute to set a measurement aperture that is a multiple of the number of power line cycles. To set a fixed aperture, use slot[Z].psu[X].measure.aperture.  Example  NPLC1 = slot[1].psu[2].measure.nplc  print(NPLC1)  Reads the measurement aperture in NPLCs for channel 2 of the module installed in slot 1 and prints the value of NPLC1.  Also see  slot[Z].psu[X].measure.aperture  slot.[Z].psu[X].measure.rate  "},{"id":41,"title":"slot[Z].psu[X].measure.overlappedY()","url":"107227.htm","text":"This function starts an asynchronous (background) measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  No  Usage  slot[Z].psu[X].measure.overlappedY(rbuffer)  slot[Z].psu[X].measure.overlappediv(ibuffer, vbuffer)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance r  Power: p  rbuffer  A reading buffer object where readings are stored  ibuffer  A reading buffer object where current readings are stored  vbuffer  A reading buffer object where voltage readings are stored  Details  This function starts a measurement and immediately returns the readings. The measurements are stored in a reading buffer, along with any ancillary information also acquired. If the instrument is configured to return multiple readings, the readings become available as they are made.  Measurements are in the following units: v = volts, i = amperes, r = ohms, p = watts.  The slot[Z].psu[X].measure.overlappediv() function stores current readings in ibuffer and voltage readings in vbuffer.  This function is an overlapped command. Script execution continues while measurements are made in the background. Attempts to access result values that have not yet been generated cause the script to wait for the data to become available. The waitcomplete() function can also be used to wait for the measurements to complete before continuing with the script.  Any data in a reading buffer is deleted before recording any measurements unless the reading buffer has been configured to append data.  Example  slot[1].psu[1].measure.overlappedv(slot[1].psu[1].defbuffer1)  Starts background voltage measurements for channel 1 of the module installed in slot 1.  Also see  slot[Z].psu[X].defbufferY  slot[Z].psu[X].measure.Y()  "},{"id":42,"title":"slot[Z].psu[X].measure.rangeY","url":"107228.htm","text":"This attribute contains the positive, full scale value of the measurement range for voltage or current.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Usage  rangeValue = slot[Z].psu[X].measure.rangeY  rangeValue  MPSU50-2ST  Voltage range: 50 V  Current range: 5 A  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Details  This attribute indicates the range to use for measuring the specified function.  Example  print(slot[1].psu[2].measure.rangev)  Displays the present voltage measurement range for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":43,"title":"slot[Z].psu[X].measure.rate","url":"107825.htm","text":"This attribute configures the measure rate for a PSU channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Instrument reset<br>Power supply reset  Nonvolatile memory  slot[Z].psu[X].RATE_NORMAL  Usage  measureRate = slot[Z].psu[X].measure.rate  slot[Z].psu[X].measure.rate = measureRate  measureRate  The predefined measure rate, one of the following values:  slot[Z].psu[X].RATE_FAST  slot[Z].psu[X].RATE_NORMAL  Z  Module slot number  X  Module channel number  Details  This attribute configures the measure rate for the channel to one of the predefined rates.  Setting this attribute changes the measurement aperture of the analog-to-digital converter and also changes the reported NPLC and aperture attributes to match the predefined rate.  Example  slot[1].psu[2].measure.rate = slot[1].psu[2].RATE_FAST  Sets the measure rate of the power supply to the FAST setting for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].measure.aperture  slot[Z].psu[X].measure.nplc  "},{"id":44,"title":"slot[Z].psu[X].measure.rel.enableY","url":"107229.htm","text":"This attribute turns relative measurements on or off.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  relEnable = slot[Z].psu[X].measure.rel.enableY  slot[Z].psu[X].measure.rel.enableY = relEnable  relEnable  Relative measurement control. Set relEnable to one of the following values:  psu[X].DISABLE: Disables relative measurements  psu[X].ENABLE: Enables relative measurements  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance: r  Power: p  Details  This attribute enables or disables relative measurements. When relative measurements are enabled, all subsequent measured readings are offset by the relative offset value specified by slot[Z].psu[X].measure.rel.levelY.   Each returned measured relative reading is the result of the following:  Relative reading = Actual measured reading − Relative offset value  Example  slot[1].psu[2].measure.rel.enablev = slot[1].psu[2].ENABLE  Enables relative voltage measurements for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].measure.rel.levelY  "},{"id":45,"title":"slot[Z].psu[X].measure.rel.levelY","url":"107230.htm","text":"This attribute specifies the offset value for relative measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  relValue = slot[Z].psu[X].measure.rel.levelY  slot[Z].psu[X].measure.rel.levelY = relValue  relValue  Relative measurement offset value  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance: r  Power: p  Details  This attribute specifies the offset value used for relative measurements. When relative measurements are enabled (slot[Z].psu[X].measure.rel.enableY), all subsequent measured readings will be offset by the value of this attribute.  Each returned measured relative reading is the result of the following calculation:   Relative reading = Actual measured reading − Relative offset value  Example  slot[1].psu[2].measure.rel.levelv = slot[1].psu[2].measure.v()  Makes a voltage measurement using channel 2 of the module installed in slot 1 and then uses the reading as the relative offset value.  Also see  slot[Z].psu[X].measure.rel.enableY  "},{"id":46,"title":"slot[Z].psu[X].measure.tempcomp","url":"107627.htm","text":"This attribute turns temperature compensation on or off for the current measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  psu[X].ENABLE  Usage  tempcomp = slot[Z].psu[X].measure.tempcomp  slot[Z].psu[X].measure.tempcomp = tempcomp  tempcomp  Temperature compensation control setting  Disables temperature compensation: psu[X].DISABLE  Enables temperature compensation: psu[X].ENABLE  Z  Module slot number  X  Module channel number  Details  This attribute enables or disables temperature compensation for current measurements. It does not affect voltage measurements. Enabling temperature compensation reduces the measure rate for current measurements because the analog-to-digital converter performs an additional temperature measurement.  @This setting must be disabled when taking measurements for current calibration.  Example  slot[1].psu[2].measure.tempcomp = slot[1].psu[2].ENABLE  Enables temperature compensation for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":47,"title":"slot[Z].psu[X].measure.Y()","url":"107231.htm","text":"This function makes one or more measurements.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  reading = slot[Z].psu[X].measure.Y()  reading = slot[Z].psu[X].measure.Y(readingBuffer)  iReading, vReading = slot[Z].psu[X].measure.iv()  iReading, vReading = slot[Z].psu[X].measure.iv(iReadingBuff, vReadingBuff)  reading  The measurement value  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Resistance: r  Power: p  readingBuffer  A reading buffer object where the readings will be stored  Details  When the measurement function is current and calibration is unlocked, this command also returns a compensation value as a second value. This compensation value is then used for the slot[Z].psu[X].measure.calibratei() and slot[Z].psu[X].measure.calibratetc() commands.  Example  voltageValue = slot[1].psu[2].measure.v()  Measures the voltage on channel 2 of the module installed in slot 1 and stores it in the voltagevalue variable.  Also see  slot[Z].psu[X].measure.rel.enableY  "},{"id":48,"title":"slot[Z].psu[X].overlapped","url":"107235.htm","text":"This attribute contains the state of the overlapped mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  slot[Z].psu.DISABLE or 0  Usage  overlappedMode = slot[Z].psu[X].overlapped  slot[Z].psu[X].overlapped = overlappedMode  overlappedMode  slot[Z].psu.DISABLE or 0  slot[Z].psu.ENABLE or 1  Z  Module slot number  X  Module channel number  Details  This attribute configures the state of the overlapped mode.  When this attribute is set to DISABLE, PSU operations proceed as normal. A command is processed before executing the next command.  When this attribute is set to ENABLE, a command returns as soon as it is able, even if it has not been reflected in the hardware. The command for setting the source voltage level for example, returns to Lua so it can process the next command, even if the PSU is not yet sourcing at that voltage level. This only applies to commands that specify settings. A command that retrieves a setting or a measure command waits for commands to complete before executing.  This attribute is useful when performing operations on multiple channels. Changing the voltage level on channel 1 and channel 2 with this setting enabled should result in those changes occurring with less time between than if this setting was disabled.  Example  slot[1].psu[2].overlapped = slot[1].psu.ENABLE  Enables overlapped mode for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":49,"title":"slot[Z].psu[X].reset()","url":"107236.htm","text":"This function turns off the output and resets the commands that begin with psu[X]. to their default settings.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].reset()  Z  Module slot number  X  Module channel number  Details  This function turns off the output and returns the specified PSU to its default settings.  Example  slot[1].psu[1].reset()  Turns off the output and resets channel 1 of the module installed in slot 1 to its default settings.  Also see  None  "},{"id":50,"title":"slot[Z].psu[X].source.constantcurrent","url":"107233.htm","text":"This attribute indicates when the source is within the current limit.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Usage  value = slot[Z].psu[X].source.constantcurrent  value  The state of source compliance:  True :  Indicates that the power supply is in constant current state  False:  Indicates that the power supply is in constant voltage state  Z  Module slot number  X  Module channel number  Details  This setting indicates the state of source compliance.  Example  print(slot[1].psu[2].source.constantcurrent)  Returns whether the source connected to channel 2 of the module installed in slot 1 is within the current limit.  Also see  None  "},{"id":51,"title":"slot[Z].psu[X].source.levelv","url":"107237.htm","text":"This attribute configures the voltage source level.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  sourceLevel = slot[Z].psu[X].source.levelv  slot[Z].psu[X].source.levelv = sourceLevel  sourceLevel  0 V to ± 50.1 V  Z  Module slot number  X  Module channel number  Details  This attribute configures the voltage source level.  Example  slot[1].psu[2].source.levelv = 3.5  Sets the source level to 3.5 V for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":52,"title":"slot[Z].psu[X].source.limiti","url":"107238.htm","text":"This attribute configures the source current limit.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  value = slot[Z].psu[X].source.limiti  slot[Z].psu[X].source.limiti = value  value  Z  Module slot number  X  Module channel number  Details  This attribute configures the source current limit.  Example  slot[1].psu[2].source.limiti = 4.8  Sets source current limit of channel 2 of the module installed in slot 1 to 4.8 A.  Also see  None  "},{"id":53,"title":"slot[Z].psu[X].source.offmode","url":"115934.htm","text":"This attribute sets the source output-off mode.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Module reset<br>Instrument reset<br>Recall setup  Saved setup  0  Usage  sourceOffMode = slot[Z].psu[X].source.offmode  slot[Z].psu[X].source.offmode = sourceOffMode  sourceOffMode  slot[Z].psu.OFF or 0  slot[Z].psu.ON or 1  Z  Module slot number  X  Module channel number  Details  Reading this attribute returns the output-off mode of the source. Setting this attribute configures the output-off mode.  The default sourceOffMode is OUTPUT_NORMAL. In this mode, the source function is configured according to the slot[Z].psu[X].source.offfunc attribute. This attribute controls whether the module is configured as a 0 V voltage source or a 0 A current source.  Example  slot[1]psu[1]source.offmode = slot[Z].psu[X].OUTPUT_HIGH_Z  Sets the output&#8209;off mode for channel 1 of the module installed in slot 1 to open the output relay when the output is turned off.  Also see  "},{"id":54,"title":"slot[Z].psu[X].source.output","url":"107239.htm","text":"This attribute enables or disables the source output.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  OFF or 0  Usage  value = slot[Z].psu[X].source.output  slot[Z].psu[X].source.output = value  value  slot[Z].psu.OFF or 0  slot[Z].psu.ON or 1  Z  Module slot number  X  Module channel number  Details  This setting enables or disables the source output.  Example  slot[1].psu[2].source.output = slot[1].psu.ON  Turns on the output for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":55,"title":"slot[Z].psu[X].source.protect.enablei","url":"109662.htm","text":"This attribute enables or disables the overcurrent protection function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Not applicable  See Details  ENABLE  Usage  protectEnabled = slot[Z].psu[X].source.protect.enablei  slot.[Z].psu[X].source.protect.enablei = protectEnabled  protectEnabled  slot[Z].psu[X].DISABLE  slot[Z].psu[X].ENABLE  Z  Module slot number  X  Module channel number  Details  This attribute enables or disables the output overcurrent protection function. When disabled, the overcurrent protection circuit will not turn off the power supply output when the output current exceeds the protection level attribute.  Example  slot[1].psu[2].source.protect.enablei = slot[1].psu[2].DISABLE  Disables overcurrent protection for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].source.protect.enablev  slot[Z].psu[X].source.protect.leveli  slot[Z].psu[X].source.protect.levelv  slot[Z].psu[X].source.protect.trippedi  slot[Z].psu[X].source.protect.trippedv  "},{"id":56,"title":"slot[Z].psu[X].source.protect.enablev","url":"109663.htm","text":"This attribute enables or disables the overvoltage protection function.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  reset()  ENABLE  Usage  protectEnabled = slot[Z].psu[X].source.protect.enablev  slot[Z].psu[X].source.protect.enablev = protectEnabled  protectEnabled  slot[Z].psu[X].DISABLE  slot[Z].psu[X].ENABLE  Z  Module slot number  X  Module channel number  Details  This attribute enables or disables the output overvoltage protection function. When disabled, the overvoltage protection circuit will not turn off the power supply output when the output voltage exceeds the protection level attribute.  This attribute is only available on Rev. D or newer hardware. Overvoltage protection on Rev. C and earlier hardware is always enabled and cannot be disabled.  Example  slot[1].psu[2].source.protect.enablev = slot[1].psu[2].DISABLE  Disables overvoltage protection for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].source.protect.enablei  slot[Z].psu[X].source.protect.leveli  slot[Z].psu[X].source.protect.levelv  slot[Z].psu[X].source.protect.trippedi  slot[Z].psu[X].source.protect.trippedv  "},{"id":57,"title":"slot[Z].psu[X].source.protect.leveli","url":"107628.htm","text":"This attribute configures the overcurrent protection level.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  5.5 A  Usage  protectLevel = slot[Z].psu[X].source.protect.leveli  slot[Z].psu[X].source.protect.leveli = protectLevel  protectLevel  Voltage: 0.25 A to ± 5.5 A  Z  Module slot number  X  Module channel number  Details  This attribute configures the output overcurrent protection level. If the output current rises above this level, the power supply turns the output off.  Example  slot[1].psu[2].source.protect.leveli = 1.0  Sets the output overcurrent protection level to 1.0 A for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].source.protect.levelv  slot[Z].psu[X].source.protect.trippedi  slot[Z].psu[X].source.protect.trippedv  "},{"id":58,"title":"slot[Z].psu[X].source.protect.levelv","url":"107833.htm","text":"This attribute configures the overvoltage protection level.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  55.0 V  Usage  protectLevel = slot[Z].psu[X].source.protect.levelv  slot[Z].psu[X].source.protect.levelv = protectLevel  protectLevel  Voltage: 2.5 V to ± 55 V  Z  Module slot number  X  Module channel number  Details  This attribute configures the output overvoltage protection level. If the voltage on the output terminals goes above this level, the power supply automatically turns off the output.  Example  slot[1].psu[2].source.protect.levelv = 10.0  Sets the output overvoltage protection level to 10.0 V for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].source.protect.leveli  slot[Z].psu[X].source.protect.trippedi  slot[Z].psu[X].source.protect.trippedv  "},{"id":59,"title":"slot[Z].psu[X].source.protect.trippedi","url":"107828.htm","text":"This attribute indicates if the overcurrent protection circuit was tripped.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Power supply reset  Not applicable  Not applicable  Usage  tripped = slot[Z].psu[X].source.protect.trippedi  tripped  The overcurrent protection status:  The overcurrent protection circuit was tripped: True  The protect circuit is not tripped: False  Z  Module slot number  X  Module channel number  Details  This attribute indicates if the overcurrent protection circuit was actuated. When the overcurrent protection circuit is activated, the output is turned off.  The status is reset to false when the output is turned on.  Example  print(slot[1].psu[2].source.protect.trippedi)  Determines if the overcurrent protection circuit was activated for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].source.protect.leveli  slot[Z].psu[X].source.protect.levelv  slot[Z].psu[X].source.protect.trippedv  "},{"id":60,"title":"slot[Z].psu[X].source.protect.trippedv","url":"107829.htm","text":"This attribute indicates if the overvoltage protection circuit was tripped.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Instrument reset<br>Power supply reset  Not applicable  Not applicable  Usage  tripped = slot[Z].psu[X].source.protect.trippedV  tripped  The overvoltage protection status:  The overvoltage protection circuit was tripped: True  The protect circuit is not tripped: False  Z  Module slot number  X  Module channel number  Details  This attribute indicates if the overvoltage protection circuit was actuated. When the overvoltage protection circuit is activated, the output is turned off.  The status is reset to false when the output is turned on.  Example  print(slot[1].psu[2].source.protect.trippedv)  Determines if the overvoltage protection circuit was activated for channel 2 of the module installed in slot 1.  Also see  slot[Z].psu[X].source.protect.leveli  slot[Z].psu[X].source.protect.levelv  slot[Z].psu[X].source.protect.trippedi  "},{"id":61,"title":"slot[Z].psu[X].source.rangev","url":"107240.htm","text":"This attribute contains the value of the source range for voltage.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Usage  value = slot[Z].psu[X].source.rangev  value  Voltage range: 50 V  Z  Module slot number  X  Module channel number  Details  This setting contains the fixed range setting for the voltage source. The range parameter can be any valid source range value for the instrument and the best source range for that level will be used.  Example  slot[1].psu[2].source.rangev = 20  range = slot[1].psu[2].source.rangev  Sets source range to 50 V given a value of 20 V for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":62,"title":"slot[Z].psu[X].source.slewratev","url":"116988.htm","text":"This attribute configures the voltage source slew rate.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (RW)  Yes  Never  Nonvolatile memory  10 kV/s  Usage  value = slot[Z].psu[X].source.slewratev  slot[Z].psu[X].source.slewratev = value  value  Volts per second: 1 V/s to 10 kV/s  Z  Module slot number  X  Module channel number  Details  This attribute configures the slew rate of the voltage source in volts per second. The slew rate can be set to any value between 1 V/s and 10 kV/s.  Example  slot[1].psu[2].source.slewratev = 5.0  The voltage source slew rate will be set to 5.0 V/s for channel 2 of the module installed in slot 1.  Also see  None  "},{"id":63,"title":"slot[Z].psu[X].trigger.measure.Y()","url":"115818.htm","text":"This function configures the reading buffer and measure type for the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].trigger.measure.Y(ReadingBuffer)  slot[Z].psu[X].trigger.measure.iv(ibuffer, vbuffer)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  Power: p  Current and voltage: iv  Resistance:  r  ReadingBuffer  Buffer to store the measurement result  ibuffer  Buffer to store current readings  vbuffer  Buffer to store voltage readings  Details  This command configures the reading buffer and measure type for the trigger model. Any measurements made in the trigger model will be stored in this reading buffer according to the specified measurement type.  Example  PsuCh1 = slot[1].psu[1]  --- Configure PSU Ch1 to measure voltage and save the result in the reading buffer.  ReadingBuffer = PsuCh1.makebuffer(10)  PsuCh1.trigger.measure.v(ReadingBuffer)  --- Set the initial voltage output for PSU Ch1 to 2V  PsuCh1.source.levelv = 2  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Make the voltage measurement 10 times ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.measure(\"TM1\", \"MeasureVoltage\", 1, 10)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")  -- Now printbuffer the 10 measurements.  printbuffer(1, ReadingBuffer.n, ReadingBuffer)  A reading buffer is configured for voltage measurements and a measure block captures measurements for the module installed in slot 1.  Also see  slot[Z].trigger.model.addblock.measure()  "},{"id":64,"title":"slot[Z].psu[X].trigger.source.linearY()","url":"116450.htm","text":"This function configures the linear sweep for the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].trigger.source.linearY(StartY, EndY, Points)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  StartY  Start source level  EndY  End source level  Points  Number of points used to calculate the step size  Details  This command sets up a linear sweep by configuring the start source level, end source level, and the number of steps to increase or decrease from the starting source level to the ending source level.  The points parameter does not set the number of steps in a sweep. Instead, it is used to calculate source values within a subsequent sweep. If the subsequent sweep has more points than specified in points, the source restarts at the beginning. This means that if the number of times that the source.action.step block is executed is greater than the number of points in a sweep as configured, the instrument satisfies the block execution count by restarting the sweep values from the beginning.  If the subsequent sweep has fewer points than specified in points, endY is not reached during the sweep. This means that if the block execution count is less than the number of source values configured, the instrument satisfies the block execution count and ignores the remaining source values.  In cases where the first sweep point is a nonzero value, it may be necessary to pre-charge the circuit so that the sweep returns a stable value for the first measured point without penalizing remaining points in the sweep.  When you use a linear staircase sweep, the voltage or current source increases or decreases in fixed steps. Each point is equally-spaced between the start and stop.  Example  PsuCh1 = slot[1].psu[1]  --- Set the linear sweep starting at 0 V rising to 5 V over 6 steps  ---  PsuCh1.trigger.source.linearv(0,5,6)  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Loop 6 times stepping the voltage from 0 V to 5 V for 6 steps in 1 V increments as specified in the psuCh1.trigger.source.linearv specification above. Branch to \"SourceActionStep\" ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.source.action.step(\"TM1\", \"SourceActionStep\", 1, 0)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay5ms\", 0.005)  slot[1].trigger.model.addblock.branch.counter(\"TM1\", \"BranchCounter\", \"SourceActionStep\", 6)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")  This example sets up a linear sweep with source level beginning, end, and number of steps.  Also see  slot[Z].trigger.model.addblock.source.action.bias()  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.action.step()  "},{"id":65,"title":"slot[Z].psu[X].trigger.source.listY()","url":"115833.htm","text":"This function configures the list sweep for the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].trigger.source.listY(SourceLevels)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  SourceLevels  List of source levels. Each time a source block is reached, the index increases by 1. When it reaches the end, it cycles back to the beginning.  For example, ({1, 2, 3})  Details  This command sets up a list sweep by configuring the source type and the source levels list.  In a list staircase sweep, the voltage or current increases by one step when the source block is reached. Once the index reaches the end of the list, it loops back to the beginning.  Example  PsuCh1 = slot[1].psu[1]  --- Set the list sweep starting at 1V and iterate the list ---  PsuCh1[X].trigger.source.listY({1,2,3})  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Loop 4 times stepping the voltage from 1 V to 3 V and stepping back to  1V the fourth time. ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.source.action.step(\"TM1\", \"SourceActionStep\", 1, 0)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay5ms\", 0.005)  slot[1].trigger.model.addblock.branch.counter(\"TM1\", \"BranchCounter\", \"SourceActionStep\", 4)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\").trigger.source.listY({1,2,3})  This example uses the slot[Z].psu[X].trigger.source.listY() to set the sweep source levels, and the list is iterated. The measurement loop is then initiated and the trigger model is executed.  Also see  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.action.step  "},{"id":66,"title":"slot[Z].psu[X].trigger.source.logY()","url":"115834.htm","text":"This function configures a logarithmic sweep for the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].psu[X].trigger.source.logY(StartY, EndY, Points)  Z  Module slot number  X  Module channel number  Y  Function:  Voltage: v  Current: i  StartY  Start source level  EndY  End source level  Points  Number of points used to calculate the step size  Details  This command sets up a logarithmic sweep by configuring the start source level, end source level, and the number of steps to increase or decrease from the starting source level to the ending source level.  The points parameter does not set the number of steps in a sweep. Instead, it is used to calculate source values within a subsequent sweep. If the subsequent sweep has more points than specified in points, the source restarts at the beginning. This means that if the number of times the source.action.step block is visited is greater than the number of points in a sweep as configured, the instrument satisfies the block execution count by restarting the sweep values from the beginning.  If the subsequent sweep has fewer points than specified in points, endY is not reached during the sweep. This means that if the block execution count is less than the number of source values configured, the instrument satisfies the block execution count and ignores the remaining source values.  In cases where the first sweep point is a nonzero value, it may be necessary to pre-charge the circuit so that the sweep returns a stable value for the first measured point without penalizing remaining points in the sweep.  A logarithmic staircase sweep is similar to a linear staircase sweep. In a logarithmic sweep, however, the steps are scaled logarithmically.  Example  PsuCh1 = slot[1].psu[1]  --- Set the logarithmic sweep starting at 0V rising to 5V over 6 steps  ---  slot[1].psu[1].trigger.source.logy(0,5,6)  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Loop for 6 times stepping the voltage from 0V to 5V for 6 steps as specified in the PsuCh1.trigger.logy specification above. Branch to \"SourceActionStep\" ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.source.action.step(\"TM1\", \"SourceActionStep\", 1, 0)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay5ms\", 0.005)  slot[1].trigger.model.addblock.branch.counter(\"TM1\", \"BranchCounter\", \"SourceActionStep\", 6)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")[1].trigger.source.logv(0,5,6)  This example sets up a logarithmic sweep with source level beginning, end, and number of steps.  Also see  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.action.step()  "},{"id":67,"title":"slot[Z].serialno","url":"107214.htm","text":"This attribute stores the serial number of the module in the specified mainframe slot.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Not applicable  Not applicable  Not applicable  Usage  serialno = slot[Z].serialno  serialno  The serial number of the module  Z  Module slot number  Details  This attribute stores the serial number of the module installed in the specified slot.  Example  slot[1].serialno  Returns the serial number of the module installed in slot 1.  Also see  None  "},{"id":68,"title":"slot[Z].trigger.model.abort()","url":"114956.htm","text":"This function stops trigger model execution on the specified module.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.abort(\"triggerModelName\")  Z  Module slot number  triggerModelName  Name of the trigger model to abort  Details  This function stops the running trigger model on the specified module.  Example  slot[1].trigger.model.abort(\"TM1\")  Stops the TM1 trigger model running in the module located in slot 1.  Also see  slot[Z].trigger.model.initiate()  "},{"id":69,"title":"slot[Z].trigger.model.addblock.branch.always()","url":"116478.htm","text":"This function defines a trigger model block that always branches to a specific block.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.always(\"triggerModelName\", \"blockName\", \"branchToBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  branchToBlockName  Name of the next trigger block to run  Details  When a trigger model reaches a branch-always trigger block, it goes to the block specified by branchToBlockName.  Example  SLOT = 1  slot[SLOT].psu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"branchalways1\")  slot[SLOT].trigger.model.addblock.source.output(\"branchalways1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"branchalways1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"branchalways1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.addblock.delay.constant(\"branchalways1\", \"delay4\", 0.1)  slot[SLOT].trigger.model.addblock.branch.always(\"branchalways1\", \"branchalways5\", \"sourceoutput1\")  slot[SLOT].trigger.model.print(\"branchalways1\")  slot[1].trigger.model.initiate(\"branchalways1\")  -- Please wait some time to let pulses show up on the channel output  slot[1].trigger.model.abort(\"branchalways1\")  In this example, the  trigger model turns on and turns off a 2 V signal with a pulse width of 5 ms. The trigger model runs infinitely on channel 1 of the module installed in slot 3. Note the assignment of the SLOT variable; change according to your configuration.  <br>You can use the slot[Z].trigger.model.abort() command to end the loop.  Also see  slot[Z].trigger.model.abort()  slot[Z].trigger.model.addblock.nop()  slot[Z].trigger.model.initiate()  "},{"id":70,"title":"slot[Z].trigger.model.addblock.branch.counter()","url":"116483.htm","text":"This function defines a trigger model block that branches to a block a specified number of times.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.counter(\"triggerModelName\", \"blockName\", \"branchToBlockName\", targetCount)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  branchToBlockName  Name of the next block to run  targetCount  Number of times to repeat the branch  Details  This command defines a trigger model block that branches to another block a specified number of times.  The counter resets to 0 when the trigger model starts, and it it is incremented each time the trigger model reaches the counter block. After incrementing the counter, if the counter is less than or equal to targetCount, the trigger model will go to the branchToBlockName block. Otherwise it will go to the next block in the sequence.  If you are using remote commands, you can query the counter. The counter is incremented immediately before the branch compares the actual counter value to the set counter value. Therefore, the counter is at 0 until the first comparison. When the trigger model reaches the set counter value, branching stops and the counter value is one greater than the setting.If the branch is not taken, the counter resets to 0.  Example  SLOT = 1  STEPS = 10  ALIAS = slot[SLOT].trigger  slot[SLOT].psu[1].trigger.source.linearv(0,5,STEPS)   ALIAS.model.create(\"branchcounter1\")  ALIAS.model.addblock.source.output(\"branchcounter1\", \"sourceoutput1\", 1, 1)  ALIAS.model.addblock.delay.constant(\"branchcounter1\", \"delay2\", 0.1)  ALIAS.model.addblock.source.action(\"branchcounter1\", \"sourceaction3\", 1, 0)  ALIAS.model.addblock.branch.counter(\"branchcounter1\", \"branchcounter4\", \"delay2\", STEPS*4)  slot[SLOT].trigger.model.print(\"branchcounter1\")  slot[SLOT].trigger.model.initiate(\"branchcounter1\")  This example demonstrates a trigger model that uses branch-counter to linear sweep the output of channel1 four times. Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":71,"title":"slot[Z].trigger.model.addblock.branch.event()","url":"116494.htm","text":"This function causes the trigger model to branch to a specified trigger model block when a specified event occurs.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.event(\"triggerModelName\", \"blockName\", \"branchToBlockName\", eventId)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  branchToBlockName  Name of the block to branch to on true condition  eventId  The event that must occur before the trigger model branches to the specified block; for example, trigger.EVENT_NOTIFY4  Details  The branch.event block goes to a specified trigger model block after a specified trigger event occurs. If the trigger event has not yet occurred when the trigger model reaches the branch.event block, the trigger model continues to execute the blocks in the normal sequence. After the trigger event occurs, the trigger model proceeds to the specified trigger model block when the branch.event block is encountered.  After an event occurs and the branch.event block executes, the branch is taken and the event detector is cleared. The trigger event must occur again for the trigger model to execute to the block again; otherwise, the blocks are executed in the normal sequence.  If you set the branch event to none, an error is generated when you run the trigger model.  The following table shows the constants for the events.  Event description  Event constant  Notify trigger block N (1 to 16) generates a trigger event when the trigger model executes  trigger.EVENT_NOTIFYN  Example  # Branch Event. #  SLOT = 1  slot[SLOT].psu[1].source.levelv = 5.0  slot[SLOT].trigger.model.delete(\"branchonevent2\")  slot[SLOT].trigger.model.create(\"branchonevent2\")  slot[SLOT].trigger.model.addblock.source.output(\"branchonevent2\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"branchonevent2\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.branch.event(\"branchonevent2\", \"branchonevent3\", \"TheEnd\", slot[SLOT].trigger.model.EVENT_NOTIFY1)  slot[SLOT].trigger.model.addblock.branch.counter(\"branchonevent2\", \"branchcounter4\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.source.output(\"branchonevent2\", \"sourceoutput5\", 1, 0)  slot[SLOT].trigger.model.addblock.notify(\"branchonevent2\", \"notify6\", slot[SLOT].trigger.model.EVENT_NOTIFY1)  slot[SLOT].trigger.model.addblock.branch.counter(\"branchonevent2\", \"branchcounter7\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.source.output(\"branchonevent2\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"branchonevent2\")  slot[SLOT].trigger.model.initiate(\"branchonevent2\")  This example demonstrates a trigger model that uses branch.event to differentiate two loops. The first loop lacks EVENT_NOTIFY1, so its pulse is 300 ms. The second loop occurs after EVENT_NOTIFY1, so its pulse is 100 ms long. The trigger model then stops.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":72,"title":"slot[Z].trigger.model.addblock.branch.once()","url":"114964.htm","text":"This function causes the trigger model to branch to a specified trigger model block the first time it is encountered in the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.once(\"triggerModelName\", \"blockName\", \"branchToBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  branchToBlockName  Name of the block to branch to on the first pass through this block  Details  The branch.once trigger model block branches to a specified block the first time it is encountered by the trigger model. If the block is encountered again, it is ignored, and the trigger model proceeds to the next trigger model block.  The branch.once block is reset when the trigger model execution completes.  The branch.once block is reset as part of the setup for starting execution of the trigger model. When the trigger model execution completes, the internal, hidden, code has the internal counter set to state that the branch.once block has been activated.  Example  SLOT = 1  slot[SLOT].trigger.model.create(\"branchonce1\")  slot[SLOT].trigger.model.addblock.source.output(\"branchonce1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.logevent(\"branchonce1\", \"logevent2\", slot[SLOT].trigger.model.LOG_INFO3, \"logevent2\")  slot[SLOT].trigger.model.addblock.branch.once(\"branchonce1\", \"branchonce3\", \"sourceoutput1\")  slot[SLOT].trigger.model.addblock.logevent(\"branchonce1\", \"logevent4\", slot[SLOT].trigger.model.LOG_INFO2, \"Done.\")  slot[SLOT].trigger.model.print(\"branchonce1\")  slot[SLOT].trigger.model.initiate(\"branchonce1\")  errorqueue.next()  This example demonstrates a trigger model that uses branch.once to branch back one time. Log events will show the behavior.<br>Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].trigger.model.addblock.branch.onceexcluded()  "},{"id":73,"title":"slot[Z].trigger.model.addblock.branch.onceexcluded()","url":"114965.htm","text":"This function causes the trigger model to branch to a specified trigger model block every time it is encountered in the trigger model except for the first time.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.branch.onceexcluded(\"triggerModelName\", \"blockName\", \"branchToBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  branchToBlockName  Name of the block to branch to on the first pass through this block  Details  The branch.onceexcluded block is ignored the first time it is encountered by the trigger model. After the first encounter, the trigger model always branches to the specified block.  The branch.onceexcluded block is reset as part of the setup for starting execution of the trigger model. When the trigger model execution completes, the internal, hidden, code has the internal counter set to state that the branch.onceexcluded block has been activated.  Example  SLOT= 1  slot[SLOT].trigger.model.create(\"branchonceexcluded1\")  slot[SLOT].trigger.model.addblock.source.output(\"branchonceexcluded1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.logevent(\"branchonceexcluded1\", \"logevent2\", slot[SLOT].trigger.model.LOG_INFO3, \"Visiting branch.onceexcluded.\")  slot[SLOT].trigger.model.addblock.delay.constant(\"branchonceexcluded1\", \"delay3\", 1)  slot[SLOT].trigger.model.addblock.branch.onceexcluded(\"branchonceexcluded1\", \"branchonceexcluded4\", \"sourceoutput1\")  slot[SLOT].trigger.model.addblock.logevent(\"branchonceexcluded1\", \"logevent5\", slot[SLOT].trigger.model.LOG_INFO2, \"Return because of branch counter.\")  slot[SLOT].trigger.model.addblock.branch.counter(\"branchonceexcluded1\", \"branchcounter6\", \"sourceoutput1\", 4  slot[SLOT].trigger.model.print(\"branchonceexcluded1\")  slot[SLOT].trigger.model.initiate(\"branchonceexcluded1\")  slot[SLOT].trigger.model.abort(\"branchonceexcluded1\")  This example demonstrates a trigger model that uses branch.onceexcluded to branch back many times, excluding the first visit. Log-events will show the behavior. Please note the need for the call to slot[1].trigger.model.abort().  Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].trigger.model.addblock.branch.once()  "},{"id":74,"title":"slot[Z].trigger.model.addblock.configlist.next()","url":"116507.htm","text":"This function recalls the settings at the next index of a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.configlist.next(\"triggerModelName\", \"blockName\", channel, \"configlistName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  channel  Module channel number  configlistName  A string that defines the configuration list to recall  Details  When trigger model execution reaches a configuration recall next block, the settings at the next index in the specified configuration list are restored.  The first time the trigger model encounters this block for a specific configuration list, the first index is recalled if the list has not already had an index recalled by the recall block command in an earlier trigger-model block. If the configuration list has recalled an index with the recall block, the next index in the list is recalled instead of the first. For example, the recall block recalls index 1 by default, so if the trigger model uses a recall block before this one, the first time the next block is reached after that recall, index 2 is recalled. Each subsequent time this block is encountered, the settings at the next index in the configuration list are recalled and take effect before the next step executes. When the last index in the list is reached, it returns to the first index.  The configuration lists must be defined before you can use this block.  Example  SLOT = 1  -- Create and store a 3 config Config List.  LOOPS = 3 * 2  slot[SLOT].psu[1].source.levelv = 0.0  slot[SLOT].psu[1].configlist.create(\"MyConfigList\")  slot[SLOT].psu[1].source.levelv = 1.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList\")  slot[SLOT].psu[1].source.levelv = 2.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList\")  slot[SLOT].psu[1].source.levelv = 3.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList\")  slot[SLOT].trigger.model.delete(\"configlistnext1\")  slot[SLOT].trigger.model.create(\"configlistnext1\")  slot[SLOT].trigger.model.addblock.source.output(\"configlistnext1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.configlist.recall(\"configlistnext1\", \"configlistrecall2\", 1, \"MyConfigList\", 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"configlistnext1\", \"delay3\", 0.1)  slot[SLOT].trigger.model.addblock.configlist.next(\"configlistnext1\", \"configlistnext4\", 1, \"MyConfigList\")  slot[SLOT].trigger.model.addblock.branch.counter(\"configlistnext1\", \"branchcounter5\", \"delay3\", LOOPS)  slot[SLOT].trigger.model.addblock.source.output(\"configlistnext1\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"configlistnext1\")  slot[SLOT].trigger.model.initiate(\"configlistnext1\")  This example demonstrates a trigger model that uses configlistnext to step the output through 3 states. As the number of loops is 6, there should be 6 output transitions.  Note the assignment of the SLOT variable and change it accordingly.  Also see  Configuration lists   "},{"id":75,"title":"slot[Z].trigger.model.addblock.configlist.prev()","url":"116519.htm","text":"This function defines a trigger-model block that recalls the settings stored at the previous index in a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.configlist.prev(\"triggerModelName\", \"blockName\", channel, \"configlistName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  channel  Module channel number  configlistName  A string that defines the configuration list to recall  Details  The configlist.prev block defines a trigger-model block that recalls the settings stored at the previous index in a configuration list if a single configuration list is specified.  The configuration list previous index trigger block type recalls the previous index in a configuration list. It configures the settings of the instrument based on the settings at that index. The trigger model executes the settings at that index before the next block is executed.  The first time the trigger model encounters this block, the last index in the configuration list is recalled if the list has not already had an index recalled by the recall block command in an earlier trigger-model block. If the configuration list has recalled an index with the recall block, the previous index in the list is called instead of the last. For example, the recall block recalls index 1 by default, so if the trigger model uses a recall block before this one, the first time the previous block is reached after that recall, the last index is recalled. However, if the recall block recalled index 3, the previous block would recall index 2. Each subsequent time trigger model execution reaches a configuration list previous block for this configuration list, it goes backward one index. When the first index in the list is reached, it goes to the last index in the configuration list.  The configuration lists must be defined before you can use this block.  Example  SLOT = 1  -- Create and store a 3 config Config List.  LOOPS = 3 * 2  slot[SLOT].psu[1].source.levelv = 0.0  slot[SLOT].psu[1].configlist.create(\"MyConfigList2\")  -- NOTE:  This will be identical to \"MyConfigList\" in the previous example.  slot[SLOT].psu[1].source.levelv = 1.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList2\")  slot[SLOT].psu[1].source.levelv = 2.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList2\")  slot[SLOT].psu[1].source.levelv = 3.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList2\")  slot[SLOT].trigger.model.delete(\"configlistprev1\")  slot[SLOT].trigger.model.create(\"configlistprev1\")  slot[SLOT].trigger.model.addblock.source.output(\"configlistprev1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.configlist.recall(\"configlistprev1\", \"configlistrecall2\", 1, \"MyConfigList2\", 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"configlistprev1\", \"delay3\", 0.1)  slot[SLOT].trigger.model.addblock.configlist.prev(\"configlistprev1\", \"configlistprev4\", 1, \"MyConfigList2\")  slot[SLOT].trigger.model.addblock.branch.counter(\"configlistprev1\", \"branchcounter5\", \"delay3\", LOOPS)  slot[SLOT].trigger.model.addblock.source.output(\"configlistprev1\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"configlistprev1\")  slot[SLOT].trigger.model.initiate(\"configlistprev1\")  This example demonstrates a trigger model that uses configlist.prev to step the output backwards through three states. As the number of loops is six, there should be six output transitions.  Note the assignment of the SLOT variable and change it accordingly.  Also see  Configuration lists   "},{"id":76,"title":"slot[Z].trigger.model.addblock.configlist.recall()","url":"116618.htm","text":"This function recalls the system settings that are stored in a configuration list.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.configlist.recall(\"triggerModelName\", \"blockName\", channel, \"configlistName\", index)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  channel  Module channel number  configlistName  A string that defines the configuration list to recall  index  The index in the configuration list to recall; default is 1  Details  When the trigger model reaches a configuration recall block, the settings in the specified configuration list are recalled.  You can restore a specific set of configuration settings in the configuration list by defining the index.  The configuration lists must be defined before you can use this block. If one of the indexes for the configuration list changes, verify that the trigger model count is still accurate.  Example  SLOT = 1  -- Create and store a 3 config Config List.  LOOPS = 3 * 2  slot[SLOT].psu[1].source.levelv = 0.0  slot[SLOT].psu[1].configlist.create(\"MyConfigList3\")  -- NOTE:  This will be identical to \"MyConfigList2\" in the previous example.  slot[SLOT].psu[1].source.levelv = 1.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList3\")  slot[SLOT].psu[1].source.levelv = 2.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList3\")  slot[SLOT].psu[1].source.levelv = 3.0  slot[SLOT].psu[1].configlist.store(\"MyConfigList3\")  slot[SLOT].trigger.model.delete(\"configlistrecall1\")  slot[SLOT].trigger.model.create(\"configlistrecall1\")  slot[SLOT].trigger.model.addblock.source.output(\"configlistrecall1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.configlist.recall(\"configlistrecall1\", \"configlistrecall2\", 1, \"MyConfigList3\", 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"configlistrecall1\", \"delay3\", 0.1)  slot[SLOT].trigger.model.addblock.configlist.next(\"configlistrecall1\", \"configlistprev4\", 1, \"MyConfigList3\")  slot[SLOT].trigger.model.addblock.branch.counter(\"configlistrecall1\", \"branchcounter5\", \"delay3\", LOOPS)  slot[SLOT].trigger.model.addblock.source.output(\"configlistrecall1\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"configlistrecall1\")  slot[SLOT].trigger.model.initiate(\"configlistrecall1\")  This example demonstrates a trigger model that uses configlistrecall to start the stepping of the output through 3 states. As the number of loops loops is 6, there should be 6 output transitions.  Note the assignment of the SLOT variable and change it accordingly.  Also see  Configuration lists   "},{"id":77,"title":"slot[Z].trigger.model.addblock.delay.constant()","url":"116622.htm","text":"This function adds a constant delay to the execution of a trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.delay.constant(\"triggerModelName\", \"blockName\", delayTime)  slot[Z].trigger.model.addblock.delay.constant(\"triggerModelName\", \"blockName\", delayTime, \"referenceBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block where execution will proceed when the evaluation result is true  delayTime  Time delay as a positive value, from 1 μs to 1,000,000 s.  referenceBlockName  Name of a block having the time of its last trigger model visit being used as the start time of the delay.  Details  When the trigger model reaches a delay constant block it will pause for the specified time. If a reference block is specified, the trigger model will pause for the time delay since the start of the reference block.  Up to 32 different blocks can be used as reference blocks within a trigger model.  If a reference block was not visited before this block, the entry time of the trigger model will be used instead.  Example  SLOT = 1  slot[SLOT].psu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"delayconstant1\")  slot[SLOT].trigger.model.addblock.source.output(\"delayconstant1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"delayconstant1\", \"delay2\", 0.01)  slot[SLOT].trigger.model.addblock.source.output(\"delayconstant1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.addblock.delay.constant(\"delayconstant1\", \"delay4\", 0.01)  slot[SLOT].trigger.model.addblock.source.output(\"delayconstant1\", \"sourceoutput5\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"delayconstant1\", \"delay6\", 0.05, \"delay2\")    -- NOTE:  This pulse high will NOT be 50 milliseconds, because of the reference to \"delay2\".  slot[SLOT].trigger.model.addblock.source.output(\"delayconstant1\", \"sourceoutput7\", 1, 0)  slot[SLOT].trigger.model.print(\"delayconstant1\")  slot[SLOT].trigger.model.initiate(\"delayconstant1\")  This example demonstrates a trigger model that uses delay.constant to define a pair of 1.0 volt pulses. The first pulse is 10 ms wide. The second pulse is 30 ms wide because the use of a reference block in the delay.constant will overlap some timing with the first pulse. The second pulse is accurately timed from a specific, much earlier, block.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":78,"title":"slot[Z].trigger.model.addblock.logevent()","url":"115503.htm","text":"This function allows you to log an event in the event log when the trigger model is running.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.logevent(\"triggerModelName\", \"blockName\", eventNumber, \"message\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  eventNumber  The event number:  trigger.LOG_INFON  trigger.LOG_WARNN  trigger.LOG_ERRORN  Where N is 1 to 4; you can define up to four of each type  You can also set trigger.LOG_WARN_ABORT, which aborts the trigger model immediately and posts a warning event log message  message  A string up to 31 characters  Details  This block allows you to log an event in the event log when trigger model execution reaches this block. You can also force the trigger model to abort with this block. When the trigger model executes the block, the defined event is logged. If the abort option is selected, the trigger model is also aborted immediately.  You can define the type of event (information, warning, abort model, or error). All events generated by this block are logged in the event log. Warning and error events are also displayed in a popup on the front&#8209;panel display.  Note that using this block too often in a trigger model could overflow the event log. It may also take away from the time needed to process more critical trigger model blocks.  Example  SLOT = 1  slot[SLOT].trigger.model.create(\"logevent1\")  slot[SLOT].trigger.model.addblock.source.output(\"logevent1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.logevent(\"logevent1\", \"logevent2\", slot[SLOT].trigger.model.LOG_INFO3, \"ran logevent2 block\")  slot[SLOT].trigger.model.addblock.branch.counter(\"logevent1\", \"branchcounter3\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.logevent(\"logevent1\", \"logevent4\", slot[SLOT].trigger.model.LOG_INFO2, \"Done.\")  slot[SLOT].trigger.model.print(\"logevent1\")  slot[SLOT].trigger.model.initiate(\"logevent1\")  errorqueue.next()  This example demonstrates a trigger model that uses log events to show behavior. The 'ran logeven2 block' should report 3 times and then 'Done'. reported once.   Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":79,"title":"slot[Z].trigger.model.addblock.measure()","url":"116627.htm","text":"This function defines a trigger block that makes a measurement.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.measure(\"triggerModelName\", \"blockName\", channel)  slot[Z].trigger.model.addblock.measure(\"triggerModelName\", \"blockName\", channel, count)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  channel  Channel list, specified in a table. For example, <br>{channel1[[, channel2]...]}  count  Number of measurements to make when this block is executed  Details  This block triggers measurements based on the measure function that is selected when the trigger model is initiated. When trigger model execution reaches this block:  The instrument begins making measurements  The trigger execution waits for the measurement to be made  If more than one channel is specified, the measure count for each channel must be the same unless a count value is also specified.  If count is specified, this will override the measure count configured for the channels with slot[Z].psu[X].measure.count().  Example  # Measure. #  SLOT = 1  MEASURES = 2 ; PHASES = 2  rb1 = slot[SLOT].psu[1].makebuffer(MEASURES * PHASES)  slot[SLOT].psu[1].trigger.measure.v(rb1)  slot[SLOT].psu[1].source.levelv = 2.0  slot[SLOT].trigger.model.create(\"measure1\")  slot[SLOT].trigger.model.addblock.source.output(\"measure1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.measure(\"measure1\", \"measure2\", 1, MEASURES)  -- Phase 1  slot[SLOT].trigger.model.addblock.source.output(\"measure1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.addblock.measure(\"measure1\", \"measure4\", 1, MEASURES)  -- Phase 2  slot[SLOT].trigger.model.print(\"measure1\")  slot[SLOT].trigger.model.initiate(\"measure1\")  printbuffer(1, rb1.n, rb1) ; rb1.clear()  This example demonstrates a trigger model that uses measure block to collect measurements. The first pair of measurements should be near 2.0 V and the second pair of measurements should be near 0.0 V. <br>Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":80,"title":"slot[Z].trigger.model.addblock.nop()","url":"116635.htm","text":"This function creates a placeholder block that performs no action in the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.nop(\"triggerModelName\", \"blockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  Details  This trigger block creates a placeholder that performs no action in the trigger model.  You can use this command to create:  A named block from which a trigger model will branch forward or backward  A named block to use as a placeholder if you remove a trigger model block, so that you do not need to renumber the other blocks  Example  SLOT = 1  slot[SLOT].psu[1].source.levelv = 3  slot[SLOT].trigger.model.create(\"nop1\")  slot[SLOT].trigger.model.addblock.source.output(\"nop1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.nop(\"nop1\", \"nop2\")  slot[SLOT].trigger.model.addblock.delay.constant(\"nop1\", \"delay3\", 0.1, \"nop2\")  -- Reference delayed from block 'nop2'.  slot[SLOT].trigger.model.addblock.branch.once(\"nop1\", \"branchonce4\", \"nop2\")  -- Branch back to block 'nop2'.  slot[SLOT].trigger.model.addblock.source.output(\"nop1\", \"sourceoutput5\", 1, 0)  slot[SLOT].trigger.model.print(\"nop1\")  slot[SLOT].trigger.model.initiate(\"nop1\")  This example demonstrates a trigger model that uses a nop block for a delay timing reference and for a branch target.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":81,"title":"slot[Z].trigger.model.addblock.notify()","url":"116639.htm","text":"This function defines a trigger model block that generates a trigger event.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.notify(\"triggerModelName\", \"blockName\", eventId)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block  eventId  slot[Z].trigger.EVENT_NOTIFYN, where N is the number of the notify event  Details  When trigger model execution reaches a notify block, the instrument generates a trigger event and immediately continues to the next block.  Other commands can reference the event that the notify block generates. For example, you can use the notify event as the stimulus of a hardware trigger line or the gating event for another trigger wait block to continue execution after waiting on the specific event generated by this notification.  Example  # Notify. #  SLOT = 1  slot[SLOT].psu[1].source.levelv = 5.0  slot[SLOT].trigger.model.delete(\"notify1\")  slot[SLOT].trigger.model.create(\"notify1\")  slot[SLOT].trigger.model.addblock.source.output(\"notify1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"notify1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.branch.event(\"notify1\", \"branchonevent3\", \"TheEnd\", slot[SLOT].trigger.model.EVENT_NOTIFY1)  slot[SLOT].trigger.model.addblock.branch.counter(\"notify1\", \"branchcounter4\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.source.output(\"notify1\", \"sourceoutput5\", 1, 0)  slot[SLOT].trigger.model.addblock.notify(\"notify1\", \"notify6\", slot[SLOT].trigger.model.EVENT_NOTIFY1)  slot[SLOT].trigger.model.addblock.branch.counter(\"notify1\", \"branchcounter7\", \"sourceoutput1\", 3)  slot[SLOT].trigger.model.addblock.source.output(\"notify1\", \"TheEnd\", 1, 0)  slot[SLOT].trigger.model.print(\"notify1\")  slot[SLOT].trigger.model.initiate(\"notify1\")  This example demonstrates a trigger model that uses notify to differentiate 2 loops. The first loop lacks the EVENT_NOTIFY1, so its pulse is 300 ms. The second loop occurs after EVENT_NOTIFY1, so its pulse is 100&nbsp;ms long and the trigger model stops.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":82,"title":"slot[Z].trigger.model.addblock.reset.branch.counter()","url":"116658.htm","text":"This function defines a trigger model block that resets the count for a branch counter block.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.reset.branch.counter()(\"triggerModelName\", \"blockName\", \"resetBranchCountBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the block to be added  resetBranchCountBlockName  Name of the branch counter block to reset the count value to 0  Details  This command defines a trigger model building block that resets the count of the branch counter block specified by resetBranchCountBlockName.  Example  SLOT = 1  slot[SLOT].psu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"resetcount1\")  slot[SLOT].trigger.model.addblock.source.output(\"resetcount1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"resetcount1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"resetcount1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.addblock.delay.constant(\"resetcount1\", \"delay4\", 0.1)  slot[SLOT].trigger.model.addblock.branch.counter(\"resetcount1\", \"branchcounter5\", \"sourceoutput1\", 2)  slot[SLOT].trigger.model.addblock.reset.branch.counter(\"resetcount1\", \"resetcount6\", \"branchcounter5\")  slot[SLOT].trigger.model.addblock.branch.counter(\"resetcount1\", \"branchcounter7\", \"sourceoutput1\", 2)  slot[SLOT].trigger.model.print(\"resetcount1\")  slot[SLOT].trigger.model.initiate(\"resetcount1\")  This example demonstrates a trigger model that uses reset-branch-counter to pulse 4 times the output of channel&nbsp;1 because of the resetting and nested branch-counters. Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].trigger.model.addblock.branch.counter()  "},{"id":83,"title":"slot[Z].trigger.model.addblock.source.action.bias()","url":"117724.htm","text":"This function changes the source output level to the present level of the sweep configuration, then advances to the next step in the sweep configuration.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.source.action.bias(\"triggerModelName\", \"blockName\", channel)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block defining where to branch  channel  Channel number  Details  This function defines a trigger model building block that advances the source output based on the setup for the specified channel.  For a stair-step returning to the initial value on each advance, set the initial output bias voltage before defining the trigger model. For example, you want to to return to 2 V on each step, set the SMU channel to start at 2 V.  Example  Also see  slot[Z].psu[X].trigger.source.linearY()  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.action.step()  "},{"id":84,"title":"slot[Z].trigger.model.addblock.source.action.skip()","url":"116643.htm","text":"This function defines a trigger-model block that executes a source action to advance a sweep operation on the specified channel.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.source.action.skip(\"triggerModelName\", \"blockName\", channel)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block defining where to branch  channel  Channel number  Details  This command defines a trigger model building block that advances the source output based on the channel setup for the specified channel.  For a stair-step operation incrementing through the sweep definition, do not include the optional StepOrBias string.  For a stair step returning to the initial value on each advance, set the initial output voltage prior to defining the trigger model to the desired bias voltage. For example, if the user wants to return to 2 V on each step, the channel should be set to start at 2 V.   Example  SLOT = 1  COUNT = 6 ; STEPMODE = 0  PSU = slot[SLOT].psu[1]  PSU.trigger.source.linearv(0, 5, COUNT)  TM = slot[SLOT].trigger.model  TM.delete(\"sourceaction1\")  TM.create(\"sourceaction1\")  TM.addblock.source.output(\"sourceaction1\", \"sourceoutput1\", 1, 1)  TM.addblock.source.action.skip(\"sourceaction1\", \"sourceaction2\", 1)  TM.addblock.delay.constant(\"sourceaction1\", \"delay3\", 0.01)  TM.addblock.branch.counter(\"sourceaction1\", \"branchcounter4\", \"sourceaction2\", 2 * COUNT)  TM.addblock.source.output(\"sourceaction1\", \"TheEnd\", 1, 0)  TM.print(\"sourceaction1\")  TM.initiate(\"sourceaction1\")  This example demonstrates a trigger model that uses source-action to create 2 linear sweeps, 0 V to 5 V over 100 ms. The branch counter is called 2 * COUNT, which causes a second sweep to occur.  Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].psu[X].trigger.source.linearY()  slot[Z].trigger.model.addblock.source.action.bias()  slot[Z].trigger.model.addblock.source.action.step()  slot[Z].trigger.model.addblock.source.output()  "},{"id":85,"title":"slot[Z].trigger.model.addblock.source.action.step()","url":"116653.htm","text":"This function changes the source output level to the present level of the sweep configuration, then advances to the next step in the sweep configuration.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.source.action.step(\"triggerModelName\", \"blockName\", channel)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block defining where to branch  channel  Channel number  Details  This command defines a trigger model building block that advances the source output based on the setup for the specified channel.  For a stair-step returning to the initial value on each advance, set the initial output bias voltage before defining the trigger model. For example, you want to to return to 2 V on each step, set the Module channel number to start at 2 V.  Example  PsuCh1 = slot[3].psu[1]  readingBuffer = slot[3].psu[1].makebuffer(15)  PsuCh1.source.limiti = 0.1  PsuCh1.measure.count =5  -- Configure PSU Ch1 to measure voltage, storing results into the reading buffer.  PsuCh1.trigger.measure.v(readingBuffer)  -- Set the initial voltage output for PSU Ch1 to 2 V with a linear sweep starting at 0&nbsp;V -- rising to 4 V over 6 steps.  PsuCh1.source.levelv = 2  PsuCh1.trigger.source.linearv(0,5,6)  -- Make sure to delete any old instance of the trigger model before creating a new <br>-- trigger model.  slot[3].trigger.model.delete(\"TM1\")  slot[3].trigger.model.create(\"TM1\")  slot[3].trigger.model.addblock.(\"TM1\")  slot[3].trigger.model.addblock.source.output(\"TM1\", \"outputOn\", 1, 1)  slot[3].trigger.model.addblock.source.action.step(\"TM1\", \"sourceActionStep\", 1)  slot[3].trigger.model.addblock.measure(\"TM1\", \"measureVoltage\", 1, 1)  slot[3].trigger.model.addblock.delay.constant(\"TM1\", \"delay5ms\", 0.005)  -- Loop for 6 times stepping the voltage from 0 V to 5 V for 6 steps in 1 V increments    -- as specified in the PsuCh1.trigger.source.linearv specification above. Branch to <br>-- \"sourceActionStep\"  slot[3].trigger.model.addblock.branch.counter(\"TM1\",\"branchCounter\", \"sourceActionStep\", 6)  slot[3].trigger.model.addblock.source.output(\"TM1\", \"outputOff\", 1, 0)  slot[3].trigger.model.initiate(\"TM1\")  Also see  slot[Z].psu[X].trigger.source.linearY()  slot[Z].trigger.model.addblock.source.action.bias()  slot[Z].trigger.model.addblock.source.action.skip()  slot[Z].trigger.model.addblock.source.output()  "},{"id":86,"title":"slot[Z].trigger.model.addblock.source.output()","url":"116648.htm","text":"This function defines a trigger model block that turns the output source on or off.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.source.output(\"triggerModelName\", \"blockName\", channel, state)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block to be added  channel  Module channel number  state  Turn the source off: psu.OFF  Turn the source on: psu.ON  Details  The source output block determines if the output source is turned on or off when the trigger model reaches this block. This block does not determine the settings of the output source, such as the output voltage level and source delay. The source settings are determined by either the current settings of the instrument or by a configuration list.  Example  # Source Output #  SLOT = 1  PSU = slot[SLOT].psu[1]  PSU.source.levelv = 4.2  TM = slot[SLOT].trigger.model  TM.delete(\"sourceoutput1\")  TM.create(\"sourceoutput1\")  TM.addblock.source.output(\"sourceoutput1\", \"sourceoutput1\", 1, 1)  TM.addblock.delay.constant(\"sourceoutput1\", \"delay2\", 0.01)  TM.addblock.source.output(\"sourceoutput1\", \"sourceoutput3\", 1, 0)  TM.addblock.delay.constant(\"sourceoutput1\", \"delay4\", 0.005)  TM.addblock.branch.counter(\"sourceoutput1\", \"branchcounter5\", \"sourceoutput1\", 10)  TM.print(\"sourceoutput1\")  TM.initiate(\"sourceoutput1\")  This example demonstrates a trigger model that uses source-output to create 10 pulses of 4.2 V and approximately 10 ms wide.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":87,"title":"slot[Z].trigger.model.addblock.wait()","url":"116657.htm","text":"This function defines a trigger model block that waits for an event before allowing the trigger model to continue.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear, logic)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear, logic, event)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear, logic, event, event)  slot[Z].trigger.model.addblock.wait(\"triggerModelName\", \"blockName\", event, clear, logic, event, event, event)  Z  Module slot number  triggerModelName  Name of the trigger model to which the block will be added  blockName  Name of the trigger block being added by this command  event  The event that must occur before the trigger block allows trigger execution to continue (see Details)  clear  To clear previously detected trigger events when entering the wait block:  trigger.CLEAR_ENTER  To immediately act on any previously detected triggers and not clear them (default):  trigger.CLEAR_NEVER  logic  If each event must occur before the trigger model continues: trigger.WAIT_AND  If at least one of the events must occur before the trigger model continues:  trigger.WAIT_OR  Details  You can use this command to synchronize measurements with other instruments and devices. You can set the instrument to wait for the following events:  Notify  Command interface trigger  Digital input/output signals, such as DIGIO and TSP-Link  The event can occur before trigger model execution reaches the wait block. If the event occurs after trigger model execution starts but before the trigger model execution reaches the wait block, the trigger model records the event.  By default, when trigger model execution reaches the wait block, it executes the wait block without waiting for the event to occur again when the clear parameter is set to never.   The instrument clears the memory of the recorded event when trigger model execution is at the start block and when the trigger model exits the wait block. It also clears the recorded trigger event when the clear parameter is set to enter.  Example  SLOT = 1  PSU1 = slot[SLOT].psu[1]  PSU2 = slot[SLOT].psu[2]  PSU1.source.levelv = 4.2 ; PSU2.source.levelv = 5.3  PSU1.source.output = 0 ; PSU2.source.output = 0  EVENT = slot[SLOT].trigger.model.EVENT_NOTIFY1  TM = slot[SLOT].trigger.model  TM.delete(\"waitCH1\") ; TM.delete(\"notifyCH2\")  TM.create(\"waitCH1\") ; TM.create(\"notifyCH2\")  TM.addblock.wait(\"waitCH1\", \"wait1\", EVENT)  TM.addblock.source.output(\"waitCH1\", \"sourceoutput2\", 1, 1)  TM.addblock.delay.constant(\"waitCH1\", \"delay2\", 0.01)  TM.addblock.source.output(\"waitCH1\", \"sourceoutput3\", 1, 0)  TM.addblock.source.output(\"notifyCH2\", \"sourceoutput1\", 2, 1)  TM.addblock.notify(\"notifyCH2\", \"notify2\", EVENT)  TM.addblock.delay.constant(\"notifyCH2\", \"delay3\", 0.01)  TM.addblock.source.output(\"notifyCH2\", \"sourceoutput3\", 2, 0)  TM.print(\"notifyCH2\") ; TM.print(\"waitCH1\")  TM.initiate(\"waitCH1\") ; TM.initiate(\"notifyCH2\")  This example demonstrates a trigger model that uses 2 channels to create a wait and notify pair. The wait trigger model is initiated first and when the notify trigger model reaches the notify block, the outputs of both channels will pulse high for 10 ms.  Note the assignment of the SLOT variable and change it accordingly.  Also see  None  "},{"id":88,"title":"slot[Z].trigger.model.create()","url":"116465.htm","text":"This function creates a trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.create(\"triggerModelName\")  Z  Module slot number  triggerModelName  Name of the trigger model to create  Details  You can create multiple, named trigger models with this command. Duplicate or empty trigger model name strings are not accepted; if you attempt to create a trigger model without a name or with a name that already exists, an error will occur.  You can add trigger model blocks with the slot[Z].trigger.model.addblock.* series of functions.  Example  SLOT = 1  slot[SLOT].psu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"create1\")  slot[SLOT].trigger.model.addblock.source.output(\"create1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"create1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"create1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.initiate(\"create1\")  This example creates a trigger model that turns on the output of channel 1 for 100 ms for the module installed in slot 1. Note the assignment of the SLOT variable and change it accordingly.  Also see  slot[Z].trigger.model.delete()  "},{"id":89,"title":"slot[Z].trigger.model.delete()","url":"114958.htm","text":"This function deletes a trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.delete(\"triggerModelName\")  Z  Module slot number  triggerModelName  Name of the trigger model to delete  Details  This function deletes a trigger model. Attempting to delete a running trigger model will cause an error.  You can add trigger model blocks with the slot[Z].trigger.model.addblock.* series of functions.  Example  slot[1].trigger.model.create(\"delete1\")  slot[1].trigger.model.delete(\"delete1\")  Creates and then deletes a trigger model named delete1 on the module installed in slot 1.  Also see  slot[Z].trigger.model.create()  "},{"id":90,"title":"slot[Z].trigger.model.initiate()","url":"116470.htm","text":"This function starts a specified trigger model on a module.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.initiate(\"triggerModelName\")  Z  Module slot number  triggerModelName  Name of the trigger model to start  Details  This function runs the named trigger model on a module. When this function completes, the trigger model will continue to run in the background.  Initiating a trigger module that is already running or a trigger model that has not yet been created will cause an error.  Example  SLOT =1  slot[SLOT].psu[1].source.levelv = 1.0  slot[SLOT].trigger.model.create(\"initiate1\")  slot[SLOT].trigger.model.addblock.source.output(\"initiate1\", \"sourceoutput1\", 1, 1)  slot[SLOT].trigger.model.addblock.delay.constant(\"initiate1\", \"delay2\", 0.1)  slot[SLOT].trigger.model.addblock.source.output(\"initiate1\", \"sourceoutput3\", 1, 0)  slot[SLOT].trigger.model.print(\"initiate1\")  slot[SLOT].trigger.model.initiate(\"initiate1\")  Initiates trigger model initiate1, which turns on the output of channel 1 installed in slot 1 for 100 ms. Note the assignment of the SLOT variable and change it accordingly.   Also see  slot[Z].trigger.model.abort  "},{"id":91,"title":"slot[Z].trigger.model.removeblock()","url":"116474.htm","text":"This function removes the trigger block from the trigger model.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Function  Yes  Usage  slot[Z].trigger.model.removeblock(\"triggerModelName\", \"triggerBlockName\")  Z  Module slot number  triggerModelName  Name of the trigger model from which this trigger block will be removed  triggerBlockName  Unique name of the trigger block to remove; this string cannot be empty  Details  When this command is executed, the specified trigger block within the named trigger model will be deleted. If either the trigger block name or the trigger model name does not exist, an error message will be returned.  You can add trigger model blocks with the slot[Z].trigger.model.addblock.* series of functions.  Example  PsuCh1 = slot[1].psu[1]  --- Set the initial voltage output for PSU channel 1 to 2 V   ---  PsuCh1.source.levelv = 2  --- Delete old trigger model instances before creating new ones ---  slot[1].trigger.model.delete(\"TM1\")  slot[1].trigger.model.create(\"TM1\")  --- Delete the second delay constant block before trigger model initiates ---  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOn\", 1, 1)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay1\", 0.2)  slot[1].trigger.model.addblock.delay.constant(\"TM1\", \"Delay2\", 0.5)  slot[1].trigger.model.addblock.source.output(\"TM1\", \"OutputOff\", 1, 0)  slot[1].trigger.model.removeblock(\"TM1\", \"Delay2\")  --- Execute the trigger model ---  slot[1].trigger.model.initiate(\"TM1\")  This example uses the slot[Z].trigger.model.removeblock() command to delete an existing trigger model block. This prevents the second trigger model delay block (0.5 s) from running when the trigger model is initiated.  Also see  None  "},{"id":92,"title":"slot[Z].version","url":"107215.htm","text":"This attribute stores the firmware version number of the module in the specified slot of the mainframe.  Type  TSP-Link accessible  Affected by  Where saved  Default value  Attribute (R)  Yes  Firmware upgrade  Not applicable  Not applicable  Usage  version = slot[Z].version  version  The module firmware version number  Z  Module slot number  Details  This attribute stores the firmware version number of the module installed in the specified slot.  Example  slot[1].version  Returns the firmware revision number of the module installed in slot 1.  Also see  None  "}]}